// <auto-generated> This file has been auto generated. </auto-generated>

using Microsoft.Extensions.DependencyInjection;
using HotChocolate.ApolloFederation.Types;
using HotChocolate.Execution.Configuration;
namespace SchemaToPocoPOC.Output
{
    
    [GraphQLDescription(@"Native height of AdBanner")]
    public enum AdBannerNativeSize
    {
        [GraphQLName("SMALL")] Small,
        [GraphQLName("MEDIUM")] Medium,
        [GraphQLName("LARGE")] Large
    }

    public enum RtlBoostState
    {
        [GraphQLName("BOOSTED")] Boosted,
        [GraphQLName("NOT_BOOSTED")] NotBoosted
    }

    public enum RtlOfferStatus
    {
        [GraphQLName("ACTIVE")] Active,
        [GraphQLName("ENDED")] Ended,
        [GraphQLName("COMPLETED")] Completed
    }

    public enum AlternativeProductsMode
    {
        [GraphQLName("VALUE_SWAPS")] ValueSwaps,
        [GraphQLName("SMART_ALTERNATIVES")] SmartAlternatives,
        [GraphQLName("UNIVERSAL")] Universal
    }

    public enum AlternativeProductsType
    {
        [GraphQLName("PRICE")] Price,
        [GraphQLName("SPECIALS")] Specials,
        [GraphQLName("REWARDS")] Rewards
    }

    public enum AppOS
    {
        [GraphQLName("IOS")] Ios,
        [GraphQLName("ANDROID")] Android
    }

    public enum UpgradeType
    {
        [GraphQLName("APP")] App,
        [GraphQLName("OS")] Os,
        [GraphQLDescription(@"No upgrade required")]
        [GraphQLName("NONE")] None
    }

    [GraphQLDescription(@"Generic Delivery window statuses")]
    public enum DeliveryWindowStatus
    {
        Closed,
        NotStarted,
        Available,
        ClosingSoon,
        Full,
        Exhausted,
        Error,
        Ineligible
    }

    [GraphQLDescription(@"DeliveryNow-specific statuses

Should not be really used as each is simply combining one or more `DeliveryWindowStatus`")]
    public enum DeliveryNowStatus
    {
        Open,
        Closed,
        Exhausted,
        Error,
        Ineligible
    }

    [GraphQLDescription(@"Constant value for the moment, but we want to use Site Management value at some point")]
    public enum DeliveryNowTitle
    {
        Delivery,
        Now
    }

    public enum DeliveryNowState
    {
        [GraphQLName("AVAILABLE")] Available,
        [GraphQLName("DISABLED")] Disabled,
        [GraphQLName("SELECTED")] Selected
    }

    [GraphQLDescription(@"DirectToBootNow statuses")]
    public enum DirectToBootNowStatus
    {
        Open,
        Closed,
        Exhausted,
        Error,
        Ineligible
    }

    public enum ParagraphTextItemType
    {
        [GraphQLName("BODY")] Body,
        [GraphQLName("CAPTION")] Caption
    }

    [GraphQLDescription(@"ADD_EDR: proceed with add EDR flow (guest/WOW users)
OPEN_CONSENT: show consent form (users with linked EDR card)")]
    public enum FooterActionType
    {
        [GraphQLName("ADD_EDR")] AddEdr,
        [GraphQLName("OPEN_CONSENT")] OpenConsent
    }

    public enum AlertIndicatorType
    {
        [GraphQLName("ERROR")] Error
    }

    public enum CatalogueCardType
    {
        [GraphQLName("CURRENT")] Current,
        [GraphQLName("SNEAK_PEEK")] SneakPeek
    }

    [GraphQLDescription(@"Height of Card")]
    public enum CardHeight
    {
        [GraphQLName("SMALL")] Small,
        [GraphQLName("MEDIUM")] Medium,
        [GraphQLName("LARGE")] Large
    }

    [GraphQLDescription(@"The status of the order")]
    public enum OrderStatus
    {
        [GraphQLName("PENDING")] Pending,
        [GraphQLName("READY")] Ready,
        [GraphQLName("COMPLETE")] Complete,
        [GraphQLName("CANCELLED")] Cancelled
    }

    [GraphQLDescription(@"Orientation for which HomeFulfilmentWindowContainer's objects should be stacked")]
    public enum HomeFulfilmentWindowContainerOrientation
    {
        [GraphQLName("HORIZONTAL")] Horizontal,
        [GraphQLName("VERTICAL")] Vertical
    }

    public enum HomeFulfilmentWindowTileStyle
    {
        [GraphQLName("PRIMARY")] Primary,
        [GraphQLName("NONE")] None
    }

    public enum MarketplaceLandingPageName
    {
        [GraphQLDescription(@"default, designate first default view of marketplace landing page")]
        [GraphQLName("default")] Default,
        [GraphQLDescription(@"personalised, for you page")]
        [GraphQLName("personalised")] Personalised,
        [GraphQLDescription(@"categories, categories page")]
        [GraphQLName("categories")] Categories,
        [GraphQLDescription(@"brands, brands page")]
        [GraphQLName("brands")] Brands,
        [GraphQLDescription(@"sellers, sellers page")]
        [GraphQLName("sellers")] Sellers
    }

    public enum ShoppingModeSelectorOptionState
    {
        [GraphQLName("AVAILABLE")] Available,
        [GraphQLName("DISABLED")] Disabled,
        [GraphQLName("SELECTED")] Selected
    }

    public enum CheckInType
    {
        checkIn15mins,
        checkInNow
    }

    public enum FormattedBannerStyle
    {
        [GraphQLName("WARNING")] Warning,
        [GraphQLName("INFO")] Info,
        [GraphQLName("ERROR")] Error
    }

    public enum CouponBannerColorTheme
    {
        [GraphQLName("DEFAULT")] Default,
        [GraphQLName("DEFAULT_BG_WHITE")] DefaultBgWhite,
        [GraphQLName("CUSTOM")] Custom
    }

    public enum BarcodeType
    {
        [GraphQLName("EAN_13")] Ean13,
        [GraphQLName("EAN_8")] Ean8,
        [GraphQLName("DATAMATRIX")] Datamatrix,
        [GraphQLName("QR")] Qr,
        [GraphQLName("CODE_128")] Code128,
        [GraphQLName("CODE_39")] Code39,
        [GraphQLName("UPCE")] Upce,
        [GraphQLName("GS1_DATABAR_EXPANDED")] Gs1DatabarExpanded,
        [GraphQLName("GS1_DATABAR")] Gs1Databar,
        [GraphQLName("GS1_DATABAR_LIMITED")] Gs1DatabarLimited
    }

    public enum RoundelImagePriority
    {
        [GraphQLName("PRIMARY")] Primary,
        [GraphQLName("SECONDARY")] Secondary,
        [GraphQLName("TERTIARY")] Tertiary
    }

    public enum AisleSide
    {
        [GraphQLName("left")] Left,
        [GraphQLName("right")] Right
    }

    [GraphQLDescription(@"Represents the category of the instore location details. Used by FE to determine styling.")]
    public enum InStoreLocationType
    {
        [GraphQLName("AVAILABLE")] Available,
        [GraphQLName("UNAVAILABLE")] Unavailable
    }

    [GraphQLDescription(@"Browsing mode of the app selected by user.")]
    public enum Mode
    {
        [GraphQLName("ONLINE")] Online,
        [GraphQLName("PICKUP")] Pickup,
        [GraphQLName("INSTORE")] Instore
    }

    [GraphQLDescription(@"Purchase restrictions for some types of products.
The default value is NO_RESTRICTIONS, meaning any user can purchase this product")]
    public enum PurchaseRestriction
    {
        [GraphQLName("LEGAL_AGE_RESTRICTION")] LegalAgeRestriction,
        [GraphQLName("NO_RESTRICTION")] NoRestriction
    }

    [GraphQLDescription(@"Represents the list of product promotion types")]
    public enum ProductPromotionTypes
    {
        [GraphQLName("SPECIAL")] Special,
        [GraphQLName("LOW_PRICE")] LowPrice,
        [GraphQLName("PRICE_DROPPED")] PriceDropped,
        [GraphQLName("CONTAINER_CREDITS")] ContainerCredits,
        [GraphQLName("LOWER_SHELF_PRICE")] LowerShelfPrice,
        [GraphQLName("LOWER_PRICE")] LowerPrice
    }

    [GraphQLDescription(@"Represents the list of rewards offer status")]
    public enum RewardsOfferStatus
    {
        [GraphQLName("NOT_ACTIVATED")] NotActivated,
        [GraphQLName("ACTIVATED")] Activated,
        [GraphQLName("MISSED")] Missed,
        [GraphQLName("COMPLETED")] Completed,
        [GraphQLName("ENDED")] Ended,
        [GraphQLName("PENDING")] Pending
    }

    [GraphQLDescription(@"Primary header is bold text, secondary is normal text")]
    public enum ListSectionHeaderTypes
    {
        [GraphQLName("PRIMARY")] Primary,
        [GraphQLName("SECONDARY")] Secondary
    }

    public enum MemberPricingType
    {
        BuyMoreSaveMore
    }

    public enum ProductListChannelType
    {
        Marketplace,
        [GraphQLName("WOW")] Wow
    }

    [GraphQLDescription(@"Facet for products search")]
    public enum ProductListFacetType
    {
        Category,
        Brand,
        [GraphQLDeprecated(@"Use Vendor 22.21 onwards")]
        Seller,
        Vendor
    }

    public enum CategoriesType
    {
        [GraphQLName("SPECIALS")] Specials,
        [GraphQLName("PRODUCTS")] Products,
        [GraphQLName("PRODUCTS_EM")] ProductsEm
    }

    public enum ProductCategoryTileSize
    {
        [GraphQLName("DEFAULT")] Default,
        [GraphQLName("LARGE")] Large
    }

    public enum ProductReviewSource
    {
        [GraphQLName("CART")] Cart,
        [GraphQLName("CHECKOUT")] Checkout
    }

    public enum ProductReviewGroupType
    {
        [GraphQLDescription(@"everything in here dont have an action")]
        [GraphQLName("STANDARD")] Standard,
        [GraphQLDescription(@"everything in here need to do a time selection")]
        [GraphQLName("FULFILMENT_WINDOW")] FulfilmentWindow
    }

    [GraphQLDescription(@"AVAILABLE when products substitutions suggestions available
SEARCH otherwise")]
    public enum ProductReviewAlternativeType
    {
        [GraphQLName("AVAILABLE")] Available,
        [GraphQLName("SEARCH")] Search
    }

    public enum RatingsReviewSortType
    {
        [GraphQLName("LATEST")] Latest,
        [GraphQLName("HIGHEST_RATING")] HighestRating,
        [GraphQLName("LOWEST_RATING")] LowestRating
    }

    public enum BadgeType
    {
        [GraphQLDescription(@"Matches with BrandSpecials")]
        [GraphQLName("SPECIAL")] Special,
        [GraphQLDescription(@"Matches with BrandNew")]
        [GraphQLName("NEW")] New,
        [GraphQLDescription(@"Matches with BrandRewards")]
        [GraphQLName("REWARDS")] Rewards,
        [GraphQLDescription(@"Matches with ColorPrimary")]
        [GraphQLName("PRIMARY")] Primary,
        [GraphQLDescription(@"Matches with BrandInfo")]
        [GraphQLName("INFO")] Info,
        [GraphQLDescription(@"Matches with BrandAlways")]
        [GraphQLName("ALWAYS")] Always,
        [GraphQLDescription(@"Matches with TextDisabled")]
        [GraphQLName("DISABLED")] Disabled,
        [GraphQLDescription(@"No Matching color Palette, Invalid")]
        [GraphQLName("TEMPORARY")] Temporary,
        [GraphQLDescription(@"Badge appears in Disabled tile")]
        [GraphQLName("UNAVAILABLE")] Unavailable
    }

    public enum BroadcastBannerType
    {
        [GraphQLName("NEUTRAL")] Neutral,
        [GraphQLName("PRIMARY")] Primary,
        [GraphQLName("REWARDS")] Rewards
    }

    public enum ButtonStyle
    {
        [GraphQLName("PRIMARY")] Primary,
        [GraphQLName("SECONDARY")] Secondary,
        [GraphQLName("TERTIARY")] Tertiary,
        [GraphQLName("DESTRUCTIVE")] Destructive,
        [GraphQLName("INFO")] Info,
        [GraphQLName("INSTOCK")] Instock
    }

    public enum TagStyle
    {
        [GraphQLName("UNAVAILABLE")] Unavailable,
        [GraphQLName("FEATURED")] Featured
    }

    public enum DownloadableAssetType
    {
        [GraphQLName("LOTTIE_ANIMATION")] LottieAnimation,
        [GraphQLName("IMAGE")] Image,
        [GraphQLName("NOT_SET")] NotSet
    }

    public enum DownloadableAssetFit
    {
        [GraphQLName("ASPECT_FILL")] AspectFill,
        [GraphQLName("CENTER")] Center
    }

    public enum CardSize
    {
        [GraphQLName("SMALL")] Small,
        [GraphQLName("MEDIUM")] Medium,
        [GraphQLName("LARGE")] Large,
        [GraphQLName("COMPACT")] Compact,
        [GraphQLName("REGULAR")] Regular
    }

    [GraphQLDescription(@"Represents the more card style, ROUNDED_CIRCLE is for NavRoundel type and ROUNDED_CORNER is for ContentCard type")]
    public enum MoreCardStyle
    {
        [GraphQLName("ROUNDED_CIRCLE")] RoundedCircle,
        [GraphQLName("ROUNDED_CORNER")] RoundedCorner
    }

    public enum ProgressStepType
    {
        [GraphQLDescription(@"Completed state - static green bar")]
        [GraphQLName("DONE")] Done,
        [GraphQLDescription(@"Current state - animated once green bar")]
        [GraphQLName("LOAD")] Load,
        [GraphQLDescription(@"Current state - animated loop green bar")]
        [GraphQLName("INPROGRESS")] Inprogress,
        [GraphQLDescription(@"Warning state such as store closed - flashing bar")]
        [GraphQLName("WARNING")] Warning
    }

    [GraphQLDescription(@"Type of tooltip such as info, tick etc")]
    public enum TooltipType
    {
        [GraphQLDescription(@"For Info icon image")]
        [GraphQLName("INFO")] Info,
        [GraphQLDescription(@"For completed tick icon image")]
        [GraphQLName("COMPLETED")] Completed
    }

    public enum SpacerType
    {
        [GraphQLName("NONE")] None,
        [GraphQLName("SMALL")] Small,
        [GraphQLName("REGULAR")] Regular,
        [GraphQLName("LARGE")] Large,
        [GraphQLName("XLARGE")] Xlarge
    }

    [GraphQLDescription(@"Browsing mode of the app selected by user.")]
    public enum ShoppingModeId
    {
        [GraphQLName("DELIVERY")] Delivery,
        [GraphQLName("DELIVERY_NOW")] DeliveryNow,
        [GraphQLName("PICKUP")] Pickup,
        [GraphQLName("INSTORE")] Instore
    }

    [GraphQLDescription(@"Possible state for shopping mode")]
    public enum ShoppingModeState
    {
        [GraphQLName("AVAILABLE")] Available,
        [GraphQLName("SELECTED")] Selected
    }

    [GraphQLDescription(@"Type of shopping mode")]
    public enum ShoppingModeType
    {
        [GraphQLName("DELIVERY")] Delivery,
        [GraphQLName("PICKUP")] Pickup,
        [GraphQLName("INSTORE")] Instore,
        [GraphQLName("NOTSET")] Notset
    }

    [GraphQLDescription(@"Possible state for shopping mode variant")]
    public enum ShoppingModeVariantState
    {
        [GraphQLName("AVAILABLE")] Available,
        [GraphQLName("DISABLED")] Disabled,
        [GraphQLName("SELECTED")] Selected
    }

    [GraphQLDescription(@"NOTE: Still in draft version")]
    public enum SurveyQuestionType
    {
        [GraphQLName("NPS")] Nps,
        [GraphQLName("FIVE_STAR")] FiveStar
    }

    public enum CartBannerType
    {
        [GraphQLDescription(@"Default banner action")]
        [GraphQLName("STANDARD")] Standard,
        [GraphQLDescription(@"Action lead to product review")]
        [GraphQLName("PRODUCT_REVIEW")] ProductReview,
        [GraphQLDescription(@"Action lead to update fulfilment details")]
        [GraphQLName("FULFILMENT_WINDOW")] FulfilmentWindow
    }

    public enum BundleType
    {
        [GraphQLName("MEMBER")] Member,
        [GraphQLName("ONLINE")] Online
    }

    public enum UpdateCartProductQuantityFailedReason
    {
        [GraphQLName("LOG_IN_REQUIRED")] LogInRequired,
        [GraphQLName("AGE_RESTRICTION")] AgeRestriction,
        [GraphQLName("UNSPECIFIED")] Unspecified
    }

    public enum CartProductQuantityAction
    {
        [GraphQLName("ADD")] Add,
        [GraphQLName("REMOVE")] Remove,
        [GraphQLName("UPDATE_INCREASE")] UpdateIncrease,
        [GraphQLName("UPDATE_DECREASE")] UpdateDecrease,
        [GraphQLName("INVALID")] Invalid
    }

    public enum CatalogueBrowsePageType
    {
        [GraphQLName("CATEGORY")] Category,
        [GraphQLName("PROMOTION")] Promotion
    }

    public enum CatalogueHomeCardTrackingValidity
    {
        [GraphQLName("FUTURE")] Future,
        [GraphQLName("CURRENT")] Current
    }

    public enum CheckoutMessageType
    {
        Error,
        Warning,
        Info
    }

    public enum CheckoutPackagingType
    {
        ReusableBags,
        PaperBags,
        BYOBags
    }

    public enum CheckoutInputType
    {
        SegmentIndex,
        CollectionMode,
        FulfilmentWindow,
        Packaging
    }

    public enum CollectionModeId
    {
        Delivery,
        Pickup,
        DeliveryNow
    }

    public enum CheckoutBadgeType
    {
        Status,
        Restriction
    }

    public enum CheckoutBadgeStyle
    {
        [GraphQLName("PLAIN")] Plain,
        [GraphQLName("PRIMARY")] Primary,
        [GraphQLName("PRIMARY_SOLID")] PrimarySolid
    }

    public enum CheckoutSummaryValueType
    {
        Total,
        Plain,
        Point,
        Negative,
        Bold
    }

    public enum CheckoutDeliveryPreferenceId
    {
        SelfIsolation,
        LeaveUnattended,
        DeliveryInstruction,
        NominatedIdCheck
    }

    public enum CheckoutProgressId
    {
        Details,
        [GraphQLDeprecated(@"Replaced by product restrictions")]
        ReviewProducts,
        Products,
        Summary,
        Pay
    }

    public enum FlowType
    {
        [GraphQLName("CHECKOUT")] Checkout,
        [GraphQLName("DELIVERY_UNLIMITED")] DeliveryUnlimited
    }

    public enum PaymentType
    {
        [GraphQLName("GIFT_CARD")] GiftCard,
        [GraphQLName("CREDIT_CARD")] CreditCard,
        [GraphQLName("PAYPAL")] Paypal,
        [GraphQLName("APPLE_PAY")] ApplePay,
        [GraphQLName("GOOGLE_PAY")] GooglePay
    }

    public enum ApplyPromoCodeBannerType
    {
        [GraphQLName("CREDIT")] Credit
    }

    public enum SubstitutionState
    {
        [GraphQLName("SELECTED")] Selected,
        [GraphQLName("UNSELECTED")] Unselected,
        [GraphQLName("ERROR")] Error
    }

    [GraphQLDescription(@"Possible states for Delivery Unlimited")]
    public enum MoreDeliveryUnlimitedStatus
    {
        [GraphQLName("SUBSCRIBED")] Subscribed,
        [GraphQLName("NOT_SUBSCRIBED")] NotSubscribed
    }

    public enum CancelOrderReason
    {
        [GraphQLName("WINDOW_CLOSED")] WindowClosed,
        [GraphQLName("NOT_FOUND")] NotFound
    }

    public enum InvoiceErrorReason
    {
        [GraphQLName("UNSPECIFIED")] Unspecified,
        [GraphQLName("UNAVAILABLE")] Unavailable
    }

    public enum PickUpOrderButtonState
    {
        [GraphQLName("ENABLED")] Enabled,
        [GraphQLName("DISABLED")] Disabled
    }

    public enum OrderType
    {
        [GraphQLName("CURRENT")] Current,
        [GraphQLName("PAST")] Past
    }

    public enum EditOrderDriverInstructionsReason
    {
        [GraphQLName("WINDOW_CLOSED")] WindowClosed
    }

    public enum ToggleOrderLeaveUnattendedReason
    {
        [GraphQLName("WINDOW_CLOSED")] WindowClosed
    }

    public enum OrderProductListProductPriceStyle
    {
        [GraphQLName("PLAIN")] Plain,
        [GraphQLName("ALWAYS")] Always
    }

    public enum OrderDetailsItemType
    {
        [GraphQLName("ORDER_NUMBER")] OrderNumber,
        [GraphQLName("ADDRESS")] Address,
        [GraphQLName("TIME_OF_DELIVERY")] TimeOfDelivery
    }

    public enum OrderStatusType
    {
        [GraphQLName("PENDING")] Pending,
        [GraphQLName("READY")] Ready,
        [GraphQLName("COMPLETE")] Complete,
        [GraphQLName("CANCELLED")] Cancelled
    }

    public enum ButtonState
    {
        [GraphQLName("ENABLED")] Enabled,
        [GraphQLName("DISABLED")] Disabled
    }

    public enum OrderPaymentDetailsItemAmountStyle
    {
        [GraphQLName("PLAIN")] Plain,
        [GraphQLName("ALWAYS")] Always,
        [GraphQLName("REWARDS")] Rewards
    }

    public enum OrderFulfilmentType
    {
        [GraphQLDescription(@"Order Query Service did not return a valid fulfilment type")]
        Unknown,
        [GraphQLDescription(@"In-store pickup")]
        Pickup,
        [GraphQLDescription(@"Direct to boot")]
        DriveUp,
        [GraphQLDescription(@"Fleet delivery")]
        Courier,
        [GraphQLDescription(@"Delivery now")]
        Express,
        [GraphQLDescription(@"Partner/point to point delivery")]
        Crowd,
        [GraphQLDescription(@"Direct To Boot Now")]
        DTBNow
    }

    public enum OrderSubtitleIcon
    {
        [GraphQLName("NONE")] None,
        [GraphQLName("WARNING")] Warning
    }

    public enum LocationTrackingStatusImage
    {
        [GraphQLDescription(@"Image that is used in the UI when location tracking is ON")]
        [GraphQLName("SHARING_LOCATION_ON")] SharingLocationOn,
        [GraphQLDescription(@"Image that is used in the UI when location tracking is OFF")]
        [GraphQLName("SHARING_LOCATION_OFF")] SharingLocationOff
    }

    public enum PickupLocationComponent
    {
        [GraphQLDescription(@"FE asks for UI component that is tied to state when location tracking ON")]
        [GraphQLName("LOCATION_TRACKING_STARTED")] LocationTrackingStarted,
        [GraphQLDescription(@"FE asks for UI component that is tied to state when location tracking OFF")]
        [GraphQLName("LOCATION_TRACKING_STOPPED")] LocationTrackingStopped
    }

    public enum LocationImage
    {
        [GraphQLName("YOUR_LOCATION")] YourLocation,
        [GraphQLName("LOCATION_OFF")] LocationOff,
        [GraphQLName("APP_SETTINGS")] AppSettings,
        [GraphQLName("DEFAULT")] Default
    }

    public enum MyGroceriesProductListBadgeType
    {
        [GraphQLName("SUPPLIED")] Supplied,
        [GraphQLName("OUTOFSTOCK")] Outofstock,
        [GraphQLName("SUBSTITUTED")] Substituted,
        [GraphQLName("TOTAL")] Total
    }

    public enum FeatureType
    {
        [GraphQLName("SERVES")] Serves,
        [GraphQLName("PREP")] Prep,
        [GraphQLName("COOK")] Cook
    }

    public enum BannerTarget
    {
        [GraphQLName("FRESH_MAG")] FreshMag,
        [GraphQLName("SAVED_RECIPES")] SavedRecipes
    }

    public enum ActionType
    {
        [GraphQLName("LINK")] Link,
        [GraphQLName("APPLOCAL")] Applocal
    }

    public enum HeroBannerTitleSize
    {
        [GraphQLName("SMALL")] Small,
        [GraphQLName("LARGE")] Large
    }

    [GraphQLDescription(@"content card size")]
    public enum ContentCardSize
    {
        [GraphQLName("SMALL")] Small,
        [GraphQLName("LARGE")] Large
    }

    [GraphQLDescription(@"Represents footer style, BYLINE is left aligned, TANDC is right aligned")]
    public enum FooterStyle
    {
        [GraphQLName("BYLINE")] Byline,
        [GraphQLName("TANDC")] Tandc
    }

    [GraphQLDescription(@"Enumeration of broadcast banner styles for various themes.")]
    public enum CoreBroadcastBannerStyle
    {
        [GraphQLDescription(@"A standard style, typically used as a default.")]
        [GraphQLName("STANDARD")] Standard,
        [GraphQLDescription(@"A style that contrasts with the background for better visibility.")]
        [GraphQLName("ON_CONTRAST")] OnContrast,
        [GraphQLDescription(@"A style specific to Woolworths branding.")]
        [GraphQLName("WOOLWORTHS")] Woolworths,
        [GraphQLDescription(@"A style specific to Everyday branding.")]
        [GraphQLName("EVERYDAY")] Everyday,
        [GraphQLDescription(@"A style specific to Big W branding.")]
        [GraphQLName("BIG_W")] BigW
    }

    public enum CoreButtonStyle
    {
        [GraphQLName("PRIMARY")] Primary,
        [GraphQLName("SECONDARY")] Secondary,
        [GraphQLName("TERTIARY")] Tertiary,
        [GraphQLName("DESTRUCTIVE")] Destructive
    }

    public enum CoreAlertStyle
    {
        [GraphQLName("INFO")] Info,
        [GraphQLName("WARNING")] Warning,
        [GraphQLName("ERROR")] Error,
        [GraphQLName("SUCCESS")] Success
    }

    public enum BannerImageFormat
    {
        [GraphQLName("HALF_WIDTH")] HalfWidth,
        [GraphQLName("FULL_WIDTH")] FullWidth,
        [GraphQLName("PORTRAIT")] Portrait
    }

    public enum GenericPageHeroImageType
    {
        [GraphQLDescription(@"The image will fill the entire container while maintaining its aspect ratio, which may result in some parts of the image being cropped if the container dimensions don't match the image.")]
        [GraphQLName("ASPECT_FILL")] AspectFill,
        [GraphQLDescription(@"Will display the entire image, stretching full width or height without cropping, maintaining its aspect ratio.")]
        [GraphQLName("ASPECT_FIT")] AspectFit
    }

    public enum InsetBannerDisplayType
    {
        [GraphQLName("INFO")] Info,
        [GraphQLName("WARNING")] Warning,
        [GraphQLDescription(@"ERROR value is added as an extension works after 07-Oct-2021")]
        [GraphQLName("ERROR")] Error,
        [GraphQLName("REWARDS")] Rewards,
        [GraphQLName("GREEN")] Green
    }

    public enum InsetBannerActionPlacement
    {
        [GraphQLName("BOTTOM")] Bottom,
        [GraphQLName("RIGHT")] Right
    }

    public enum InsetBannerActionType
    {
        [GraphQLName("LINK")] Link,
        [GraphQLDescription(@"FE handled action")]
        [GraphQLName("APPLOCAL")] Applocal
    }

    public enum PageCoverTitleTextSize
    {
        [GraphQLName("LARGE")] Large,
        [GraphQLName("SMALL")] Small
    }

    public enum PageCoverContentFormat
    {
        [GraphQLName("CONTENT_BLOCK_AND_IMAGE")] ContentBlockAndImage,
        [GraphQLName("LOCKUP_AND_IMAGE")] LockupAndImage,
        [GraphQLName("CONTENT_BLOCK_ONLY")] ContentBlockOnly,
        [GraphQLName("LOCKUP_ONLY")] LockupOnly
    }

    public enum PageCoverContentAlignment
    {
        [GraphQLName("LEFT")] Left,
        [GraphQLName("CENTER")] Center
    }

    public enum PageCoverImagePosition
    {
        [GraphQLName("TOP")] Top,
        [GraphQLName("BOTTOM")] Bottom
    }

    public enum ContextType
    {
        [GraphQLDescription(@"represents the search nav card context for recipes")]
        [GraphQLName("RECIPES")] Recipes
    }

    [GraphQLDescription(@"Primary is the biggest FE style for the text")]
    public enum TitleSectionTypes
    {
        [GraphQLName("PRIMARY")] Primary,
        [GraphQLName("SECONDARY")] Secondary,
        [GraphQLName("TERTIARY")] Tertiary,
        [GraphQLName("NOT_SET")] NotSet
    }

    [GraphQLDescription(@"offercard variants defined in AEM")]
    public enum OfferCardVariants
    {
        [GraphQLName("SPECIALS")] Specials,
        [GraphQLName("GENERIC")] Generic,
        [GraphQLName("EVERYDAYMARKET")] Everydaymarket,
        [GraphQLName("LOWPRICE")] Lowprice,
        [GraphQLName("CUSTOMCOLOR")] Customcolor,
        [GraphQLName("IMAGEONLY")] Imageonly
    }

    public enum OfferCardTextColor
    {
        [GraphQLName("LIGHT")] Light,
        [GraphQLName("DARK")] Dark
    }

    public enum MarketFulfilmentAddressStatus
    {
        [GraphQLName("ADDRESS_SET")] AddressSet,
        [GraphQLName("ADDRESS_REQUIRED")] AddressRequired,
        [GraphQLName("ADDRESS_NOT_REQUIRED")] AddressNotRequired
    }

    public enum AddressType
    {
        [GraphQLName("ALTERNATE")] Alternate,
        [GraphQLName("PRIMARY")] Primary
    }

    public enum FulfilmentWindowSlotSelectionOptionId
    {
        [GraphQLName("DIRECT_TO_BOOT")] DirectToBoot,
        [GraphQLName("SELF_SERVICE")] SelfService,
        [GraphQLName("ELOCKER")] Elocker
    }

    public enum FulfilmentWindowsFooterIcon
    {
        [GraphQLName("GREEN_DELIVERY")] GreenDelivery,
        [GraphQLName("PARTNER_DELIVERY")] PartnerDelivery,
        [GraphQLName("NONE")] None
    }

    public enum EditOrderMode
    {
        [GraphQLName("EDITING")] Editing,
        [GraphQLName("NOT_EDITING")] NotEditing
    }

    public enum EditOrderReason
    {
        [GraphQLName("WINDOW_CLOSED")] WindowClosed,
        [GraphQLName("NOT_FOUND")] NotFound,
        [GraphQLName("IS_ALREADY_AMENDING")] IsAlreadyAmending
    }

    public enum OrderHelpItemType
    {
        [GraphQLName("FAQ")] Faq,
        [GraphQLName("CHAT")] Chat,
        [GraphQLName("CALL_US")] CallUs
    }

    #nullable enable
    [Shareable]
    public class GetPickupStoresInput
    {
        public decimal? Latitude { get; set; }

        public decimal? Longitude { get; set; }

        public string? Postcode { get; set; }

        public int? StoreAddressId { get; set; }

        public int? StoreId { get; set; }

        public int? Limit { get; set; }

    }

    [Shareable]
    public class AddressInput
    {
        public string? AmasId { get; set; }

        public string? Street1 { get; set; }

        public string? Street2 { get; set; }

        public int? SuburbId { get; set; }

        public string? Postcode { get; set; }

        public bool? IsForBilling { get; set; }

        public bool? IsAlternateAddressId { get; set; }

        public int? AlternateAddressId { get; set; }

    }

    [Shareable]
    public class ContentPageExtraInput
    {
        [GraphQLDescription(@"Represents the current shopping mode
selected by the shopper id.")]
        [GraphQLNonNullType]
        public ShoppingModeType Mode { get; set; }

        [GraphQLDescription(@"Represents the store id. *e.g. ""1550""*.
Required if mode is INSTORE")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"List of app action that the client supports. This ensures
that app actions coming out of this response works for the client
ie. [""openbottomsheet""]")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedActions { get; set; }

        [GraphQLDescription(@"List of deeplink sections that the client supports. This ensures
that deeplinks coming out of this response works for the client")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedLinks { get; set; }

        [GraphQLDescription(@"Used to determine where paginated response should begin.
FE should send pageNumber as null when requesting the first page, bff will default it to 1")]
        public int? PageNumber { get; set; }

    }

    [Shareable]
    public class GetAlternativeProductsInput
    {
        [GraphQLDescription(@"A unique id that need to be passed in order to get the alternative products for a product.")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLDescription(@"Represents the unique store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. ""1550""*.")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"Determines whether an additional section is included in the response with products from the same category
Defaults to false if not passed in the query")]
        public bool? ShouldIncludeProductsFromCategory { get; set; }

        [GraphQLDescription(@"""VALUE_SWAPS"", ""SMART_ALTERNATIVES"" or ""UNIVERSAL""
Determines which upstream API gets used and each one has different presentation logic
Defaults to ""SMART_ALTERNATIVES"" if not present")]
        public AlternativeProductsMode? AlternativeProductsMode { get; set; }

    }

    [Shareable]
    public class ConfigInput
    {
        [GraphQLNonNullType]
        public string AppVersion { get; set; }

        [GraphQLNonNullType]
        public AppOS Platform { get; set; }

        [GraphQLNonNullType]
        public string OsVersion { get; set; }

    }

    [GraphQLDescription(@"Input parameters of the Query.brandedShop")]
    [Shareable]
    public class BrandedShopInput
    {
        [GraphQLDescription(@"Represents the page/content identification
that needs to be displayed.")]
        public string? ContentId { get; set; }

        [GraphQLDescription(@"Represents the store id. *e.g. ""1550""*.")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"Represents the current shopping mode
selected by the shopper id.")]
        [GraphQLNonNullType]
        public ShoppingModeType Mode { get; set; }

        [GraphQLDescription(@"List of deeplink sections that the client supports. This ensures
that deeplinks coming out of this response works for the client")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedLinks { get; set; }

        [GraphQLDescription(@"List of app action that the client supports. This ensures
that app actions coming out of this response works for the client
ie. [""openbottomsheet""]")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedActions { get; set; }

    }

    [Shareable]
    public class BundlesInput
    {
        [GraphQLDescription(@"Represents the store id when shopping mode is In-store.")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"Selected chips")]
        public ICollection<string>? Chips { get; set; }

        [GraphQLDescription(@"Apply a sorting option to the bundles result using a sorting algorithm")]
        public string? SortOption { get; set; }

        [GraphQLDescription(@"When true, BFF will apply any filters, chips etc pass in arguments field (instead of the input fields)")]
        public bool? InitialLoad { get; set; }

        [GraphQLDescription(@"Optional arguments to pass arbitrary parameters to BFF, mainly to be used together with initialLoad: true")]
        public string? Argument { get; set; }

    }

    [Shareable]
    public class DeepLinkInput
    {
        [GraphQLDescription(@"For example a URL (e.g. https://www.woolworths.com.au/shop/browse/bakery)")]
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLDescription(@"Represents the current shopping mode
selected by the shopper id.")]
        [GraphQLNonNullType]
        public ShoppingModeType Mode { get; set; }

        [GraphQLDescription(@"Represents the store id. *e.g. ""1550""*.
Required if mode is INSTORE")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"List of deepLink sections that the client supports. This ensures
that deepLink coming out of this response works for the client")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedLinks { get; set; }

    }

    [Shareable]
    public class DeliveryUnlimitedPaymentInput
    {
        [GraphQLNonNullType]
        public string PlanId { get; set; }

        [ID]
        public string? SelectedId { get; set; }

    }

    [GraphQLDescription(@"Input parameters of the Query.dynamicPage")]
    [Shareable]
    public class DynamicPageInput
    {
        [GraphQLDescription(@"page ID - used to resolve the content from Adobe Target")]
        [GraphQLNonNullType]
        public string PageId { get; set; }

        [GraphQLDescription(@"supportedLinks - all clickable components are filters so that unsupported links arent returned")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedLinks { get; set; }

        [GraphQLDescription(@"supportedActions - for supported actions: [""openbottomsheet""]")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedActions { get; set; }

    }

    [GraphQLDescription(@"Input type for fetching node content")]
    [Shareable]
    public class NodeInput
    {
        [GraphQLDescription(@"Required nodeId: currently we support format: productsByIds|123,456,789")]
        [GraphQLNonNullType]
        public string NodeId { get; set; }

        [GraphQLDescription(@"Required shopping mode type (e.g., delivery, pickup)")]
        [GraphQLNonNullType]
        public ShoppingModeType Mode { get; set; }

        [GraphQLDescription(@"Optional store identifier")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"List of supported actions for this node
Must be non-null array of non-null strings")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedActions { get; set; }

        [GraphQLDescription(@"List of supported links for this node
Must be non-null array of non-null strings")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedLinks { get; set; }

    }

    [Shareable]
    public class HomePageInput
    {
        [GraphQLDescription(@"Represents the current shopping mode
selected by the shopper id.")]
        [GraphQLNonNullType]
        public ShoppingModeType Mode { get; set; }

        [GraphQLDescription(@"Represents the store id. *e.g. ""1550""*.
Required if mode is INSTORE")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"List of app action that the client supports. This ensures
that app actions coming out of this response works for the client
ie. [""openbottomsheet""]")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedActions { get; set; }

        [GraphQLDescription(@"List of deeplink sections that the client supports. This ensures
that deeplinks coming out of this response works for the client")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedLinks { get; set; }

    }

    [Shareable]
    public class CreateListInput
    {
        [GraphQLNonNullType]
        public string Title { get; set; }

        [GraphQLNonNullType]
        public string Color { get; set; }

        [GraphQLNonNullType]
        public ICollection<CreateProductItemInput> ProductItems { get; set; }

        [GraphQLNonNullType]
        public ICollection<CreateFreeTextItemInput> FreeTextItems { get; set; }

        [GraphQLDescription(@"Local reference id when create a new list")]
        [GraphQLNonNullType]
        public string ReferenceId { get; set; }

    }

    [Shareable]
    public class EditListInput
    {
        [GraphQLNonNullType]
        public string Title { get; set; }

        [GraphQLNonNullType]
        public string Color { get; set; }

        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }

        [GraphQLNonNullType]
        public decimal LastSynced { get; set; }

    }

    [GraphQLDescription(@"Contains local lists infomation")]
    [Shareable]
    public class LocalList
    {
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }

    }

    [GraphQLDescription(@"Contains ids of the lists which need to be updated")]
    [Shareable]
    public class UpdateListInput
    {
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLNonNullType]
        public string Title { get; set; }

        [GraphQLNonNullType]
        public string Color { get; set; }

        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }

    }

    [GraphQLDescription(@"Contains ids of lists which need to be deleted")]
    [Shareable]
    public class DeleteListInput
    {
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }

    }

    [Shareable]
    public class RemoveListItemInput
    {
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }

    }

    [Shareable]
    public class CreateProductItemInput
    {
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLNonNullType]
        public decimal Quantity { get; set; }

        [GraphQLNonNullType]
        public bool Checked { get; set; }

    }

    [Shareable]
    public class CreateFreeTextItemInput
    {
        [GraphQLNonNullType]
        public string Text { get; set; }

        [GraphQLNonNullType]
        public bool Checked { get; set; }

        [GraphQLDescription(@"Frontend locally stored Id, used for identify newly created free text items")]
        [ID]
        public string? ReferenceId { get; set; }

    }

    [Shareable]
    public class UpdateProductItemInput
    {
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLNonNullType]
        public decimal Quantity { get; set; }

        [GraphQLNonNullType]
        public bool Checked { get; set; }

        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }

    }

    [Shareable]
    public class UpdateFreeTextItemInput
    {
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLNonNullType]
        public string Text { get; set; }

        [GraphQLNonNullType]
        public bool Checked { get; set; }

        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }

    }

    [Shareable]
    public class SyncListItemsInput
    {
        [GraphQLNonNullType]
        public string ListId { get; set; }

        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }

        [GraphQLNonNullType]
        public ICollection<CreateProductItemInput> CreatedProductItems { get; set; }

        [GraphQLNonNullType]
        public ICollection<CreateFreeTextItemInput> CreatedFreeTextItems { get; set; }

        [GraphQLNonNullType]
        public ICollection<UpdateProductItemInput> UpdatedProductItems { get; set; }

        [GraphQLNonNullType]
        public ICollection<UpdateFreeTextItemInput> UpdatedFreeTextItems { get; set; }

        [GraphQLNonNullType]
        public ICollection<RemoveListItemInput> DeletedItems { get; set; }

    }

    [Shareable]
    public class SyncListsInputOptions
    {
        [GraphQLDescription(@"supported special list types, for example [""watchlist""]")]
        public ICollection<string>? SupportedListTypes { get; set; }

    }

    [GraphQLDescription(@"Perform sync actions(create, update, delete) on list level")]
    [Shareable]
    public class SyncListsInput
    {
        public SyncListsInputOptions? Options { get; set; }

        [GraphQLNonNullType]
        public ICollection<LocalList> LocalLists { get; set; }

        [GraphQLNonNullType]
        public ICollection<CreateListInput> CreatedLists { get; set; }

        [GraphQLNonNullType]
        public ICollection<UpdateListInput> UpdatedLists { get; set; }

        [GraphQLNonNullType]
        public ICollection<DeleteListInput> DeletedLists { get; set; }

    }

    [GraphQLDescription(@"Contains list details")]
    [Shareable]
    public class ListDetailsInput
    {
        public string? StoreId { get; set; }

        [GraphQLNonNullType]
        public ICollection<ProductItemInput> ProductItems { get; set; }

        [ID]
        public string? ListId { get; set; }

    }

    [GraphQLDescription(@"Contains product item info in a list")]
    [Shareable]
    public class ProductItemInput
    {
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLNonNullType]
        public decimal Quantity { get; set; }

        [GraphQLNonNullType]
        public bool Checked { get; set; }

        [GraphQLNonNullType]
        public bool IsAvailable { get; set; }

    }

    [Shareable]
    public class MenuPageInput
    {
        [GraphQLDescription(@"Optional submenu page id
(null = root level menu page)")]
        public string? Id { get; set; }

        [GraphQLDescription(@"Represents the current shopping mode
selected by the shopper id.")]
        [GraphQLNonNullType]
        public ShoppingModeType Mode { get; set; }

        [GraphQLDescription(@"Represents the store id. *e.g. ""1550""*.
Required if mode is INSTORE")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"List of app action that the client supports. This ensures
that app actions coming out of this response works for the client
ie. [""openbottomsheet""]")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedActions { get; set; }

        [GraphQLDescription(@"List of deeplink sections that the client supports. This ensures
that deeplinks coming out of this response works for the client")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedLinks { get; set; }

    }

    [Shareable]
    public class OrderCheckInOnMyWayInput
    {
        [GraphQLDescription(@"Id of the order associated with the on my way checkin")]
        [GraphQLNonNullType]
        public string OrderId { get; set; }

        [GraphQLDescription(@"ETA selected by shopper")]
        public string? OnMyWayEta { get; set; }

        [GraphQLDescription(@"Position of the customer")]
        public GeoLocation? GeoLocation { get; set; }

    }

    [Shareable]
    public class GeoLocation
    {
        [GraphQLDescription(@"latitude - horizontal lines that measure distance north or south of the equator")]
        [GraphQLNonNullType]
        public decimal Latitude { get; set; }

        [GraphQLDescription(@"longitude - vertical lines that measure east or west of the meridian in Greenwich, England")]
        [GraphQLNonNullType]
        public decimal Longitude { get; set; }

    }

    [Shareable]
    public class PickupOrderLocationUpdateInput
    {
        [GraphQLDescription(@"Id of the order associated with the on my way checkin")]
        [GraphQLNonNullType]
        public string OrderId { get; set; }

        [GraphQLDescription(@"latitude - horizontal lines that measure distance north or south of the equator")]
        [GraphQLNonNullType]
        public decimal Latitude { get; set; }

        [GraphQLDescription(@"longitude - vertical lines that measure east or west of the meridian in Greenwich, England")]
        [GraphQLNonNullType]
        public decimal Longitude { get; set; }

    }

    [Shareable]
    public class ProductDetailsPageInput
    {
        public string? ProductId { get; set; }

        public string? Barcode { get; set; }

        public BarcodeType? BarcodeType { get; set; }

        [GraphQLDescription(@"Represents the current shopping mode
selected by the shopper id.")]
        [GraphQLNonNullType]
        public ShoppingModeType Mode { get; set; }

        [GraphQLDescription(@"Represents the store id. *e.g. ""1550""*.
Required if mode is INSTORE")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"List of app action that the client supports. This ensures
that app actions coming out of this response works for the client
ie. [""openbottomsheet""]")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedActions { get; set; }

        [GraphQLDescription(@"List of deeplink sections that the client supports. This ensures
that deeplinks coming out of this response works for the client")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedLinks { get; set; }

        [GraphQLDescription(@"MarketplaceShippingInfo param, which will only required by edm product")]
        public MarketplaceShippingInfo? MarketplaceShippingInfo { get; set; }

    }

    [Shareable]
    public class MarketplaceShippingInfo
    {
        [GraphQLDescription(@"Postcode new nullable param, should not send it when no value")]
        public string? Postcode { get; set; }

        [GraphQLDescription(@"suburb new nullable param, witch will overwrite the suburb from postcode query")]
        public string? Suburb { get; set; }

    }

    [GraphQLDescription(@"Set of variables to be passed to every call to Adobe Target Delivery API")]
    [Shareable]
    public class CroVariables
    {
        [GraphQLDescription(@"Adobe SDK id")]
        [GraphQLNonNullType]
        public string AdobeEcid { get; set; }

        [GraphQLDescription(@"Store Id for pickup")]
        public string? PickupStoreId { get; set; }

        [GraphQLDescription(@"User's last known delivery address' Postcode")]
        public string? DeliveryAddressPostcode { get; set; }

    }

    [GraphQLDescription(@"A list of product filters.")]
    [Shareable]
    public class ProductFilterOption
    {
        [GraphQLDescription(@"Represents the header type/key of the filter.")]
        [GraphQLNonNullType]
        public string Type { get; set; }

        [GraphQLDescription(@"Represent the list of filter values/keys to be filtered with in specific filter type.")]
        [GraphQLNonNullType]
        public ICollection<string> Values { get; set; }

    }

    [Shareable]
    public class ChipsProductListInputArgs
    {
        [GraphQLDescription(@"List of selected Chips (id field) (isSelected: true in Chip type)")]
        [GraphQLNonNullType]
        public ICollection<string> Selected { get; set; }

        [GraphQLDescription(@"Chips which user action triggered to select (list if ids)")]
        [GraphQLNonNullType]
        public ICollection<string> ToggleOn { get; set; }

        [GraphQLDescription(@"Chips which user action triggered to unselect (list if ids)")]
        [GraphQLNonNullType]
        public ICollection<string> ToggleOff { get; set; }

    }

    [Shareable]
    public class ProductListInput
    {
        [GraphQLDescription(@"Generic id to query Product List, for example:
  - search
  - searchAlternative
  - category
  - buyAgain
  - haveYouForgotten")]
        [GraphQLNonNullType]
        public string Type { get; set; }

        [GraphQLDescription(@"Optional argument used for the searchType, for example:
  - Milk (for search)
  - 1-EFEG84A (for category)")]
        public string? Argument { get; set; }

        [GraphQLDescription(@"Represents the store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. ""1550""*.")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"Selected facet chip
Used for Faceted Search, generally a 3rd level category to narrow list of products")]
        [ID]
        public string? FacetChip { get; set; }

        [GraphQLDescription(@"State and changes to chips")]
        public ChipsProductListInputArgs? Chips { get; set; }

        [GraphQLDescription(@"Apply the list of filter options to the products in the response")]
        public ICollection<ProductFilterOption?>? FilterOptions { get; set; }

        [GraphQLDescription(@"Used to filter the products from the list and return only the groceries or include market products
Default values depends on searchType")]
        public bool? IncludeMarketProducts { get; set; }

        [GraphQLDescription(@"When true, BFF will apply any filters, chips etc pass in arguments field (instead of the input fields)")]
        public bool? InitialLoad { get; set; }

        [GraphQLDescription(@"Used to determine where paginated response should begin. Defaults to 1.")]
        public int? PageNumber { get; set; }

        [GraphQLDescription(@"Used to determine size of paginated response. Defaults to 200.")]
        public int? PageSize { get; set; }

        [GraphQLDescription(@"Apply a sorting option to the search result using a sorting algorithm as provided by Trader for online mode or SAAS for Instore mode. e.g ""PriceAsc"", ""PriceDesc"", ""Name""
If a sorting option in not supplied, Iris defaults the sort option to a option relevant to searchType.")]
        public string? SortOption { get; set; }

        [GraphQLDescription(@"Override 'source' value for product card returned")]
        public string? Source { get; set; }

        [GraphQLDescription(@"List of deeplink sections that the client supports. This ensures
that deeplinks coming out of this response works for the client")]
        public ICollection<string>? SupportedLinks { get; set; }

    }

    [Shareable]
    public class CategoryAndEventsInput
    {
        [GraphQLDescription(@"Category or Events Page ID
(null = default landing page)")]
        [ID]
        public string? Id { get; set; }

        [GraphQLDescription(@"Represents the current shopping mode
selected by the shopper id.")]
        [GraphQLNonNullType]
        public ShoppingModeType Mode { get; set; }

        [GraphQLDescription(@"Represents the store id. *e.g. ""1550""*.
Required if mode is INSTORE")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"List of app action that the client supports. This ensures
that app actions coming out of this response works for the client
ie. [""openbottomsheet""]")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedActions { get; set; }

        [GraphQLDescription(@"List of deeplink sections that the client supports. This ensures
that deeplinks coming out of this response works for the client")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedLinks { get; set; }

    }

    [Shareable]
    public class ProductReviewInput
    {
        [GraphQLDescription(@"Enum representing which screen calls review products modal
Contents are different between cart and checkout")]
        [GraphQLNonNullType]
        public ProductReviewSource Source { get; set; }

    }

    [Shareable]
    public class UpdateProductReviewProductQuantitiesInput
    {
        [GraphQLDescription(@"Enum representing which screen calls review products modal
Contents are different between cart and checkout")]
        [GraphQLNonNullType]
        public ProductReviewSource Source { get; set; }

        [GraphQLNonNullType]
        public ICollection<ProductReviewProductQuantityUpdate> ProductReviewProductQuantityUpdates { get; set; }

    }

    [Shareable]
    public class ProductReviewProductQuantityUpdate
    {
        [GraphQLDescription(@"Product stockcode")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLDescription(@"Desired quantity")]
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }

    }

    [Shareable]
    public class SubstitutionPreferenceInput
    {
        [GraphQLDescription(@" Product Id to fetch the substitutions for ")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLDescription(@" The quantity the customer has selected, depending the product this could be a weight or the number of units")]
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }

    }

    [Shareable]
    public class UserSubstitutionPreferencesInput
    {
        [GraphQLDescription(@"array of substitution preferences to be updated")]
        [GraphQLNonNullType]
        public ICollection<UserSubstitutionPreference> Items { get; set; }

        public bool? WithCheckoutResponse { get; set; }

    }

    [Shareable]
    public class UserSubstitutionPreference
    {
        [GraphQLDescription(@"text")]
        public bool? AllowSubstitution { get; set; }

        [GraphQLDescription(@"stock code")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLDescription(@"Selected product recommendations")]
        public ICollection<string>? Preferred { get; set; }

        [GraphQLDescription(@"non selected product recommendations")]
        public ICollection<string>? NonPreferred { get; set; }

        [GraphQLDescription(@"selected customer selection")]
        public string? CustomerSelection { get; set; }

    }

    [Shareable]
    public class ProductRatingsAndReviewsDetailsInput
    {
        [GraphQLDescription(@"A unique id represents product")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLDescription(@"Sort by LATEST, HIGHEST_RATING, LOWEST_RATING")]
        public RatingsReviewSortType? SortOption { get; set; }

        [GraphQLDescription(@"Used to specify the maximum size of the paginated response.")]
        public int? PageSize { get; set; }

        [GraphQLDescription(@"Used to determine where paginated response should begin. Defaults to 0.")]
        public int? PageNumber { get; set; }

        [GraphQLDescription(@"List of deeplink sections that the client supports. This ensures
that deeplinks coming out of this response works for the client")]
        public ICollection<string>? SupportedLinks { get; set; }

    }

    [Shareable]
    public class ProductRatingsAndReviewsPreviewInput
    {
        [GraphQLDescription(@"A unique id represents product")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLDescription(@"List of deeplink sections that the client supports. This ensures
that deepLinks coming out of this response works for the client")]
        public ICollection<string>? SupportedLinks { get; set; }

    }

    [GraphQLDescription(@"Input fields required for submitting a product review.")]
    [Shareable]
    public class SubmitProductReviewInput
    {
        [GraphQLDescription(@"Unique identifier for the product being reviewed.")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLDescription(@"The rating given to the product, typically on a scale (e.g., 1 to 5).")]
        [GraphQLNonNullType]
        public decimal Rating { get; set; }

        [GraphQLDescription(@"A brief title for the review.")]
        [GraphQLNonNullType]
        public string Title { get; set; }

        [GraphQLDescription(@"Detailed text body of the review.")]
        [GraphQLNonNullType]
        public string ReviewText { get; set; }

        [GraphQLDescription(@"Nickname of the user submitting the review.")]
        [GraphQLNonNullType]
        public string UserNickname { get; set; }

        [GraphQLDescription(@"Flag indicating if the user has agreed to terms and conditions.")]
        [GraphQLNonNullType]
        public bool AgreedToTermsAndConditions { get; set; }

    }

    [GraphQLDescription(@"input for writeReviewForm")]
    [Shareable]
    public class WriteReviewFormInput
    {
        [GraphQLDescription(@"Unique identifier for the product.")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLDescription(@"current store id,")]
        public string? StoreId { get; set; }

    }

    [Shareable]
    public class StoresForProductInput
    {
        public string? StoreId { get; set; }

        public GeoLocation? GeoLocation { get; set; }

        public string? Postcode { get; set; }

        [GraphQLNonNullType]
        public string ProductId { get; set; }

    }

    [GraphQLDescription(@"Survey response input")]
    [Shareable]
    public class CheckoutSurveyResponse
    {
        [GraphQLDescription(@"Question ID")]
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLDescription(@"Answer for the current question

NOTE: There are no ""any"" or union of basic types in graphql.
For now, all answers are expected to be string")]
        [GraphQLNonNullType]
        public string Answer { get; set; }

        [GraphQLDescription(@"Comment for the current question")]
        public string? Comment { get; set; }

    }

    [Shareable]
    public class DeviceInfo
    {
        [GraphQLDescription(@"Device model
e.g. iphone 12")]
        public string? DeviceModel { get; set; }

        [GraphQLDescription(@"Device vendor
e.g. Apple")]
        public string? DeviceVendor { get; set; }

        [GraphQLDescription(@"Device operating system
e.g. IOS 14")]
        public string? OperatingSystem { get; set; }

        [GraphQLDescription(@"Screen resolution in PX
e.g. 1792x828")]
        public string? ScreenResolution { get; set; }

        [GraphQLDescription(@"Screen resolution in CM")]
        public string? ScreenResolutionInCm { get; set; }

        [GraphQLDescription(@"Usable screen resolution in PX")]
        public string? UsableScreenResolution { get; set; }

        [GraphQLDescription(@"Usable screen resolution in CM")]
        public string? UsableScreenResolutionInCm { get; set; }

        [GraphQLDescription(@"Phone Network retailer")]
        public string? PhoneNetworkRetailer { get; set; }

        [GraphQLDescription(@"Mobile Signal Strength")]
        public string? MobileSignalStrength { get; set; }

        [GraphQLDescription(@"Available storage space")]
        public string? StorageSpaceAvailable { get; set; }

        [GraphQLDescription(@"App version
e.g. 21.14")]
        public string? AppVersion { get; set; }

        [GraphQLDescription(@"Location data (lat, long)
e.g. 100.00, 200.00")]
        public string? LocationData { get; set; }

    }

    [GraphQLDescription(@"Request to update the quantity of products that are in cart")]
    [Shareable]
    public class UpdateCartProductQuantitiesInput
    {
        [GraphQLNonNullType]
        public ICollection<CartProductQuantityUpdate> CartProductQuantityUpdates { get; set; }

    }

    [GraphQLDescription(@"Quantity update for a single cart product")]
    [Shareable]
    public class CartProductQuantityUpdate
    {
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLNonNullType]
        public decimal Quantity { get; set; }

        public string? AdId { get; set; }

        public string? Source { get; set; }

    }

    [Shareable]
    public class CatalogueHomeSaleFinderStore
    {
        [GraphQLDescription(@"The SaleFinder storeId e.g., 4922 for Sydney Metcentre (different from Woolies storeId)")]
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLDescription(@"e.g., Woolworths Sydney Metcentre")]
        [GraphQLNonNullType]
        public string Name { get; set; }

        [GraphQLDescription(@"e.g., 2000")]
        [GraphQLNonNullType]
        public string PostCode { get; set; }

    }

    [GraphQLDescription(@"Input parameters of the Query.cataloguePromotionDetails")]
    [Shareable]
    public class CataloguePromotionDetailsInput
    {
        [GraphQLDescription(@"Represents the store id. *e.g. ""1550""*.")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"Represents the current shopping mode.")]
        [GraphQLNonNullType]
        public ShoppingModeType Mode { get; set; }

        [GraphQLDescription(@"Represents the size of the page.")]
        public int? PageSize { get; set; }

        [GraphQLDescription(@"Represents the number of the page.")]
        public int? PageNumber { get; set; }

        [GraphQLDescription(@"Represents the product id. *e.g. ""123456""*.")]
        public string? ProductId { get; set; }

        [GraphQLDescription(@"Represents the offer id. *e.g. ""1550""*.")]
        public string? OfferId { get; set; }

        [GraphQLDescription(@"Product source for analytics")]
        public string? RequestSource { get; set; }

    }

    [Shareable]
    public class CompleteIdVerificationInput
    {
        [GraphQLNonNullType]
        public string ApplicationToken { get; set; }

    }

    [Shareable]
    public class PaymentInstrumentsInput
    {
        [GraphQLDescription(@"Checkout session IDs, only for newly added temporary cards")]
        [GraphQLNonNullType]
        public ICollection<string> CheckoutSessions { get; set; }

        [GraphQLDescription(@"used for:
  - temporary CC (checkoutSessionId)
  - saved CC (paymentMethodId)
  - linked paypal account(paymentMethodId)
  - Apple Pay (APPLE_PAY)
  - Google Pay (GOOGLE_PAY)")]
        [ID]
        public string? SelectedId { get; set; }

        [GraphQLNonNullType]
        public ICollection<UnlinkedGiftCardInput> UnlinkedGiftcards { get; set; }

        [GraphQLNonNullType]
        public ICollection<LinkedGiftCardInput> LinkedGiftcards { get; set; }

    }

    [Shareable]
    public class LinkedGiftCardInput
    {
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLNonNullType]
        public bool IsSelected { get; set; }

        [GraphQLDescription(@"Amount redeemed in cents")]
        [GraphQLNonNullType]
        public int AmountRedeemed { get; set; }

    }

    [Shareable]
    public class UnlinkedGiftCardInput
    {
        [GraphQLNonNullType]
        public string Number { get; set; }

        [GraphQLNonNullType]
        public string Pin { get; set; }

        [GraphQLNonNullType]
        public bool IsSelected { get; set; }

        [GraphQLDescription(@"Amount redeemed in cents")]
        [GraphQLNonNullType]
        public int AmountRedeemed { get; set; }

    }

    [Shareable]
    public class AddCreditCardInput
    {
        [GraphQLNonNullType]
        public FlowType FlowType { get; set; }

    }

    [Shareable]
    public class AddGiftCardInput
    {
        [GraphQLNonNullType]
        public string Number { get; set; }

        [GraphQLNonNullType]
        public string Pin { get; set; }

        [GraphQLDescription(@"determines if we link the card to account or not")]
        [GraphQLNonNullType]
        public bool Link { get; set; }

    }

    [Shareable]
    public class PaymentInput
    {
        [GraphQLNonNullType]
        public ICollection<Payment> Payments { get; set; }

        [GraphQLNonNullType]
        public string DeviceFingerprintId { get; set; }

        [GraphQLNonNullType]
        public string IdempotencyKey { get; set; }

    }

    [Shareable]
    public class Payment
    {
        [GraphQLDescription(@"Amount to pay in cents")]
        [GraphQLNonNullType]
        public int Amount { get; set; }

        [GraphQLNonNullType]
        public PaymentType Type { get; set; }

        public string? Id { get; set; }

        public string? Number { get; set; }

        public string? Pin { get; set; }

        public string? TokenData { get; set; }

    }

    [Shareable]
    public class ReviewProductUpdateInput
    {
        [GraphQLDescription(@"stock code")]
        [GraphQLNonNullType]
        public int ProductId { get; set; }

        [GraphQLDescription(@"Quantity")]
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }

    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeSubmissionInput
    {
        [GraphQLNonNullType]
        public string PlanId { get; set; }

        [GraphQLNonNullType]
        public ICollection<DeliveryUnlimitedSubscribeSubmissionInstrumentInput> Instruments { get; set; }

    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeSubmissionInstrumentInput
    {
        public int? Amount { get; set; }

        [GraphQLNonNullType]
        public string InstrumentId { get; set; }

        public string? InstrumentStepUpToken { get; set; }

    }

    [Shareable]
    public class EditOrderDriverInstructionsInput
    {
        [GraphQLNonNullType]
        public string OrderId { get; set; }

        [GraphQLNonNullType]
        public string Instructions { get; set; }

    }

    [Shareable]
    public class ToggleOrderLeaveUnattendedInput
    {
        [GraphQLNonNullType]
        public string OrderId { get; set; }

        [GraphQLNonNullType]
        public bool LeaveUnattendedEnabled { get; set; }

    }

    [Shareable]
    public class CallerState
    {
        [GraphQLDescription(@"Location Tracker UI states based on status")]
        public PickupLocationComponent? PickupLocationComponent { get; set; }

    }

    [Shareable]
    public class ProductReviewAlternativeInput
    {
        [GraphQLDescription(@"Product ID of the unavailable product for which we want to show alternatives")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }

    }

    [Shareable]
    public class ToggleRecipeSaveInput
    {
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLNonNullType]
        public bool Enabled { get; set; }

    }

    [GraphQLDescription(@"Input parameters of the Query.specialsHome")]
    [Shareable]
    public class SpecialsHomeInput
    {
        [GraphQLDescription(@"Represents the store id. *e.g. ""1550""*.")]
        public string? StoreId { get; set; }

        [GraphQLDescription(@"Represents the current shopping mode
selected by the shopper id.")]
        [GraphQLNonNullType]
        public ShoppingModeType Mode { get; set; }

        [GraphQLDescription(@"List of deeplink sections that the client supports. This ensures
that deeplinks coming out of this response works for the client")]
        [GraphQLNonNullType]
        public ICollection<string> SupportedLinks { get; set; }

        [GraphQLDescription(@"Product source for analytics")]
        public string? RequestSource { get; set; }

        [GraphQLDescription(@"SaleFinder catalogue store info passed in so it can be reflected back to the mobile apps
to achieve server-driven UI")]
        public SpecialsHomeSaleFinderStore? SpecialsHomeSaleFinderStore { get; set; }

        [GraphQLDescription(@"category type for retrieving category list")]
        public CategoriesType? CategoriesType { get; set; }

        [GraphQLDescription(@"Represents the consolidated specials flag.")]
        public bool? IsConsolidatedSpecials { get; set; }

    }

    [Shareable]
    public class SpecialsHomeSaleFinderStore
    {
        [GraphQLDescription(@"The SaleFinder storeId e.g., 4922 for Sydney Metcentre (different from Woolies storeId)")]
        [GraphQLNonNullType]
        public string Id { get; set; }

        [GraphQLDescription(@"e.g., Woolworths Sydney Metcentre")]
        public string? Name { get; set; }

        [GraphQLDescription(@"e.g., 2000")]
        public string? PostCode { get; set; }

    }

    [Shareable]
    public class CheckoutSubstitutionInput
    {
        [GraphQLDescription(@"stock code")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }

        [GraphQLDescription(@"Quantity")]
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }

        [GraphQLDescription(@"InstructionText, required otherwise upstread reset the value")]
        public string? Text { get; set; }

        [GraphQLDescription(@"text")]
        [GraphQLNonNullType]
        public bool AllowSubstitution { get; set; }

    }

    [Shareable]
    public class SetEditOrderStatusInput
    {
        [GraphQLNonNullType]
        public string OrderId { get; set; }

        [GraphQLNonNullType]
        public EditOrderMode Mode { get; set; }

    }

    [Shareable]
    public class Query
    {
        public ICollection<Address?>? GetAddresses { get; set; }
        public Address? GetAddressById { get; set; }
        public ICollection<AddressItem?>? SearchAddresses { get; set; }
        public ICollection<AddressItem?>? SearchSuburbs { get; set; }
        public ICollection<PickupStore?>? GetPickupStores { get; set; }
        [GraphQLDescription(@"DEPRECATED: Get ads by search term")]
        [GraphQLDeprecated(@"Use `productsBySearch.productsFeed` to get the ads associated to a search")]
        public ProductListAds? ProductsBySearchAds { get; set; }
        [GraphQLDescription(@"Serves the aem content page that follows generic page standard.")]
        [GraphQLNonNullType]
        public AEMContentPage AemContentPage { get; set; }
        public GetAlternativeProductsResponse? GetAlternativeProducts { get; set; }
        [GraphQLNonNullType]
        public ApigeeResponse Apigee { get; set; }
        [GraphQLNonNullType]
        public AppConfig Config { get; set; }
        [GraphQLDescription(@"Serves the article page content.")]
        [GraphQLNonNullType]
        public ArticlePage ArticlePage { get; set; }
        [GraphQLDescription(@"Serves the Branded shop content and products.")]
        [GraphQLNonNullType]
        public BrandedShopPage BrandedShop { get; set; }
        [GraphQLNonNullType]
        public IBundles Bundles { get; set; }
        [GraphQLDescription(@"Get Buy Again Reorder products from DAAS")]
        [GraphQLNonNullType]
        public BuyAgainProductList BuyAgainProductList { get; set; }
        [GraphQLNonNullType]
        public ChangeMyOrderSummary ChangeMyOrderSummary { get; set; }
        [GraphQLDescription(@"Checkout details page query")]
        public CheckoutContent? Checkout { get; set; }
        [GraphQLDescription(@"Checkout products page query")]
        public CheckoutContent? CheckoutProducts { get; set; }
        [GraphQLDescription(@"Checkout summary page query")]
        public CheckoutContent? CheckoutSummary { get; set; }
        [GraphQLDescription(@"Serves the content playbook")]
        public ContentPlaybookPage? ContentPlaybook { get; set; }
        [GraphQLDescription(@"Returns a valid deepLink based on the provided `id` (identifier). If no deepLink was found, `null` is returned.")]
        public string? DeepLink { get; set; }
        public DeliveryUnlimitedSubscribe? DeliveryUnlimitedSubscribe { get; set; }
        [GraphQLDescription(@" Deprecating: See deliveryUnlimitedPayment ")]
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribePayment DeliveryUnlimitedSubscribePayment { get; set; }
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribeConfirmation DeliveryUnlimitedSubscribeConfirmation { get; set; }
        [GraphQLDescription(@" Confirm subscription (payment) screen")]
        [GraphQLNonNullType]
        public DeliveryUnlimitedPayment DeliveryUnlimitedPayment { get; set; }
        [GraphQLDescription(@"Serves the Marketing Landing Page content")]
        public DynamicPage? DynamicPage { get; set; }
        [GraphQLDescription(@"Fetches content for a specific node based on provided input
@param nodeInput Required input parameters for fetching node content
@return Returns the node content which can be of type defined in NodeContent union")]
        public INodeContent? FetchNodeContent { get; set; }
        public IFoodTrackerPage? FoodTrackerPage { get; set; }
        public CheckoutFulfilmentWindows? FulfilmentWindows { get; set; }
        [GraphQLNonNullType]
        public GuidesPage GuidesPage { get; set; }
        [GraphQLDescription(@"Filter products by product group.")]
        public HomeList? Home { get; set; }
        [GraphQLNonNullType]
        public HomePage HomePage { get; set; }
        [GraphQLNonNullType]
        public LastChatbotMsg LastChatbotMsg { get; set; }
        [GraphQLNonNullType]
        public ICollection<List> Lists { get; set; }
        public List? List { get; set; }
        [GraphQLNonNullType]
        public ListDetailsResponse ListDetails { get; set; }
        [GraphQLDescription(@"Given a specific list of page names and return related page content")]
        [GraphQLNonNullType]
        public Marketplace Marketplace { get; set; }
        [GraphQLNonNullType]
        public MenuPage MenuPage { get; set; }
        [GraphQLDescription(@"Shopping modes screen. App provided storeId for in-store mode")]
        [GraphQLNonNullType]
        public IShoppingModeSelectorResponse ShoppingModeSelector { get; set; }
        [GraphQLNonNullType]
        public More More { get; set; }
        [GraphQLNonNullType]
        public AccountDetailsPage AccountDetails { get; set; }
        [GraphQLNonNullType]
        public ICollection<NCMessage> NotificationMessages { get; set; }
        public Preferences? Preferences { get; set; }
        public ProductDetails? ProductDetails { get; set; }
        [GraphQLNonNullType]
        public ProductDetailsPage ProductDetailsPage { get; set; }
        [GraphQLDescription(@"Filter products by product group.")]
        public ProductList? ProductsByProductGroup { get; set; }
        [GraphQLDescription(@"Filter products by aisle and category")]
        public ProductList? ProductsByCategory { get; set; }
        [GraphQLDescription(@"Filter products on special by aisle and category")]
        public ProductList? ProductsOnSpecialByCategory { get; set; }
        [GraphQLDescription(@"Filter products by specials group")]
        public ProductList? ProductsBySpecialsGroup { get; set; }
        [GraphQLDescription(@"Filter products by search term")]
        public ProductList? ProductsBySearch { get; set; }
        [GraphQLDescription(@"Get ProductCard by productIds")]
        public ProductsInList? ProductsByProductIds { get; set; }
        [GraphQLDescription(@"Get products for a recipe
n.b. This will replace the")]
        public ProductList? ProductsByRecipe { get; set; }
        [GraphQLDescription(@"Get boosted offers products, only those offers with product sku eg. TIGER offers
Optional rewards hashCrn via deeplink to check for mismatched cards")]
        public ProductList? ProductsByRewardsOffers { get; set; }
        [GraphQLDescription(@"Get product varieties by priceFamilyId")]
        public ProductList? ProductsByPriceFamily { get; set; }
        [GraphQLDescription(@"Get the list of HaveYouForgotten products that can appear before going to checkout.
The query does not always return a result.")]
        public ProductList? ProductsByHaveYouForgotten { get; set; }
        [GraphQLDescription(@"Get the product list based on searchType")]
        [GraphQLNonNullType]
        public ProductList ProductList { get; set; }
        [GraphQLDescription(@"Marketplace Query

Returns products for the requested facet-channel eg: marketplace Categories/Brands/Sellers")]
        public ProductList? ProductsByFacet { get; set; }
        [GraphQLNonNullType]
        public CategoryAndEventsPage CategoryAndEvents { get; set; }
        public ProductCategories? ProductCategories { get; set; }
        public SpecialCategories? SpecialCategories { get; set; }
        [GraphQLNonNullType]
        public ProductReviewResponse ProductReview { get; set; }
        [GraphQLNonNullType]
        public SubstitutionPreferenceResponse SubstitutionPreference { get; set; }
        [GraphQLDescription(@"Get list of pastshop events")]
        public PastshopList? PastshopEvent { get; set; }
        [GraphQLDescription(@"Get list of products for a Past Shop event")]
        public ProductList? PurchaseHistory { get; set; }
        [GraphQLDescription(@"Get list of purchase history events")]
        public PurchaseHistoryList? PurchaseHistoryEvent { get; set; }
        [GraphQLDescription(@"Get ratings and reviews details for a product")]
        public RatingsAndReviewsDetailsResponse? ProductRatingsAndReviewsDetails { get; set; }
        [GraphQLDescription(@"Product Ratings and reviews preview query")]
        public RatingsAndReviewsPreviewResponse? ProductRatingsAndReviewsPreview { get; set; }
        [GraphQLNonNullType]
        public WriteReviewFormResponse WriteReviewForm { get; set; }
        public ReceiptDetails? ReceiptDetails { get; set; }
        public ReceiptsList? Receipts { get; set; }
        [GraphQLNonNullType]
        public Shopper CurrentShopper { get; set; }
        [GraphQLDescription(@"Shopping modes screen")]
        [GraphQLNonNullType]
        public ShoppingModeVariant ShoppingMode { get; set; }
        [GraphQLDescription(@"Shopping modes screen")]
        [GraphQLNonNullType]
        public ShoppingModes ShoppingModes { get; set; }
        [GraphQLNonNullType]
        public WebLink MagicLink { get; set; }
        public StoreProductAvailabilityList? CheckNearbyStoresForProduct { get; set; }
        public StoreList? StoresByPostcode { get; set; }
        public StoreList? StoresByLocation { get; set; }
        public SuburbList? StoresBySuburb { get; set; }
        [GraphQLNonNullType]
        public StoreDetailCard StoreDetails { get; set; }
        public SubscriptionsInfo? Subscriptions { get; set; }
        [GraphQLDescription(@"Get list of suggested list")]
        public ProductList? SuggestedListItems { get; set; }
        [GraphQLDescription(@"Get list of suggested list")]
        public SuggestedLists? SuggestedLists { get; set; }
        [GraphQLDescription(@"Get the list of questions/survey for online checkout

Usage:
```graphql
checkoutSurvey {
  surveyId
  responseId
  commentText
  commentPrompt
  questions {
    id
    text
    type
  }
}

```")]
        public CheckoutSurvey? CheckoutSurvey { get; set; }
        [GraphQLDescription(@"Traffic drivers for search suggestions")]
        [GraphQLNonNullType]
        public TrafficDriver TrafficDrivers { get; set; }
        [GraphQLDescription(@"Serves the video page content.")]
        [GraphQLNonNullType]
        public VideoPage VideoPage { get; set; }
        public VoiceSearchResult? VoiceSearch { get; set; }
        [GraphQLDescription(@"Returns user wxid, and next fetch time")]
        [GraphQLNonNullType]
        public WXIDDetails WxidDetails { get; set; }
        [GraphQLDescription(@"Get cart details such as products, rewards points, rewards credits etc")]
        [GraphQLNonNullType]
        public CartResponse Cart { get; set; }
        public CartInfoResponse? CartInfo { get; set; }
        public CatalogueBrowse? CatalogueBrowse { get; set; }
        public CatalogueHome? CatalogueHome { get; set; }
        public CatalogueLanding? CatalogueLanding { get; set; }
        public CatalogueListing? CatalogueListing { get; set; }
        public CataloguePromotionDetails? CataloguePromotionDetails { get; set; }
        public CataloguePromotionListing? CataloguePromotionListing { get; set; }
        [GraphQLDeprecated(@"Moved to cart")]
        [GraphQLNonNullType]
        public HasHaveYouForgotten HasHaveYouForgotten { get; set; }
        [GraphQLDescription(@"Payment Instruments page query")]
        [GraphQLNonNullType]
        public IPaymentInstrumentsResponse PaymentInstruments { get; set; }
        [GraphQLDescription(@"Add Credit Card page query")]
        [GraphQLNonNullType]
        public AddCreditCardResponse AddCreditCard { get; set; }
        [GraphQLDescription(@"get data to link PayPal")]
        [GraphQLNonNullType]
        public LinkPayPalResponse LinkPayPal { get; set; }
        public FreshMagHome? FreshMagHome { get; set; }
        [GraphQLDescription(@"Get Terms and conditions for deleting account in shop app
Apple Store requirements to provide an option to
delete within apps required starting January 31
https://developer.apple.com/news/?id=mdkbobfo")]
        public DeleteAccountTnCResponse? DeleteAccountTnC { get; set; }
        public OrderConfirmationContent? OrderConfirmation { get; set; }
        [GraphQLNonNullType]
        public IOrderInvoice OrderInvoice { get; set; }
        [GraphQLNonNullType]
        public Orders Orders { get; set; }
        [GraphQLNonNullType]
        public OrderProductList OrderProductList { get; set; }
        [GraphQLNonNullType]
        public OrderSummary OrderSummary { get; set; }
        [GraphQLNonNullType]
        public ProductReviewAlternativeResponse ProductReviewAlternative { get; set; }
        public RecipeDetail? RecipeDetails { get; set; }
        public IngredientsSection? GetIngredients { get; set; }
        public Feed? RecipeHome { get; set; }
        public RecipeList? RecipeSearch { get; set; }
        [GraphQLDescription(@"@deprecated(reason: ""Use `productsByRecipe` instead"")
Accepts recipe id, searches Whisk products by ingredients, verifies resulting Whisk ProductIds against WX services and returns valid WX Products")]
        public ProductsInList? RecipeProducts { get; set; }
        public RecipeList? SavedRecipes { get; set; }
        [GraphQLDescription(@"Serves the Specials hub home content and products.")]
        public SpecialsHomePage? SpecialsHome { get; set; }
        [GraphQLNonNullType]
        public EditOrderStatus EditOrderStatus { get; set; }
    }

    [Shareable]
    public class Mutation
    {
        public Address? SaveAddress { get; set; }
        public bool? DeleteAddress { get; set; }
        [GraphQLNonNullType]
        public IBoostEdrOfferResponse BoostEdrOffer { get; set; }
        [GraphQLDescription(@"Allows to toggle DeliveryNow window ON and OFF")]
        [GraphQLNonNullType]
        public DeliveryNowModeMutationResponse DeliveryNowMode { get; set; }
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribeSubmissionResponse DeliveryUnlimitedSubscribeSubmission { get; set; }
        public FoodTrackerConsentStatus? UpdateFoodTrackerConsent { get; set; }
        public ClearFulfilmentWindowStateResultSuccess? ClearFulfilmentWindowState { get; set; }
        public SetFulfilmentWindowResultSuccess? SetFulfilmentWindow { get; set; }
        [GraphQLNonNullType]
        public List CreateList { get; set; }
        [GraphQLNonNullType]
        public EditListResponse EditList { get; set; }
        [GraphQLNonNullType]
        public string DeleteList { get; set; }
        [GraphQLNonNullType]
        public SyncListsResponse SyncLists { get; set; }
        [GraphQLNonNullType]
        public SyncListItemsResponse SyncListItems { get; set; }
        [GraphQLNonNullType]
        public MapGuestListToOwner MapGuestListToOwner { get; set; }
        [GraphQLDescription(@"Allows to select one of the shopping mode variants")]
        [GraphQLNonNullType]
        public ISetShoppingModeResponse SetShoppingMode { get; set; }
        [GraphQLNonNullType]
        public PickupCheckInResponse OrderCheckIn { get; set; }
        [GraphQLNonNullType]
        public PickupCheckInResponse OrderCheckInOnMyWay { get; set; }
        public PickupOrderLocationUpdateResponse? UpdatePickupOrderLocation { get; set; }
        public Preferences? UpdatePreference { get; set; }
        public BoostTagProductOffersResponse? BoostTagProductOffers { get; set; }
        [GraphQLNonNullType]
        public IProductReviewResult UpdateProductReviewProductQuantities { get; set; }
        [GraphQLNonNullType]
        public IUpdateSubstitutionPreferencesResponse UpdateSubstitutionPreferences { get; set; }
        [GraphQLDescription(@"Mutation to submit a product review. It takes a submitProductReviewInput object as input
and returns a SubmitProductReviewResponse object.")]
        [GraphQLNonNullType]
        public SubmitProductReviewResponse SubmitProductReview { get; set; }
        public DismissBottomSheetResultSuccess? DismissBottomSheet { get; set; }
        [GraphQLDescription(@"Allows to select one of the shopping mode variants

Usage:
```graphql
mutation($shoppingModeId: ShoppingModeId!) {

  selectShoppingMode(id: $shoppingModeId) {
    isSuccess
    shoppingModes: {
      ... on ShoppingMode {
        __typename
      }
    }
  }
}
```")]
        [GraphQLNonNullType]
        public ShoppingModeMutationResponse SelectShoppingMode { get; set; }
        [GraphQLDescription(@"Submit checkout survey

Usage:
```graphql
submitCheckoutSurvey(
  surveyId: ""checkout-v1"",
  responseId: ""abcd-1234"",
  questionId: ""checkout-v1-q1-nps"",
  orderNumber: ""1234"",
  response: ""10"",
  comment: ""looks great!"",
  device: {
    deviceModel: ""iPhone 12"",
    deviceVendor: ""Apple"",
    operatingSystem: ""IOS 14"",
    screenResolution: ""1920x150"",
    screenResolutionInCm: ""190x15"",
    usableScreenResolution: ""1920x150"",
    usableScreenResolutionInCm: ""190x15""
    phoneNetworkRetailer: ""vodafone"",
    mobileSignalStrength: ""4g"",
    storageSpaceAvailable: ""1GB"",
    appVersion: ""21.13"",
    locationData: ""100.00,200.00""
  }
)

```")]
        [GraphQLNonNullType]
        public bool SubmitCheckoutSurvey { get; set; }
        [GraphQLNonNullType]
        public CartResponse ClearCart { get; set; }
        [GraphQLDescription(@"Update the quantity of products that are in cart")]
        [GraphQLNonNullType]
        public CartProductQuantitiesUpdatedResponse UpdateCartProductQuantities { get; set; }
        [GraphQLNonNullType]
        public IdVerificationInitResponse InitiateIdVerification { get; set; }
        [GraphQLNonNullType]
        public IIdVerificationCompleteResponse CompleteIdVerification { get; set; }
        [GraphQLNonNullType]
        public ApplyCheckoutCreditResponse ApplyCheckoutCredit { get; set; }
        [GraphQLNonNullType]
        public RemoveCheckoutCreditResponse RemoveCheckoutCredit { get; set; }
        [GraphQLDescription(@"Save credit card to user account")]
        [GraphQLNonNullType]
        public LinkCreditCardResponse LinkCreditCard { get; set; }
        [GraphQLNonNullType]
        public AddGiftCardResponse AddGiftCard { get; set; }
        [GraphQLNonNullType]
        public IUnlinkCreditCardResponse UnlinkCreditCard { get; set; }
        [GraphQLNonNullType]
        public UnlinkGiftCardResponse UnlinkGiftCard { get; set; }
        [GraphQLNonNullType]
        public UnlinkPayPalResponse UnlinkPayPal { get; set; }
        [GraphQLDescription(@"Note: this mutation is non-functional")]
        [GraphQLNonNullType]
        public IWpayPaymentResponse Pay { get; set; }
        [GraphQLDescription(@"Apply promo code")]
        [GraphQLNonNullType]
        public ApplyCheckoutPromoCodeResponse ApplyCheckoutPromoCode { get; set; }
        [GraphQLDescription(@"Remove promo codes")]
        [GraphQLNonNullType]
        public RemoveCheckoutPromoCodeResponse RemoveCheckoutPromoCode { get; set; }
        [GraphQLDescription(@"Remove products  in review screen")]
        [GraphQLDeprecated(@"Feature replaced with product restrictions")]
        public CheckoutReviewProductContent? RemoveUnavailableProducts { get; set; }
        [GraphQLDescription(@"Update product quantity in review screen")]
        [GraphQLDeprecated(@"Feature replaced with product restrictions")]
        public CheckoutReviewProductContent? UpdateReviewProducts { get; set; }
        [GraphQLDescription(@"Redeem rewards dollars")]
        public CheckoutContent? PayWithRewardsDollar { get; set; }
        [GraphQLDescription(@"Get Terms and conditions for deleting account in shop app
Apple Store requirements to provide an option to
delete within apps required starting January 31
https://developer.apple.com/news/?id=mdkbobfo")]
        [GraphQLNonNullType]
        public DeleteAccountMutationResponse DeleteAccount { get; set; }
        [GraphQLNonNullType]
        public CancelOrderResponse CancelOrder { get; set; }
        [GraphQLNonNullType]
        public EditOrderDriverInstructionsResponse EditOrderDriverInstructions { get; set; }
        [GraphQLNonNullType]
        public ToggleOrderLeaveUnattendedResponse ToggleOrderLeaveUnattended { get; set; }
        [GraphQLDescription(@"Submit driver Rating survey

Usage:
```graphql
submitDriverRatingSurvey(
  surveyId: ""driver-rating-v1"",
  orderNumber: ""123"",
  starRating: ""1"",
  comment: ""The packaging was damaged upon arrival"",
  selectedChips: [""instructions-not-followed"", ""late-delivery""],
)

```")]
        [GraphQLNonNullType]
        public bool SubmitDriverRatingSurvey { get; set; }
        public RecipeSaveInfo? ToggleRecipeSave { get; set; }
        [GraphQLDescription(@"Update the collection mode")]
        public CheckoutContent? UpdateCollectionMode { get; set; }
        [GraphQLDescription(@"Update the delivery preference: selfIsolation toggle")]
        public CheckoutContent? UpdatePreferenceSelfIsolation { get; set; }
        [GraphQLDescription(@"Update the delivery preference: leaveUnattended toggle")]
        public CheckoutContent? UpdatePreferenceLeaveUnattended { get; set; }
        [GraphQLDescription(@"Update the delivery preference: delivery instruction toggle")]
        public CheckoutContent? UpdatePreferenceInstruction { get; set; }
        [GraphQLDescription(@"Update nominated recipient name")]
        public CheckoutContent? UpdateNominatedRecipient { get; set; }
        [GraphQLDescription(@"Update the fulfilment window selection")]
        public CheckoutContent? UpdateFulfilmentWindow { get; set; }
        [GraphQLDescription(@"Update packaging preferences")]
        public CheckoutContent? UpdatePackagingPreferences { get; set; }
        [GraphQLDescription(@"Update Campaign OptIn")]
        public CheckoutContent? UpdateCampaignOptIn { get; set; }
        [GraphQLDescription(@"Update product instruction")]
        public CheckoutContent? UpdateProductInstruction { get; set; }
        [GraphQLDescription(@"Remove product")]
        public CheckoutContent? RemoveProduct { get; set; }
        public CheckoutContent? UpdateSubstitutions { get; set; }
        [GraphQLDescription(@"Add promotion code
Returns checkout summary page")]
        [GraphQLDeprecated(@"Deprecated. Use new applyCheckoutPromoCode mutation.")]
        public CheckoutContent? AddPromotionCode { get; set; }
        [GraphQLDescription(@"Remove promotion code
removes all promotion codes applied
Returns checkout summary page")]
        public CheckoutContent? RemovePromotionCode { get; set; }
        [GraphQLDescription(@"Add promotion code
Returns products review page")]
        [GraphQLDeprecated(@"Deprecated since version 23.11. Use new addPromotionCode mutation.")]
        public CheckoutContent? AddPromoCode { get; set; }
        [GraphQLDescription(@"Remove promotion code
Returns products review page")]
        [GraphQLDeprecated(@"Deprecated since version 23.11. Use new addPromotionCode mutation. ")]
        public CheckoutContent? RemovePromoCode { get; set; }
        [GraphQLNonNullType]
        public SetEditOrderStatusResponse SetEditOrderStatus { get; set; }
    }

    [Shareable]
    public class AddressItem
    {
        public string? Id { get; set; }
        public string? Text { get; set; }
        public string? Postcode { get; set; }
    }

    [Shareable]
    public class PickupStore
    {
        public int? StoreNumber { get; set; }
        public string? Description { get; set; }
        public string? AddressText { get; set; }
        public string? Area { get; set; }
        public decimal? Distance { get; set; }
        public ICollection<PickUpType?>? PickUpType { get; set; }
        public ICollection<string?>? SupportedCollectionTypes { get; set; }
    }

    [Shareable]
    public class PickUpType
    {
        public int? AddressId { get; set; }
        public string? ShoppingModeId { get; set; }
        public string? Type { get; set; }
        public string? Label { get; set; }
        public string? Text { get; set; }
    }

    [GraphQLDescription(@"Ad banner that comes from Google Ad Manager (GAM)")]
    [Shareable]
    public class GoogleAdBannerCard : IHomeFeed, IProductListFeed, IProductListItemAdBanner, IUniversalInventory, IOrderConfirmationContentSegment, IRecipeListFeed
    {
        [GraphQLDescription(@"Ad Unit used to define which level of app should this ad be displayed.")]
        [GraphQLNonNullType]
        public string AdUnit { get; set; }
        [GraphQLDescription(@"The GAM's Native Template ID of the ad.")]
        [GraphQLNonNullType]
        public string NativeCustomTemplateId { get; set; }
        [GraphQLDescription(@"The size of the banner.")]
        [GraphQLNonNullType]
        public AdBannerNativeSize Height { get; set; }
        [GraphQLDescription(@"A flag to indicate if the banner size is per IAB Specification")]
        [GraphQLNonNullType]
        public bool IabSpec { get; set; }
        [GraphQLDescription(@"The size of the banner per IAB Spec.")]
        public string? IabSize { get; set; }
        [GraphQLDescription(@"A scalar object to be used with google sdk as Hashmap/Dictionary
for targeting purposes. Props of this object will not be
accessed in app.")]
        public object? Targeting { get; set; }
        [GraphQLDescription(@"Correlator value which enables GAM to know that multiple ads
are requested from same screen")]
        public string? Correlator { get; set; }
        [GraphQLDescription(@"Common BFF custom flag to allow independent chain resolvers.
Having item with _excluded:true, means it should not be used in FE")]
        public bool? Excluded { get; set; }
        [GraphQLDescription(@"DEPRECATED: An object to be used with tealium to pass analytics data

ShopApp version indicates when to do complete removal
* 21.10 (Android only)
  * analytics
    * adobePe - moved to a new independent type JIRA TAN-75
    * adobeTnta - moved to a new independent type JIRA TAN-75")]
        [GraphQLDeprecated(@"Use `ProductList.analytics` of type `AdobeTargetAnalytics` to get adobe analytics associated to this AdBanner")]
        public AdTealiumAnalytics? Analytics { get; set; }
    }

    [GraphQLDescription(@"Google Ad forecasting that will connect to Google Ad Manager (GAM) to send analytics")]
    [Shareable]
    public class GoogleAdForecastingAnalytics : IHomeListAnalytics, IProductListAnalytics
    {
        [GraphQLDescription(@"Ad Unit used to define which level of app should this ad be displayed.")]
        [GraphQLDeprecated(@"GoogleAdForecastingAnalytics have been completely removed.")]
        [GraphQLNonNullType]
        public string AdUnit { get; set; }
        [GraphQLDescription(@"The GAM's Native Template ID of the ad.")]
        [GraphQLDeprecated(@"GoogleAdForecastingAnalytics have been completely removed.")]
        [GraphQLNonNullType]
        public string NativeCustomTemplateId { get; set; }
        [GraphQLDescription(@"A scalar object to be used with google sdk as Hashmap/Dictionary
for targeting purposes. Props of this object will not be
accessed in app.")]
        [GraphQLDeprecated(@"GoogleAdForecastingAnalytics have been completely removed.")]
        public object? Targeting { get; set; }
        [GraphQLDescription(@"Common BFF custom flag to allow independent chain resolvers.
Having item with _excluded:true, means it should not be used in FE")]
        [GraphQLDeprecated(@"GoogleAdForecastingAnalytics have been completely removed.")]
        public bool? Excluded { get; set; }
    }

    [GraphQLDescription(@"Ad banner that comes from Adobe Experience Manager (AEM)")]
    [Shareable]
    public class AdobeAdBannerCard : IProductListFeed
    {
        [GraphQLDescription(@"The type of content that the card targets on action. This should be used to determine the target screen.")]
        public string? PromotionType { get; set; }
        [GraphQLDescription(@"The parameters used for graphql queries.")]
        public QueryParameters? QueryParameters { get; set; }
        [GraphQLDescription(@"A full URL to the promotional image asset.")]
        [GraphQLNonNullType]
        public string Image { get; set; }
        [GraphQLDescription(@"Accessibility alternate text for image.")]
        [GraphQLNonNullType]
        public string AltText { get; set; }
        [GraphQLDescription(@"A description of the image content for accessibility and fallback when an image fails to load.")]
        public string? Title { get; set; }
        [GraphQLDescription(@"The size of the banner.
e.g. SMALL, MEDIUM, LARGE")]
        [GraphQLNonNullType]
        public AdBannerNativeSize Height { get; set; }
        [GraphQLDescription(@"Tracking ID used to track performance of ad banner. This is same value of stitch-id.")]
        public string? TrackingId { get; set; }
    }

    [GraphQLDescription(@"DEPRECATED: Holds AEM/Google Ads analytics data

ShopApp version indicates when to do complete removal
* 21.10 (Android only)
  * AdTealiumAnalytics - moved to a new independent type JIRA TAN-75")]
    [Shareable]
    public class AdTealiumAnalytics
    {
        [GraphQLDescription(@"DEPRECATED: One of Adobe Target Activity's analytics data to be passed to tealium to enable Adobe Target Analytics")]
        [GraphQLDeprecated(@"Use `ProductList.analytics` of type `AdobeTargetAnalytics` to get adobe analytics associated to this content")]
        public string? AdobeTnta { get; set; }
        [GraphQLDescription(@"DEPRECATED: One of Adobe Target Activity's analytics data to be passed to tealium to enable Adobe Target Analytics")]
        [GraphQLDeprecated(@"Use `ProductList.analytics` of type `AdobeTargetAnalytics` to get adobe analytics associated to this content")]
        public string? AdobePe { get; set; }
    }

    [GraphQLDescription(@"Holds Adobe Target Delivery API analytics data")]
    [Shareable]
    public class AdobeTargetAnalytics : IHomeListAnalytics, IProductListAnalytics
    {
        [GraphQLDescription(@"One of Adobe Target Activity's analytics data to be passed to tealium to enable Adobe Target Analytics")]
        public string? Tnta { get; set; }
        [GraphQLDescription(@"One of Adobe Target Activity's analytics data to be passed to tealium to enable Adobe Target Analytics")]
        public string? Pe { get; set; }
        [GraphQLDescription(@"Common BFF custom flag to allow independent chain resolvers.
Having item with _excluded:true, means it should not be used in FE")]
        public bool? Excluded { get; set; }
    }

    [GraphQLDescription(@"DEPRECATED: Being used in productsBySearchAds query.
All ads related objects that may be required in a screen")]
    [Shareable]
    public class ProductListAds
    {
        [GraphQLDescription(@"List of banners on top section of the screen")]
        [GraphQLDeprecated(@"Use `productsBySearch.productsFeed` to get the ads associated to a search")]
        public ICollection<IProductListItemAdBanner?>? TopBanners { get; set; }
    }

    [GraphQLDescription(@"Container to hold one or more possible banners.
This is to enable fallback to other banners (in future releases) if one is not available.")]
    [Shareable]
    public class UniversalInventoryContainer : IProductListFeed, IUniversalInventory, IOrderConfirmationContentSegment, IRecipeListFeed, IGenericPageFeedItem
    {
        [GraphQLDescription(@"Paid Banner which is the higher priority to display")]
        public GoogleAdBannerCard? GoogleAdBannerCard { get; set; }
        [GraphQLDescription(@"Fallback content (usually In-House Banner) when there 
is no available paid banner from GAM")]
        public IUniversalInventoryNextBestAction? NextBestAction { get; set; }
    }

    [GraphQLDescription(@"Success boosted offer response")]
    [Shareable]
    public class EdrOffer : IBoostEdrOfferResponse
    {
        [GraphQLNonNullType]
        public string OfferId { get; set; }
        public string? OfferType { get; set; }
        [GraphQLNonNullType]
        public string LinkedEdrHashCrn { get; set; }
        public RtlBoostState? OfferBoostState { get; set; }
        public RtlOfferStatus? OfferStatus { get; set; }
        public ActionData? OfferButtonAction { get; set; }
        public TextWithAlt? OfferButtonLabel { get; set; }
    }

    [GraphQLName("BoostEdrOfferResponse")]
    public interface IBoostEdrOfferResponse
    {
    }

    [GraphQLDescription(@"Represents the AEM content page, which can be any page that follows the AEM generic page standard")]
    [Shareable]
    public class AEMContentPage : IGenericPage
    {
        [GraphQLDescription(@"Inherited from GenericPage.
List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. openBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class AEMContentPageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"Inherited from GenericPage.
Represents text to display on top bar")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"implement from generic type, represents hero image url
optional field, usually only one hero image in a page")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [Shareable]
    public class GetAlternativeProductsResponse
    {
        [GraphQLDescription(@"Sections of the alternative products.")]
        [GraphQLNonNullType]
        public ICollection<IAlternativeProductsSections> Sections { get; set; }
        [GraphQLDescription(@"Represents the disclaimer text")]
        public AlternativeProductsDisclaimer? Disclaimer { get; set; }
    }

    [GraphQLName("AlternativeProductsSections")]
    public interface IAlternativeProductsSections
    {
    }

    [Shareable]
    public class AlternativeProductsTargetProductSection : IAlternativeProductsSections
    {
        [GraphQLDescription(@"Represents the target product which is to be replaced.")]
        [GraphQLNonNullType]
        public ProductCard Product { get; set; }
        [GraphQLDescription(@"Represents the purpose of this section which is used for screen readers.")]
        [GraphQLNonNullType]
        public string AltText { get; set; }
    }

    [Shareable]
    public class AlternativeProductsInsetBannerSection : IAlternativeProductsSections
    {
        [GraphQLDescription(@"Represents the inset banner.")]
        public InsetBanner? InsetBanner { get; set; }
    }

    [GraphQLDescription(@"DEPRECATED: in favour of AlternativeProductsProductsHeader in AlternativeProductsProductSection
Duplicate data will be returned if both are queried

Represents a section detailing alternative product counts.")]
    [Shareable]
    public class AlternativeProductsProductCountSection : IAlternativeProductsSections
    {
        [GraphQLDescription(@"Represents the number of products text
e.g. 2 Products")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"Represents the disclaimer text")]
        public AlternativeProductsDisclaimer? Disclaimer { get; set; }
    }

    [Shareable]
    public class AlternativeProductsDisclaimer
    {
        [GraphQLDescription(@"Represents the title text")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Represents the subtitle text")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"Represents the dismiss CTA text")]
        [GraphQLNonNullType]
        public string DismissCtaText { get; set; }
    }

    [Shareable]
    public class AlternativeProductsTypeTag
    {
        [GraphQLNonNullType]
        public AlternativeProductsType SwapType { get; set; }
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [Shareable]
    public class AlternativeProductsProductsHeader
    {
        [GraphQLDescription(@"Optional Title
example: ""2 products"", ""More in this category""")]
        public string? Title { get; set; }
        [GraphQLDescription(@"Represents the disclaimer text")]
        public AlternativeProductsDisclaimer? Disclaimer { get; set; }
        [GraphQLDescription(@"Optional Tag for Type")]
        public AlternativeProductsTypeTag? TypeTag { get; set; }
    }

    [Shareable]
    public class AlternativeProductsProductSection : IAlternativeProductsSections
    {
        [GraphQLDescription(@"Represents the upstream API where the products were sourced.
Used for analytics.
Either ""category suggested product"", ""substitute suggested product""")]
        [GraphQLNonNullType]
        public string SubstitutionSource { get; set; }
        [GraphQLDescription(@"Represents the list of products.")]
        [GraphQLNonNullType]
        public ICollection<ProductCard> Products { get; set; }
        [GraphQLDescription(@"Header of the product section")]
        public AlternativeProductsProductsHeader? SectionHeader { get; set; }
    }

    [Shareable]
    public class AlternativeProductsNoResultSection : IAlternativeProductsSections
    {
        [GraphQLDescription(@"No results text")]
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [Shareable]
    public class AlternativeProductsCtaSection : IAlternativeProductsSections
    {
        [GraphQLDescription(@"Represents the CTA text.
e.g. ""See all""")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"Defines the action to be taken when the CTA is clicked.
e.g. ""search-by-category""")]
        [GraphQLNonNullType]
        public string Action { get; set; }
        [GraphQLDescription(@"Represents the search term text to be used in next screen when the CTA is clicked.")]
        public string? ActionTerm { get; set; }
    }

    [Shareable]
    public class ApigeeResponse
    {
        [GraphQLNonNullType]
        public ICollection<ApigeeHash?> Headers { get; set; }
        [GraphQLNonNullType]
        public ICollection<ApigeeHash?> EnvironmentVariables { get; set; }
    }

    [Shareable]
    public class ApigeeHash
    {
        [GraphQLNonNullType]
        public string Name { get; set; }
        public string? Value { get; set; }
    }

    [GraphQLName("AppConfigAlert")]
    public interface IAppConfigAlert
    {
    }

    [Shareable]
    public class AppConfig
    {
        [GraphQLNonNullType]
        public UpgradeType UpgradeType { get; set; }
        public bool? IsForcedUpgrade { get; set; }
        public string? IndicativeUpgradeDate { get; set; }
        public IAppConfigAlert? Alert { get; set; }
    }

    [Shareable]
    public class AppConfigSoftAlert : IAppConfigAlert
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public string PrimaryActionLabel { get; set; }
        [GraphQLNonNullType]
        public string SecondaryActionLabel { get; set; }
    }

    [Shareable]
    public class AppConfigForcedAlert : IAppConfigAlert
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public string PrimaryActionLabel { get; set; }
        public string? RewardsCardActionLabel { get; set; }
    }

    [GraphQLDescription(@"Represents the AEM article page")]
    [Shareable]
    public class ArticlePage : IGenericPage
    {
        [GraphQLDescription(@"Inherited from GenericPage.
List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. openBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class ArticlePageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"Inherited from GenericPage.
Represents text to display on top bar")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"implement from generic type, represents hero image url
optional field, usually only one hero image in a page")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [GraphQLDescription(@"Represents the branded shop page")]
    [Shareable]
    public class BrandedShopPage : IGenericPage
    {
        [GraphQLDescription(@"Inherited from GenericPage.
List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. opemBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class BrandedShopPageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"Inherited from GenericPage.
Represents text to display on top bar")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"implement from generic type, represents hero image url
optional field, usually only one hero image in a page")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [GraphQLName("Bundles")]
    public interface IBundles
    {
    }

    [Shareable]
    public class BundlesLandingPage : IBundles
    {
        [GraphQLDescription(@"To be displayed on top/above the scrollable area.")]
        [GraphQLNonNullType]
        public BundlesHeader Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public ICollection<IBundlesFeedItem?> Items { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
    }

    [Shareable]
    public class BundlesLandingErrorPage : IBundles
    {
        [GraphQLDescription(@"Optional image")]
        public string? Image { get; set; }
        [GraphQLDescription(@"Optional title")]
        public string? Title { get; set; }
        [GraphQLDescription(@"Optional description")]
        public string? Description { get; set; }
        [GraphQLDescription(@"e.g. ""Try again""")]
        public Link? Cta { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
    }

    [Shareable]
    public class BundlesHeader
    {
        [GraphQLDescription(@"Optional list of sort options (No options = no Sort chip)")]
        public BundleSortOptions? SortOptions { get; set; }
        [GraphQLDescription(@"Chips like ""Member price""")]
        public ICollection<Chip>? Chips { get; set; }
        [GraphQLDescription(@"To show ""X bundles""")]
        [GraphQLNonNullType]
        public string TotalBundles { get; set; }
    }

    [Shareable]
    public class BundleSortOptions
    {
        [GraphQLDescription(@"e.g. ""Sort by""")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"The sorting options")]
        [GraphQLNonNullType]
        public ICollection<BundleSortOption> Options { get; set; }
    }

    [Shareable]
    public class BundleSortOption
    {
        [GraphQLDescription(@"Identifier used by BFF to associate sort option with algorithm")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLDescription(@"Core UI Component for a Radio Row
Only the default option will be selected, front-end to handle user selection")]
        [GraphQLNonNullType]
        public CoreRadioRowUI CoreRadioRowUI { get; set; }
    }

    [Shareable]
    public class BundleQuantityStepper : IBundleCTA
    {
        [GraphQLDescription(@"Minimum amount that can be added to cart.")]
        [GraphQLNonNullType]
        public int Minimum { get; set; }
        [GraphQLDescription(@"Maximum amount that can be added to cart.")]
        [GraphQLNonNullType]
        public int Maximum { get; set; }
        [GraphQLDescription(@"Increment for adding bundle to cart.")]
        [GraphQLNonNullType]
        public int Increment { get; set; }
        [GraphQLDescription(@"Represents how many bundles are currently in users cart.")]
        [GraphQLNonNullType]
        public int InCart { get; set; }
        [GraphQLDescription(@"Button label to show when no bundles in cart")]
        [GraphQLNonNullType]
        public string AddToCartLabel { get; set; }
        [GraphQLDescription(@"Label to show when inCart reaches maximum (e.g. ""Bundle limit reached"")")]
        public string? MaximumReachedLabel { get; set; }
    }

    [GraphQLName("BundleCTA")]
    public interface IBundleCTA
    {
    }

    [GraphQLName("BundlesFeedItem")]
    public interface IBundlesFeedItem
    {
    }

    [Shareable]
    public class Bundle : IBundlesFeedItem
    {
        [GraphQLDescription(@"All bundle details elements above the horizontal list")]
        [GraphQLNonNullType]
        public BundleDetails BundleDetails { get; set; }
        [GraphQLDescription(@"Horizontal List of Cards in the bundle")]
        [GraphQLNonNullType]
        public ICollection<IBundleItem> BundleItems { get; set; }
        [GraphQLDescription(@"CTA (e.g. ""Add bundle to cart"")")]
        [GraphQLNonNullType]
        public IBundleCTA BundleCta { get; set; }
        [GraphQLDescription(@"Dynamic Analytics fields to be used for all component and sub-component events:
* eventCategory - bundle_products
* eventDescription - <bundle name>")]
        public Analytics? BundleAnalytics { get; set; }
        [GraphQLDescription(@"Analytics fields to be used for impression events:
* tealiumEvent - show_bundle_products
* eventAction - show
* eventLabel - <bundle type, etc>")]
        public Analytics? BundleImpressionAnalytics { get; set; }
        [GraphQLDescription(@"Message (Warning / Restriction) to customer about the product bundle e.g. ""Afternoon delivery & pick up""")]
        public string? FooterText { get; set; }
    }

    [Shareable]
    public class BundleTitleTag
    {
        [GraphQLDescription(@"e.g. ""Online Only"" or ""Online and In-store""")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"Mandatory foreground (text) colour")]
        [GraphQLNonNullType]
        public CompatibleColor TextColor { get; set; }
    }

    [GraphQLName("BundlePricing")]
    public interface IBundlePricing
    {
    }

    [Shareable]
    public class BundleDetails
    {
        [GraphQLDescription(@"Online / In-store tag")]
        public BundleTitleTag? TitleTag { get; set; }
        [GraphQLDescription(@"Bundle name (e.g. ""Old El Paso Taco Night, Hard ..."")")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Optional description of the bundle (e.g. ""Add all N products ..."")")]
        public string? Description { get; set; }
        [GraphQLDescription(@"Pricing section")]
        [GraphQLNonNullType]
        public IBundlePricing Pricing { get; set; }
    }

    [Shareable]
    public class BundleStandardPricing : IBundlePricing
    {
        [GraphQLDescription(@"e.g. ""SAVE $2.00""")]
        public CoreTagUI? Tag { get; set; }
        [GraphQLDescription(@"e.g. ""N products for""")]
        [GraphQLNonNullType]
        public string Prefix { get; set; }
        [GraphQLDescription(@"e.g. ""$17.00""")]
        [GraphQLNonNullType]
        public string Price { get; set; }
    }

    [Shareable]
    public class BundleComparisonPrice
    {
        [GraphQLDescription(@"Optional icon to show before the title")]
        public IIconAsset? LeadingAsset { get; set; }
        [GraphQLDescription(@"e.g. ""MEMBER PRICE"" or ""NON-MEMBER PRICE""")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"e.g. ""$17.95""")]
        [GraphQLNonNullType]
        public string Price { get; set; }
    }

    [Shareable]
    public class BundleComparisonPricing : IBundlePricing
    {
        [GraphQLDescription(@"Member pricing logo for top right corner")]
        public string? Logo { get; set; }
        [GraphQLDescription(@"e.g. Member pricing")]
        public BundleComparisonPrice? PromotionPrice { get; set; }
        [GraphQLDescription(@"e.g. Non-Member pricing")]
        public BundleComparisonPrice? StandardPrice { get; set; }
    }

    [Shareable]
    public class BundleProductCard : IBundleItem
    {
        [GraphQLDescription(@"The visible Product Card on top of the stack")]
        [GraphQLNonNullType]
        public ProductCard ProductCard { get; set; }
        [GraphQLDescription(@"Optional field to display the quantity (e.g. Qty 2)")]
        public string? Quantity { get; set; }
    }

    [GraphQLDescription(@"One visible Product Card on top of a stack or Product Cards")]
    [Shareable]
    public class StackedProductCards : IBundleItem
    {
        [GraphQLDescription(@"The visible Product Card on top of the stack")]
        [GraphQLNonNullType]
        public ProductCard ProductCard { get; set; }
        [GraphQLDescription(@"e.g. ""Mains"" or ""Sides""")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
    }

    [GraphQLName("BundleItem")]
    public interface IBundleItem
    {
    }

    [GraphQLDescription(@"Get Buy Again Reorder products from DAAS")]
    [Shareable]
    public class BuyAgainProductList
    {
        [GraphQLDescription(@"Represents buy again header")]
        [GraphQLNonNullType]
        public BuyAgainHeader Header { get; set; }
        [GraphQLDescription(@"Represents buy again footer")]
        [GraphQLNonNullType]
        public BuyAgainFooter Footer { get; set; }
        [GraphQLDescription(@"Represents buy again product list")]
        [GraphQLNonNullType]
        public ProductList BuyAgainProducts { get; set; }
        [GraphQLDescription(@"Additional status information related to the filters")]
        public BuyAgainFilterStatus? FilterStatus { get; set; }
    }

    [GraphQLDescription(@"Represents the Buy Again Product list header")]
    [Shareable]
    public class BuyAgainHeader
    {
        [GraphQLDescription(@"Represents total product count in text")]
        [GraphQLNonNullType]
        public string TotalProductsText { get; set; }
    }

    [GraphQLDescription(@"Represents the Buy Again Product list footer")]
    [Shareable]
    public class BuyAgainFooter
    {
        [GraphQLDescription(@"Represents Save to list button info for Buy Again Product list")]
        public Button? SaveToListBtn { get; set; }
        [GraphQLDescription(@"Represents Add to cart button info for Buy Again Product list only for online mode")]
        public Button? AddToCartBtn { get; set; }
    }

    [GraphQLDescription(@"Used by Buy Again filter failed to return matching products")]
    [Shareable]
    public class BuyAgainFilterStatus
    {
        [GraphQLDescription(@"Feedback for the filters. For now this is only used when a filter was reverted.")]
        public string? Message { get; set; }
        [GraphQLDescription(@"Id of filter chips that were reverted.")]
        [GraphQLNonNullType]
        public ICollection<string> RevertedFilterChipIds { get; set; }
    }

    [Shareable]
    public class ChangeMyOrderSummary
    {
        public BasicCoreBroadcastBanner? Banner { get; set; }
        [GraphQLNonNullType]
        public ChangeMyOrderDetailsSection OrderDetailsSection { get; set; }
        [GraphQLNonNullType]
        public PaymentSummarySection PaymentSummarySection { get; set; }
        [GraphQLNonNullType]
        public FooterCTASection FooterCTASection { get; set; }
    }

    [Shareable]
    public class ChangeMyOrderDetailsSection
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<IChangeMyOrderDetailsSectionItems> Items { get; set; }
    }

    [Shareable]
    public class FulfilmentMethod : IChangeMyOrderDetailsSectionItems
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
    }

    [Shareable]
    public class ChangeMyOrderDeliveryInstructions : IChangeMyOrderDetailsSectionItems
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
    }

    [Shareable]
    public class FulfilmentTimeSlot : IChangeMyOrderDetailsSectionItems
    {
        [GraphQLNonNullType]
        public TextWithAlt FulfilmentTimeSlotTitle { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
    }

    [Shareable]
    public class ActionTile
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
    }

    [Shareable]
    public class CartActions : IChangeMyOrderDetailsSectionItems
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public int NumberOfItems { get; set; }
        [GraphQLNonNullType]
        public ICollection<ActionTile> ActionTiles { get; set; }
    }

    [GraphQLName("ChangeMyOrderDetailsSectionItems")]
    public interface IChangeMyOrderDetailsSectionItems
    {
    }

    [Shareable]
    public class PaymentSummarySection
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string PreviousTotalTitle { get; set; }
        [GraphQLNonNullType]
        public string PreviousTotalValue { get; set; }
        [GraphQLNonNullType]
        public string ChangedOrderTotalTitle { get; set; }
        [GraphQLNonNullType]
        public string ChangedOrderTotalValue { get; set; }
        [GraphQLNonNullType]
        public string BalancePaymentTitle { get; set; }
        [GraphQLNonNullType]
        public string BalancePaymentSubtitle { get; set; }
        [GraphQLNonNullType]
        public string BalancePaymentValue { get; set; }
    }

    [Shareable]
    public class FooterCTASection
    {
        [GraphQLNonNullType]
        public Button CancelButton { get; set; }
        [GraphQLNonNullType]
        public Button CheckoutButton { get; set; }
    }

    [GraphQLName("CheckoutSegmentContent")]
    public interface ICheckoutSegmentContent
    {
    }

    [GraphQLName("CheckoutSegmentMessage")]
    public interface ICheckoutSegmentMessage
    {
    }

    [Shareable]
    public class CheckoutContent : IUpdateSubstitutionPreferencesResponse
    {
        public ICollection<CheckoutProductInfo>? ProductsInfo { get; set; }
        [GraphQLDeprecated(@"Always returns empty array")]
        [GraphQLNonNullType]
        public ICollection<ICheckoutSegmentError> Errors { get; set; }
        public ICheckoutSegmentMessage? Message { get; set; }
        [GraphQLNonNullType]
        public ICollection<LegacyError> LegacyErrors { get; set; }
        [GraphQLNonNullType]
        public ICollection<CheckoutSegmentProgress> Progress { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICheckoutSegmentContent> Content { get; set; }
        [GraphQLNonNullType]
        public CheckoutOrderTotalDetails OrderTotalDetails { get; set; }
        public IdVerificationBottomSheet? IdVerificationBottomSheet { get; set; }
        [GraphQLNonNullType]
        public ICollection<Analytics> ImpressionAnalytics { get; set; }
    }

    [GraphQLDescription(@"Represents the content playbook page")]
    [Shareable]
    public class ContentPlaybookPage : IGenericPage
    {
        [GraphQLDescription(@"Inherited from GenericPage.
List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. opemBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class ContentPlaybookPageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"Inherited from GenericPage.
Represents text to display on top bar")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"implement from generic type, represents hero image url
optional field, usually only one hero image in a page")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [GraphQLDescription(@"DeliveryNow info in homepage")]
    [Shareable]
    public class HomeListDeliveryNow
    {
        [GraphQLNonNullType]
        public string Status { get; set; }
        public int? ExpressDeliveryStoreId { get; set; }
    }

    [GraphQLDescription(@"DeliveryNow Promotion Banner / Button on homepage")]
    [Shareable]
    public class HomeDeliveryNowBanner : IHomeDeliveryNowBannerUnion
    {
        public bool? _ { get; set; }
    }

    [GraphQLDescription(@"Allows to toggle DeliveryNow window ON and OFF")]
    [Shareable]
    public class DeliveryNowWindow
    {
        public int? Id { get; set; }
        [GraphQLNonNullType]
        public DeliveryWindowStatus Status { get; set; }
        [GraphQLNonNullType]
        public DeliveryNowStatus DeliveryNowStatus { get; set; }
        [GraphQLNonNullType]
        public bool IsEligible { get; set; }
        [GraphQLNonNullType]
        public bool IsAvailable { get; set; }
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        public decimal? DeliveryFee { get; set; }
        public string? Eta { get; set; }
        public int? EtaInMinutes { get; set; }
        [GraphQLNonNullType]
        public DeliveryNowTitle Title { get; set; }
        public string? Subtitle { get; set; }
    }

    [GraphQLDescription(@"Mutation reponse with optional mutated DeliveryNow window payload")]
    [Shareable]
    public class DeliveryNowModeMutationResponse
    {
        [GraphQLNonNullType]
        public bool IsSuccess { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeFooter
    {
        [GraphQLNonNullType]
        public Button Button { get; set; }
        [GraphQLNonNullType]
        public string Disclaimer { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribe
    {
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribeSummary Summary { get; set; }
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribePlans Plans { get; set; }
    }

    [Shareable]
    public class DynamicPage
    {
        [GraphQLNonNullType]
        public DynamicPageHeaderSection HeaderSection { get; set; }
        [GraphQLNonNullType]
        public ICollection<IDynamicPageFeedItem?> FeedItems { get; set; }
        public DynamicPageFooterSection? FooterSection { get; set; }
        public ICollection<IDynamicPageBottomSheetTypes?>? BottomSheets { get; set; }
        [GraphQLNonNullType]
        public Analytics Analytics { get; set; }
    }

    [GraphQLDescription(@"If there is no image URL provided, then we just use the title
directly in the top nav bar, with no fancy scroll behaviour (see option 1 below)")]
    [Shareable]
    public class DynamicPageHeaderSection
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? ImageUrl { get; set; }
        public string? ImageAltText { get; set; }
        public string? ShareUrl { get; set; }
    }

    [GraphQLName("DynamicPageFeedItem")]
    public interface IDynamicPageFeedItem
    {
    }

    [GraphQLName("DynamicPageBottomSheetTypes")]
    public interface IDynamicPageBottomSheetTypes
    {
    }

    [GraphQLName("DynamicPageBottomSheetFeedItems")]
    public interface IDynamicPageBottomSheetFeedItems
    {
    }

    [Shareable]
    public class DynamicPageBottomSheet : IDynamicPageBottomSheetTypes
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public ICollection<IDynamicPageBottomSheetFeedItems?> BottomSheetFeedItems { get; set; }
        public Analytics? Analytics { get; set; }
    }

    [Shareable]
    public class ContentList : IDynamicPageFeedItem, IDynamicPageBottomSheetFeedItems
    {
        public string? ContentListTitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<ContentListItem> ContentListItems { get; set; }
    }

    [Shareable]
    public class ContentListItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        public string? ImageAltText { get; set; }
        public string? Subtitle { get; set; }
        public DynamicPageAction? Cta { get; set; }
    }

    [GraphQLDescription(@"Generic action type to be used for all components on this screen except for QuickLinks")]
    [Shareable]
    public class DynamicPageAction
    {
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLNonNullType]
        public string Action { get; set; }
        public Analytics? Analytics { get; set; }
    }

    [GraphQLDescription(@"At least one of the three fields should be present, BFF should NOT return an
instance of this type with all fields null")]
    [Shareable]
    public class CampaignCopy : IDynamicPageFeedItem, IDynamicPageBottomSheetFeedItems
    {
        public string? CampaignCopyTitle { get; set; }
        public string? CampaignCopySubtitle { get; set; }
        public string? CampaignCopyBody { get; set; }
    }

    [Shareable]
    public class CampaignTermsAndConditions : IDynamicPageFeedItem, IDynamicPageBottomSheetFeedItems
    {
        [GraphQLNonNullType]
        public string TermsAndConditionsTitle { get; set; }
        [GraphQLNonNullType]
        public string MarkdownText { get; set; }
    }

    [Shareable]
    public class DynamicPageFooterSection
    {
        [GraphQLNonNullType]
        public DynamicPageAction Action { get; set; }
    }

    [Shareable]
    public class CampaignCardCarousel : IDynamicPageFeedItem
    {
        public string? CampaignCardCarouselTitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<CampaignCard> CampaignCards { get; set; }
    }

    [Shareable]
    public class CampaignCardList : IDynamicPageFeedItem, IDynamicPageBottomSheetFeedItems
    {
        public string? CampaignCardListTitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<FullWidthCampaignCard> CampaignCards { get; set; }
    }

    [GraphQLName("CampaignCardBase")]
    public interface ICampaignCardBase
    {
        [GraphQLNonNullType]
        string Title { get; set; }
        [GraphQLNonNullType]
        string ImageUrl { get; set; }
        string? ImageAltText { get; set; }
        [GraphQLNonNullType]
        string Action { get; set; }
        string? Subtitle { get; set; }
    }

    [Shareable]
    public class CampaignCard : ICampaignCardBase
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        public string? ImageAltText { get; set; }
        [GraphQLNonNullType]
        public string Action { get; set; }
        public string? Subtitle { get; set; }
    }

    [Shareable]
    public class FullWidthCampaignCard : ICampaignCardBase
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        public string? ImageAltText { get; set; }
        [GraphQLNonNullType]
        public string Action { get; set; }
        public string? Subtitle { get; set; }
    }

    [Shareable]
    public class CategoryTileList : IDynamicPageFeedItem
    {
        public string? CategoryTileListTitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<CategoryTile> CategoryTileListTiles { get; set; }
    }

    [Shareable]
    public class CategoryTile
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Action { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        public string? ImageAltText { get; set; }
    }

    [GraphQLDescription(@"Base interface for all node types")]
    [GraphQLName("BaseNode")]
    public interface IBaseNode
    {
        [GraphQLDescription(@"Unique identifier for the node")]
        string? NodeId { get; set; }
    }

    [GraphQLDescription(@"Union type representing different types of node content
Currently only supports HorizontalList")]
    [GraphQLName("NodeContent")]
    public interface INodeContent
    {
    }

    [GraphQLName("FoodTrackerPage")]
    public interface IFoodTrackerPage
    {
    }

    [Shareable]
    public class FoodTrackerContentFeed : IFoodTrackerPage
    {
        [GraphQLNonNullType]
        public string NavigationTitle { get; set; }
        [GraphQLNonNullType]
        public DownloadableAsset HeaderAsset { get; set; }
        [GraphQLNonNullType]
        public ICollection<IFoodTrackerContentItem> Content { get; set; }
        [GraphQLNonNullType]
        public FoodTrackerFooterCard Footer { get; set; }
    }

    [GraphQLName("FoodTrackerContentItem")]
    public interface IFoodTrackerContentItem
    {
    }

    [Shareable]
    public class IconListItem : IFoodTrackerContentItem
    {
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Description { get; set; }
    }

    [Shareable]
    public class ParagraphTextItem : IFoodTrackerContentItem, IProductDetailsRowAccordionExpandedContent, IProductDetailsRowUILinkContent, IStaticBottomSheetFeedItem, IGenericPageFeedItem, IFulfilmentInfoRowAccordionExpandedContent
    {
        public string? ParagraphTextItemId { get; set; }
        [GraphQLNonNullType]
        public string Content { get; set; }
        [GraphQLNonNullType]
        public ParagraphTextItemType Type { get; set; }
    }

    [Shareable]
    public class FoodTrackerFooterCard
    {
        [GraphQLNonNullType]
        public DownloadableAsset Icon { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        public IFoodTrackerAction? ConsentAction { get; set; }
        [GraphQLNonNullType]
        public FooterActionType ActionType { get; set; }
        [GraphQLNonNullType]
        public string PrimaryCtaLabel { get; set; }
    }

    [Shareable]
    public class FoodTrackerWebView : IFoodTrackerPage
    {
        [GraphQLDeprecated(@"no longer required since 24.4")]
        [GraphQLNonNullType]
        public DownloadableAsset HeaderAsset { get; set; }
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLNonNullType]
        public string NavigationTitle { get; set; }
    }

    [GraphQLDescription(@"introduced a union type so we can add our type if we want")]
    [GraphQLName("FoodTrackerAction")]
    public interface IFoodTrackerAction
    {
    }

    [Shareable]
    public class FoodTrackerConsent : IFoodTrackerAction
    {
        [GraphQLNonNullType]
        public DownloadableAsset HeaderAsset { get; set; }
        [GraphQLNonNullType]
        public string ConsentTitle { get; set; }
        [GraphQLNonNullType]
        public string ConsentMarkdownDescription { get; set; }
        [GraphQLNonNullType]
        public string TermsMarkdownText { get; set; }
        [GraphQLNonNullType]
        public string PrimaryCtaLabel { get; set; }
        [GraphQLNonNullType]
        public string SecondaryCtaLabel { get; set; }
    }

    [Shareable]
    public class FoodTrackerConsentStatus
    {
        [GraphQLNonNullType]
        public bool Status { get; set; }
        public string? Message { get; set; }
    }

    [Shareable]
    public class ClearFulfilmentWindowStateResultSuccess
    {
        public bool? _ { get; set; }
    }

    [GraphQLName("FulfilmentWindowState")]
    public interface IFulfilmentWindowState
    {
        [GraphQLDescription(@"e.g. Selected:")]
        [GraphQLNonNullType]
        string FulfilmentWindowStateTitle { get; set; }
        [GraphQLDescription(@"e.g.
  text: Friday, 4 Mar • 2pm - 5pm
  altText: Friday, 4 March between 2pm and 5pm")]
        TextWithAlt? FulfilmentWindowStateSubtitle { get; set; }
        [GraphQLDescription(@"(Button): Edit or Select")]
        [GraphQLNonNullType]
        Button FulfilmentWindowStateButton { get; set; }
    }

    [Shareable]
    public class SetFulfilmentWindowResultSuccess
    {
        public bool? _ { get; set; }
        [GraphQLDescription(@"The Shopping Mode, after fulfilment window has been set")]
        [GraphQLNonNullType]
        public CollectionModeId ModeId { get; set; }
    }

    [GraphQLDescription(@"Represents the guides page content")]
    [Shareable]
    public class GuidesPage : IGenericPage
    {
        [GraphQLDescription(@"implement from generic type
List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. opemBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class GuidesPageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"represents page title")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"BFF to extract Image component's image URL if primary flag of the component is true,
if false, return a fallback image url")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [GraphQLDescription(@"The query parameters used when clicking on the card to get the product list from productsByProductGroup. Mode is not included.")]
    [Shareable]
    public class QueryParameters
    {
        [GraphQLDescription(@"Represents the product group id. **Must** always be provided *e.g. ""25""*.")]
        [GraphQLNonNullType]
        public string GroupId { get; set; }
        [GraphQLDescription(@"Represents the unique store id. Optional parameter but **Must** be provided if mode is INSTORE *e.g. ""1550""*.")]
        public string? StoreId { get; set; }
    }

    [GraphQLDescription(@"Always showing. Drives the product group promotional tile on the FE.")]
    [Shareable]
    public class PromoCard
    {
        [GraphQLDescription(@"The type of content that the card targets on action. This should be used to determine the target screen.")]
        [GraphQLNonNullType]
        public string PromotionType { get; set; }
        [GraphQLDescription(@"The type of content.")]
        [GraphQLNonNullType]
        public string DataPathType { get; set; }
        [GraphQLDescription(@"The query parameters used when clicking on the card to get the product list from productsByProductGroup.")]
        [GraphQLNonNullType]
        public QueryParameters QueryParameters { get; set; }
        [GraphQLDescription(@"A full URL to the promotional image asset.")]
        [GraphQLNonNullType]
        public string Image { get; set; }
        [GraphQLDescription(@"A description of the image content for accessibility and fallback when an image fails to load.")]
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [GraphQLDescription(@"Unknown. Is this being used?")]
    [Shareable]
    public class RegistrationCard : IHomeFeed, IGenericPageFeedItem
    {
        [GraphQLDescription(@"Common BFF custom flag to allow independent chain resolvers.
Having item with _excluded:true, means it should not be used in FE")]
        public bool? Excluded { get; set; }
    }

    [GraphQLDescription(@"Displays if valid edr.")]
    [Shareable]
    public class RewardsSummaryCard : IHomeFeed
    {
        [GraphQLDescription(@"The rewards card number")]
        [GraphQLNonNullType]
        public string EdrNumber { get; set; }
        [GraphQLDescription(@"Card Title")]
        [GraphQLNonNullType]
        public string RewardsSummaryCardTitle { get; set; }
        [GraphQLDescription(@"Card Subtitle")]
        [GraphQLNonNullType]
        public string RewardsSummaryCardSubtitle { get; set; }
        [GraphQLDescription(@"Rewards State")]
        [GraphQLNonNullType]
        public string RewardsState { get; set; }
    }

    [GraphQLDescription(@"Displays if no edr. Drives the add rewards card tile on the FE.")]
    [Shareable]
    public class AddRewardsCard : IHomeFeed, IGenericPageFeedItem
    {
        [GraphQLDescription(@"'+ Add Rewards Card'")]
        [GraphQLNonNullType]
        public string AddRewardsCardTitle { get; set; }
        [GraphQLDescription(@"'Collect points and boost your savings'")]
        [GraphQLNonNullType]
        public string AddRewardsCardSubtitle { get; set; }
    }

    [Shareable]
    public class AlertIndicator
    {
        [GraphQLNonNullType]
        public AlertIndicatorType IndicatorType { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [GraphQLDescription(@"Display if valid edr new component")]
    [Shareable]
    public class RewardsBalanceCard : IHomeFeed, IGenericPageFeedItem
    {
        [GraphQLNonNullType]
        public string EdrNumber { get; set; }
        [GraphQLNonNullType]
        public string RewardsState { get; set; }
        [GraphQLNonNullType]
        public string OffersTitle { get; set; }
        [GraphQLNonNullType]
        public int CurrentBalance { get; set; }
        [GraphQLNonNullType]
        public int GoalBalance { get; set; }
        [GraphQLNonNullType]
        public string ActionUrl { get; set; }
        [GraphQLNonNullType]
        public string PointsDescriptionFormat { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> PointsDescriptionReplacements { get; set; }
        [GraphQLNonNullType]
        public string AltText { get; set; }
        public AlertIndicator? OffersAlertIndicator { get; set; }
        public AlertIndicator? PointsAlertIndicator { get; set; }
    }

    [GraphQLDescription(@"Always showing. Drives the catalogue tile on the FE.")]
    [Shareable]
    public class CatalogueCard : IHomeFeed, IGenericPageFeedItem
    {
        [GraphQLDescription(@"'Catalogue'")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"'View current specials'")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        public string? ImageLeft { get; set; }
        public string? ImageRight { get; set; }
        public string? ImageBackground { get; set; }
        public CatalogueCardType? CatalogueCardType { get; set; }
        [GraphQLDescription(@"Sale Finder saleId")]
        [ID]
        public string? Id { get; set; }
    }

    [GraphQLDescription(@"Animation over components")]
    [Shareable]
    public class OverlayAnimation
    {
        [GraphQLDescription(@"source can be url to lottie json file or resource Id with in mobile app.")]
        [GraphQLNonNullType]
        public string Source { get; set; }
        [GraphQLDescription(@"number of times the animation should be played, 0 means infinite.")]
        [GraphQLNonNullType]
        public int PlayCount { get; set; }
    }

    [GraphQLDescription(@"Home page QuickLink list")]
    [Shareable]
    public class QuickLinkList : IDynamicPageFeedItem, IHomeFeed
    {
        [GraphQLNonNullType]
        public ICollection<QuickLinkCard> Items { get; set; }
    }

    [GraphQLDescription(@"Home page Quick Link Card")]
    [Shareable]
    public class QuickLinkCard : IHorizontalListItem, ILinkCardBase
    {
        [GraphQLNonNullType]
        public string LinkCardTitle { get; set; }
        public string? LinkCardSubtitle { get; set; }
        public string? LinkCardImage { get; set; }
        [GraphQLDescription(@"@deprecated(reason: ""Use `linkCardAction` instead"")")]
        [GraphQLNonNullType]
        public string LinkCardLink { get; set; }
        [GraphQLNonNullType]
        public ActionData LinkCardAction { get; set; }
        public OverlayAnimation? LinkCardAnimation { get; set; }
        [GraphQLNonNullType]
        public CardSize LinkCardSize { get; set; }
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Represents the background color of quick link card(at the moment it's either gray or white)")]
        public bool? IsQuickLinkView { get; set; }
    }

    [GraphQLDescription(@"Drives the recipes tile on the FE.")]
    [Shareable]
    public class RecipesCard
    {
        [GraphQLDescription(@"'Recipes'")]
        public string? Title { get; set; }
        [GraphQLDescription(@"'1000's of new recipes to inspire your cooking'")]
        public string? Subtitle { get; set; }
        [GraphQLDescription(@"'A fully qualified url to an image chosen at random from a finite list'")]
        public string? Image { get; set; }
    }

    [GraphQLDescription(@"Drives the webcard tile on the FE. Always showing.")]
    [Shareable]
    public class WebCard
    {
        [GraphQLNonNullType]
        public bool IsExternal { get; set; }
        [GraphQLNonNullType]
        public bool RequiresAuth { get; set; }
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLNonNullType]
        public string Image { get; set; }
        [GraphQLNonNullType]
        public string AltText { get; set; }
    }

    [GraphQLDescription(@"A card that opens a webview which does not require authentication
Card's data and webview url are fully managed in AEM & Target")]
    [Shareable]
    public class WebViewCard : IProductListFeed
    {
        [GraphQLDescription(@"Title to display on screen where the webview is embedded")]
        public string? Title { get; set; }
        [GraphQLDescription(@"URL to be loaded in webview")]
        public string? Url { get; set; }
        [GraphQLDescription(@"A full URL to the image asset")]
        [GraphQLNonNullType]
        public string Image { get; set; }
        [GraphQLDescription(@"Accessibility alternate text for image")]
        [GraphQLNonNullType]
        public string AltText { get; set; }
        [GraphQLDescription(@"The size of the card.
e.g. SMALL, MEDIUM, LARGE")]
        [GraphQLNonNullType]
        public CardHeight CardHeight { get; set; }
    }

    [GraphQLDescription(@"DEPRECATED (removed by app 22.4)")]
    [Shareable]
    public class ProductPromoCard : IHorizontalListItem
    {
        [GraphQLDescription(@"'78922'")]
        [GraphQLDeprecated(@"Not used by FE (removed from 22.4 onwards)")]
        public string? ProductId { get; set; }
        [GraphQLDescription(@"'https://test.mobile-api.woolworths.com.au/zeus/mnemosyne/v1/public/basicsbox.png',")]
        [GraphQLDeprecated(@"Not used by FE (removed from 22.4 onwards)")]
        public string? Image { get; set; }
        [GraphQLDescription(@"'Basics Box'")]
        [GraphQLDeprecated(@"Not used by FE (removed from 22.4 onwards)")]
        public string? AltText { get; set; }
        [GraphQLDescription(@"Height of card")]
        [GraphQLDeprecated(@"Not used by FE (removed from 22.4 onwards)")]
        [GraphQLNonNullType]
        public CardHeight Height { get; set; }
    }

    [GraphQLDescription(@"Banner indicating changes in the order fulfilment status")]
    [Shareable]
    public class FulfilmentStatusBanner
    {
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLNonNullType]
        public string ButtonLabel { get; set; }
    }

    [GraphQLDescription(@"Renders in OrderCard")]
    [Shareable]
    public class OrderCard : IHorizontalListItem
    {
        [GraphQLDescription(@"e.g. 'Ready for collection'")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"e.g. 'PICKUP - IN STORE #123454'")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"The status of the order")]
        [GraphQLNonNullType]
        public OrderStatus Status { get; set; }
        [GraphQLDescription(@"e.g. 12345")]
        [GraphQLNonNullType]
        public int OrderCardId { get; set; }
        [GraphQLDescription(@"e.g. '$400.00'")]
        [GraphQLNonNullType]
        public string Total { get; set; }
        [GraphQLDescription(@"e.g. 'Collect between'")]
        [GraphQLNonNullType]
        public string TimeLabel { get; set; }
        [GraphQLDescription(@"e.g. '4:00 am - 8:00 am')")]
        [GraphQLNonNullType]
        public string TimeValue { get; set; }
        [GraphQLDescription(@"e.g. 'Today, 24 March'")]
        [GraphQLNonNullType]
        public string Date { get; set; }
        [GraphQLDescription(@"Banner indicating a change in the order fulfilment")]
        public FulfilmentStatusBanner? FulfilmentStatusBanner { get; set; }
        [GraphQLDescription(@"Action for when card is clicked")]
        [GraphQLNonNullType]
        public ActionData OrderCardAction { get; set; }
    }

    [GraphQLDescription(@"Displays if user has items in order list")]
    [Shareable]
    public class OrderCardList
    {
        [GraphQLDescription(@"'My Orders'")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"'View and track your orders'")]
        public string? Subtitle { get; set; }
        [GraphQLDescription(@"OrderCard List")]
        [GraphQLNonNullType]
        public ICollection<OrderCard?> Items { get; set; }
        [GraphQLDescription(@"If items displays 'See all'")]
        public string? ActionTitle { get; set; }
        [GraphQLDescription(@"/orders")]
        public string? ActionPath { get; set; }
    }

    [GraphQLDescription(@"Drives the marketplace tile on the FE. Always showing.")]
    [Shareable]
    public class MarketplaceCard : IHomeFeed
    {
        [GraphQLDescription(@"label is nullable, ie, can have a value like NEW or can be set to null")]
        public string? MarketplaceCardLabel { get; set; }
        [GraphQLNonNullType]
        public string MarketplaceCardHeader { get; set; }
        [GraphQLNonNullType]
        public string MarketplaceCardTitle { get; set; }
        [GraphQLNonNullType]
        public string MarketplaceCardBannerImage { get; set; }
        [GraphQLNonNullType]
        public string MarketplaceCardBannerAltText { get; set; }
        [GraphQLNonNullType]
        public string MarketplaceCardSubtitle { get; set; }
        [GraphQLNonNullType]
        public string MarketplaceCardImage { get; set; }
        [GraphQLNonNullType]
        public string MarketplaceCardAltText { get; set; }
        [GraphQLNonNullType]
        public string MarketplaceCardBackgroundColor { get; set; }
    }

    [GraphQLDescription(@"Type to show current Fulfilment Window unselected state")]
    [Shareable]
    public class HomeFulfilmentWindowContainer : IHomeHeaderItems
    {
        [GraphQLDescription(@"""Select <mode> Window"" button")]
        [GraphQLNonNullType]
        public Button Button { get; set; }
        [GraphQLDescription(@"If defined, should display the ""Delivery Now"" banner")]
        public HomeDeliveryNowBanner? DeliveryNowBanner { get; set; }
        [GraphQLDescription(@"Display the ""Delivery Now"" button to the right or below the ""Select <mode> Window"" button")]
        [GraphQLNonNullType]
        public HomeFulfilmentWindowContainerOrientation Orientation { get; set; }
    }

    [GraphQLDescription(@"Type to show current Fulfilment Window selected state")]
    [Shareable]
    public class HomeFulfilmentWindowBanner : IHomeHeaderItems, IFulfilmentWindowState
    {
        [GraphQLNonNullType]
        public string FulfilmentWindowStateTitle { get; set; }
        public TextWithAlt? FulfilmentWindowStateSubtitle { get; set; }
        [GraphQLNonNullType]
        public Button FulfilmentWindowStateButton { get; set; }
    }

    [GraphQLDescription(@"Type to show ""V2 Delivery Now Banner""")]
    [Shareable]
    public class HomeDeliveryNowBottomBanner : IHomeDeliveryNowBannerUnion, IBottomSheetContent
    {
        [GraphQLDescription(@"e.g. Delivery Now")]
        [GraphQLNonNullType]
        public string BottomSheetTitle { get; set; }
        [GraphQLDescription(@"e.g. Get it in 1-2 hours >")]
        [GraphQLNonNullType]
        public string BottomSheetBody { get; set; }
        [GraphQLDescription(@"Always false")]
        public bool? ShowOnceOnly { get; set; }
        [GraphQLDescription(@"The car icon")]
        public DownloadableAsset? BannerAsset { get; set; }
        [GraphQLDescription(@"Deep Link - com.woolworths.shop://shoppingModes")]
        public ContentCta? PrimaryCta { get; set; }
        [GraphQLDescription(@"Always null")]
        public ContentCta? SecondaryCta { get; set; }
    }

    [GraphQLName("HomeDeliveryNowBannerUnion")]
    public interface IHomeDeliveryNowBannerUnion
    {
    }

    [Shareable]
    public class InStoreDetailsCard
    {
        public TextWithLink? StoreName { get; set; }
        public TextWithLink? StoreTime { get; set; }
        [GraphQLDescription(@"Flag to identify instore product location whitelisted stores")]
        public bool? IsLocationMapped { get; set; }
    }

    [GraphQLDescription(@"Type to show mode selector tiles in header")]
    [Shareable]
    public class HomeModeSelectorContainer : IHomeHeaderItems
    {
        [GraphQLDescription(@"Tile to show fulfilment state")]
        public HomeFulfilmentWindowTile? FulfilmentWindowTile { get; set; }
        [GraphQLDescription(@"Vertical divider (to be used when tile style is NONE)")]
        public DividerCard? Divider { get; set; }
        [GraphQLDescription(@"Tile to show Pick up or Delivery details (Online mode)")]
        public HomeOnlineShoppingModeVariantTile? OnlineShoppingModeVariantTile { get; set; }
        [GraphQLDescription(@"Delivery Now Promotional Banner")]
        public IHomeDeliveryNowBannerUnion? DeliveryNowBanner { get; set; }
        [GraphQLDescription(@"Store name and opening hours for Instore mode")]
        public InStoreDetailsCard? InStoreDetailsCard { get; set; }
    }

    [GraphQLDescription(@"Type to provide custom analytics for HomeFulfilmentWindowTile")]
    [Shareable]
    public class HomeFulfilmentWindowTileAnalytics
    {
        [GraphQLDescription(@"Used to populated event.Label (e.g. ""Select Delivery Window"")")]
        [GraphQLNonNullType]
        public string Label { get; set; }
    }

    [Shareable]
    public class HomeFulfilmentWindowTile
    {
        [GraphQLDescription(@"Style of the tile (PRIMARY | NONE)")]
        [GraphQLNonNullType]
        public HomeFulfilmentWindowTileStyle Style { get; set; }
        [GraphQLDescription(@"Left-aligned icon")]
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
        [GraphQLDescription(@"Deep link")]
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLDescription(@"Bold style title (with accessibility)")]
        [GraphQLNonNullType]
        public TextWithAlt Title { get; set; }
        [GraphQLDescription(@"Normal style subtitle (with accessibility)")]
        public TextWithAlt? Subtitle { get; set; }
        [GraphQLDescription(@"Required analytics object for FE")]
        [GraphQLNonNullType]
        public HomeFulfilmentWindowTileAnalytics Analytics { get; set; }
    }

    [GraphQLDescription(@"Type to provide custom analytics for HomeOnlineShoppingModeVariantTile")]
    [Shareable]
    public class HomeOnlineShoppingModeVariantTileAnalytics
    {
        [GraphQLDescription(@"Used to populated event.Label (e.g. ""Set a delivery address"")")]
        [GraphQLNonNullType]
        public string Label { get; set; }
    }

    [Shareable]
    public class HomeOnlineShoppingModeVariantTile
    {
        [GraphQLDescription(@"Deep link")]
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLDescription(@"Bold style title (with accessibility)")]
        public TextWithAlt? Title { get; set; }
        [GraphQLDescription(@"Normal style subtitle (with accessibility)")]
        public TextWithAlt? Subtitle { get; set; }
        [GraphQLDescription(@"Required analytics object for FE")]
        [GraphQLNonNullType]
        public HomeOnlineShoppingModeVariantTileAnalytics Analytics { get; set; }
    }

    [GraphQLDescription(@"Type to show Instore Homepage My Lists")]
    [Shareable]
    public class MyShoppingLists : IHomeFeed, IGenericPageFeedItem
    {
        [GraphQLNonNullType]
        public string MyListTitle { get; set; }
        public string? MyListSubtitle { get; set; }
        public string? MyListActionTitle { get; set; }
        public string? MyListDeepLink { get; set; }
    }

    [GraphQLDescription(@"Type to show number of unread chatbot messages")]
    [Shareable]
    public class UnreadChatbotMsg
    {
        [GraphQLNonNullType]
        public int Count { get; set; }
    }

    [GraphQLName("HomeHeaderItems")]
    public interface IHomeHeaderItems
    {
    }

    [GraphQLName("HomeFeed")]
    public interface IHomeFeed
    {
    }

    [GraphQLDescription(@"Represents a list of different analytics that are related to HomeList.")]
    [GraphQLName("HomeListAnalytics")]
    public interface IHomeListAnalytics
    {
    }

    [GraphQLDescription(@"Components be used for homepage")]
    [Shareable]
    public class HomeList
    {
        [GraphQLDescription(@"List of display components (sticky top)")]
        [GraphQLNonNullType]
        public ICollection<IHomeHeaderItems?> HeaderItems { get; set; }
        [GraphQLDescription(@"WARNING: implementation is not final and under trial by Falcon
DeliveryNow property of the shopper")]
        public HomeListDeliveryNow? DeliveryNow { get; set; }
        [GraphQLDescription(@"List of display components.")]
        [GraphQLNonNullType]
        public ICollection<IHomeFeed?> Items { get; set; }
        [GraphQLDescription(@"Represents a list of different analytics that may be related to HomeList.")]
        [GraphQLNonNullType]
        public ICollection<IHomeListAnalytics?> Analytics { get; set; }
        [GraphQLDescription(@"The number of unread chatbot messages.")]
        public UnreadChatbotMsg? UnreadChatbotMsg { get; set; }
    }

    [Shareable]
    public class HomePage : IGenericPage
    {
        [GraphQLDescription(@"List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. opemBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class HomePageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"represents page title")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"represents hero image url
optional field, usually only one hero image in a page")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [Shareable]
    public class LastChatbotMsg
    {
        [GraphQLDescription(@"Represents the title for the tile `Message us`")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Represents the previewMessage(last message sent / default message)")]
        [GraphQLNonNullType]
        public string Body { get; set; }
        [GraphQLDescription(@"The number of unread chatbot messages")]
        [GraphQLNonNullType]
        public int UnreadChatbotMsgCount { get; set; }
        [GraphQLDescription(@"Represents the previewMessage source (ex: default/operator/bot/customer)")]
        [GraphQLNonNullType]
        public string Source { get; set; }
    }

    [Shareable]
    public class EditListResponse
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Color { get; set; }
        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }
        [GraphQLNonNullType]
        public decimal LastSynced { get; set; }
        public bool? IsWatching { get; set; }
    }

    [Shareable]
    public class ProductListItem
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }
        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }
        [GraphQLNonNullType]
        public bool Checked { get; set; }
    }

    [Shareable]
    public class FreeTextListItem
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }
        [GraphQLNonNullType]
        public bool Checked { get; set; }
        [GraphQLDescription(@"Frontend locally stored Id, used for identify newly created free text items")]
        [ID]
        public string? ReferenceId { get; set; }
    }

    [Shareable]
    public class List
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Color { get; set; }
        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }
        [GraphQLNonNullType]
        public int Count { get; set; }
        [GraphQLNonNullType]
        public decimal LastSynced { get; set; }
        [GraphQLNonNullType]
        public ICollection<ProductListItem> ProductItems { get; set; }
        [GraphQLNonNullType]
        public ICollection<FreeTextListItem> FreeTextItems { get; set; }
        public bool? IsWatching { get; set; }
    }

    [Shareable]
    public class ListItemDeleted
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }
    }

    [Shareable]
    public class ItemsToBeSynced
    {
        [GraphQLNonNullType]
        public ICollection<ProductListItem> UpdatedProductItems { get; set; }
        [GraphQLNonNullType]
        public ICollection<FreeTextListItem> UpdatedFreeTextItems { get; set; }
        public ICollection<ListItemDeleted?>? DeletedItems { get; set; }
    }

    [Shareable]
    public class SyncListItemsResponse
    {
        [GraphQLNonNullType]
        public string ListId { get; set; }
        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }
        [GraphQLDescription(@"Contains the newly created product Items of a list")]
        [GraphQLNonNullType]
        public ICollection<ProductListItem> CreatedProductItems { get; set; }
        [GraphQLDescription(@"Contains the edited product items of a list")]
        [GraphQLNonNullType]
        public ICollection<ProductListItem> EditedProductItems { get; set; }
        [GraphQLDescription(@"Contains the newly created free text Items of a list")]
        [GraphQLNonNullType]
        public ICollection<FreeTextListItem> CreatedFreeTextItems { get; set; }
        [GraphQLDescription(@"Contains the edited free text items of a list")]
        [GraphQLNonNullType]
        public ICollection<FreeTextListItem> EditedFreeTextItems { get; set; }
        [GraphQLNonNullType]
        public ICollection<ListItemDeleted> DeletedItems { get; set; }
        [GraphQLNonNullType]
        public ItemsToBeSynced ItemsToBeSynced { get; set; }
    }

    [GraphQLDescription(@"Response for list update")]
    [Shareable]
    public class ListResponse
    {
        [GraphQLDescription(@"id of the list in remote db")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLDescription(@"title of the list")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"color of the list")]
        [GraphQLNonNullType]
        public string Color { get; set; }
        [GraphQLDescription(@"timestamp when list has been updated")]
        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }
        [GraphQLDescription(@"watch specials")]
        public bool? IsWatching { get; set; }
    }

    [GraphQLDescription(@"Response for create list response")]
    [Shareable]
    public class CreateListResponse
    {
        [GraphQLDescription(@"id of the list in remote db")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLDescription(@"title of the list")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"color of the list")]
        [GraphQLNonNullType]
        public string Color { get; set; }
        [GraphQLDescription(@"timestamp when list has been updated")]
        [GraphQLNonNullType]
        public decimal Timestamp { get; set; }
        [GraphQLDescription(@"local reference Id which is used to identify which list it belongs to from server response")]
        [GraphQLNonNullType]
        public string ReferenceId { get; set; }
        public bool? IsWatching { get; set; }
    }

    [GraphQLDescription(@"Collection of lists changes on server-side")]
    [Shareable]
    public class ListsToBeSynced
    {
        [GraphQLDescription(@"Lists which was created")]
        [GraphQLNonNullType]
        public ICollection<ListResponse> ListsCreated { get; set; }
    }

    [GraphQLDescription(@"Response for sync list of lists")]
    [Shareable]
    public class SyncListsResponse
    {
        [GraphQLDescription(@"Create list response")]
        [GraphQLNonNullType]
        public ICollection<CreateListResponse> CreatedLists { get; set; }
        [GraphQLDescription(@"Update list response")]
        [GraphQLNonNullType]
        public ICollection<ListResponse> UpdatedLists { get; set; }
        [GraphQLDescription(@"Delete list response")]
        [GraphQLNonNullType]
        public ICollection<string> DeletedLists { get; set; }
    }

    [GraphQLDescription(@"Response for list migration")]
    [Shareable]
    public class MapGuestListToOwner
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
    }

    [GraphQLName("ListDetailsTotalSectionItemBase")]
    public interface IListDetailsTotalSectionItemBase
    {
        [GraphQLNonNullType]
        ICollection<IListDetailsTotalSectionSubItem> Sections { get; set; }
    }

    [GraphQLName("ListDetailsTotalSectionSubItemBase")]
    public interface IListDetailsTotalSectionSubItemBase
    {
        [GraphQLNonNullType]
        string Label { get; set; }
        [GraphQLNonNullType]
        string Value { get; set; }
    }

    [GraphQLName("ListDetailsTotalSectionSubItem")]
    public interface IListDetailsTotalSectionSubItem
    {
    }

    [Shareable]
    public class ListDetailsTotalSummary : IListDetailsTotalSectionItemBase
    {
        [GraphQLNonNullType]
        public ICollection<IListDetailsTotalSectionSubItem> Sections { get; set; }
    }

    [Shareable]
    public class ListDetailsTotalSectionHeader : IListDetailsTotalSectionSubItem, IListDetailsTotalSectionSubItemBase
    {
        [GraphQLDescription(@"text label of the section
e.g. ""List total""")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"value of the section
e.g. ""$31.00""")]
        [GraphQLNonNullType]
        public string Value { get; set; }
    }

    [Shareable]
    public class ListDetailsPotentialSavings : IListDetailsTotalSectionSubItem, IListDetailsTotalSectionSubItemBase
    {
        [GraphQLDescription(@"text label of the sub section
e.g. ""Potential savings""")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"value of the sub section
e.g. ""$2.00""")]
        [GraphQLNonNullType]
        public string Value { get; set; }
    }

    [Shareable]
    public class ListDetailsRewardsSummary : IListDetailsTotalSectionSubItem, IListDetailsTotalSectionSubItemBase
    {
        [GraphQLDescription(@"text label of the sub section
e.g. ""You may collect""")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"value of the sub section
e.g. ""0 points""")]
        [GraphQLNonNullType]
        public string Value { get; set; }
        [GraphQLDescription(@"Optional image url")]
        public string? ImageUrl { get; set; }
    }

    [Shareable]
    public class ListDetailsTotal
    {
        [GraphQLDescription(@"list total summary section")]
        public ListDetailsTotalSummary? Summary { get; set; }
        [GraphQLDescription(@"list total disclaimer")]
        public ListDetailsTotalDisclaimer? Disclaimer { get; set; }
        [GraphQLDescription(@"list total rewards section")]
        public ListDetailsTotalOverview? Overview { get; set; }
    }

    [Shareable]
    public class ListDetailsTotalDisclaimer
    {
        [GraphQLDescription(@"disclaimer text")]
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [Shareable]
    public class ListDetailsTotalOverview
    {
        [GraphQLDescription(@"label to display
e.g. 'Est. Total'")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"total amount
e.g. $31.00")]
        [GraphQLNonNullType]
        public string Value { get; set; }
        [GraphQLDescription(@"accessibility text for total amount")]
        [GraphQLNonNullType]
        public string AltText { get; set; }
    }

    [Shareable]
    public class ListDetailsProductAction
    {
        [GraphQLDescription(@"stock code")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLDescription(@"field used for render action
e.g. 'valueSwaps'")]
        [GraphQLNonNullType]
        public string Action { get; set; }
        [GraphQLDescription(@"label to display
e.g. 'Compare lower unit price'")]
        [GraphQLNonNullType]
        public string Label { get; set; }
    }

    [Shareable]
    public class ListDetailsResponse
    {
        [GraphQLDescription(@"field used for rendering list totals")]
        public ListDetailsTotal? Total { get; set; }
        [GraphQLDescription(@"additional actions that appear in the menu for individual products")]
        public ICollection<ListDetailsProductAction>? ProductActions { get; set; }
    }

    [GraphQLDescription(@"List of items on the info page")]
    [Shareable]
    public class InfoSectionItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
    }

    [GraphQLDescription(@"Additional info in footer")]
    [Shareable]
    public class InfoSectionFooter
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public string LinkUrl { get; set; }
    }

    [GraphQLDescription(@"Content of info page - eg: How it works")]
    [Shareable]
    public class InfoSection : IProductDetailsRowUILinkContent
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<InfoSectionItem> Items { get; set; }
        public InfoSectionFooter? Footer { get; set; }
    }

    [GraphQLDescription(@"Marketplace Query Response type")]
    [Shareable]
    public class Marketplace
    {
        [GraphQLDescription(@"Marketplace educational button title")]
        public string? ButtonTitle { get; set; }
        [GraphQLDescription(@"Marketplace educational banner content")]
        public InfoSection? Header { get; set; }
        [GraphQLDescription(@"Contains list of possible page tabs")]
        [GraphQLNonNullType]
        public ICollection<MarketplacePageTab> Tabs { get; set; }
        [GraphQLDescription(@"Contains list of possible page sections, mapping to tabs, Categories | Brands | Sellers | Personalised")]
        [GraphQLNonNullType]
        public ICollection<IMarketplaceSections> Sections { get; set; }
    }

    [GraphQLDescription(@"Marketplace landing page tab type")]
    [Shareable]
    public class MarketplacePageTab
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public MarketplaceLandingPageName PageName { get; set; }
    }

    [Shareable]
    public class MarketplaceEducationBottomSheet : IBottomSheetContent
    {
        [GraphQLNonNullType]
        public string BottomSheetTitle { get; set; }
        [GraphQLNonNullType]
        public string BottomSheetBody { get; set; }
        public bool? ShowOnceOnly { get; set; }
        public DownloadableAsset? BannerAsset { get; set; }
        public ContentCta? PrimaryCta { get; set; }
        public ContentCta? SecondaryCta { get; set; }
    }

    [GraphQLName("MarketplaceItem")]
    public interface IMarketplaceItem
    {
        [GraphQLNonNullType]
        string Title { get; set; }
        [GraphQLNonNullType]
        string ImageUrl { get; set; }
    }

    [GraphQLName("MarketplaceSectionItem")]
    public interface IMarketplaceSectionItem
    {
        [GraphQLNonNullType]
        MarketplaceLandingPageName PageName { get; set; }
        [GraphQLNonNullType]
        string DisplayName { get; set; }
        [GraphQLNonNullType]
        ProductListChannelType Channel { get; set; }
        [GraphQLNonNullType]
        ProductListFacetType Facet { get; set; }
    }

    [GraphQLDescription(@"Category from Trader - is of Level 1 - eg: Pet")]
    [Shareable]
    public class CategoryItem : IMarketplaceItem
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string DisplayOrder { get; set; }
        [GraphQLNonNullType]
        public bool IsFinalLevel { get; set; }
        public string? Source { get; set; }
    }

    [GraphQLDescription(@"Brand from Trader eg: Pauls")]
    [Shareable]
    public class BrandItem : IMarketplaceItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string LogoUrl { get; set; }
    }

    [GraphQLDescription(@"Seller info")]
    [Shareable]
    public class SellerItem : IMarketplaceItem
    {
        public string? Id { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string Link { get; set; }
    }

    [GraphQLDescription(@"List of Sellers")]
    [Shareable]
    public class Sellers : IMarketplaceSections, IMarketplaceSectionItem
    {
        [GraphQLNonNullType]
        public MarketplaceLandingPageName PageName { get; set; }
        [GraphQLNonNullType]
        public string DisplayName { get; set; }
        [GraphQLNonNullType]
        public ProductListChannelType Channel { get; set; }
        [GraphQLNonNullType]
        public ProductListFacetType Facet { get; set; }
        [GraphQLNonNullType]
        public ICollection<SellerItem> Items { get; set; }
    }

    [GraphQLDescription(@"List of Brands")]
    [Shareable]
    public class Brands : IMarketplaceSections, IMarketplaceSectionItem
    {
        [GraphQLNonNullType]
        public MarketplaceLandingPageName PageName { get; set; }
        [GraphQLNonNullType]
        public string DisplayName { get; set; }
        [GraphQLNonNullType]
        public ProductListChannelType Channel { get; set; }
        [GraphQLNonNullType]
        public ProductListFacetType Facet { get; set; }
        [GraphQLNonNullType]
        public ICollection<BrandItem> Items { get; set; }
    }

    [GraphQLDescription(@"List of Categories")]
    [Shareable]
    public class Categories : IMarketplaceSections, IMarketplaceSectionItem
    {
        [GraphQLNonNullType]
        public MarketplaceLandingPageName PageName { get; set; }
        [GraphQLNonNullType]
        public string DisplayName { get; set; }
        [GraphQLNonNullType]
        public ProductListChannelType Channel { get; set; }
        [GraphQLNonNullType]
        public ProductListFacetType Facet { get; set; }
        public PromotionBanner? PromotionBanner { get; set; }
        [GraphQLNonNullType]
        public ICollection<CategoryItem> Items { get; set; }
    }

    [GraphQLDescription(@"For-you horizontal list")]
    [Shareable]
    public class MarketplaceHorizontalList : IMarketplacePersonalisedSegment, IHorizontalListBase, IBaseNode
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public string? ActionTitle { get; set; }
        public string? DeepLink { get; set; }
        public string? NodeId { get; set; }
        [GraphQLNonNullType]
        public IEnumerable<IHorizontalListItem> Items { get; set; }
    }

    [GraphQLName("MarketplacePersonalisedSegment")]
    public interface IMarketplacePersonalisedSegment
    {
    }

    [GraphQLDescription(@"List of Personalised content")]
    [Shareable]
    public class MarketplacePersonalised : IMarketplaceSections
    {
        [GraphQLNonNullType]
        public MarketplaceLandingPageName PageName { get; set; }
        [GraphQLNonNullType]
        public string DisplayName { get; set; }
        [GraphQLNonNullType]
        public ICollection<IMarketplacePersonalisedSegment> Items { get; set; }
    }

    [GraphQLDescription(@"Query response will be an array and will contain object corresponding to Categories/Brands/Sellers")]
    [GraphQLName("MarketplaceSections")]
    public interface IMarketplaceSections
    {
    }

    [Shareable]
    public class MenuPage : IGenericPage
    {
        [GraphQLDescription(@"List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. opemBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class MenuPageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"represents page title")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"represents hero image url
optional field, usually only one hero image in a page")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [Shareable]
    public class MenuVersion : IGenericPageFeedItem
    {
        public bool? _ { get; set; }
    }

    [GraphQLDescription(@"(Shopping) Mode Selector Screen")]
    [Shareable]
    public class ShoppingModeSelector : ISetShoppingModeResponse, IShoppingModeSelectorResponse
    {
        [GraphQLNonNullType]
        public ShoppingModeSelectorHeader Header { get; set; }
        [GraphQLNonNullType]
        public ICollection<IShoppingModeSelectorSection> Sections { get; set; }
    }

    [GraphQLDescription(@"Header part of the Mode Selector Screen.
Contains the 3 buttons on top ""Pick up"", ""Delivery"" and ""In-store"".
Plus the asset for the selected mode+variant.")]
    [Shareable]
    public class ShoppingModeSelectorHeader
    {
        [GraphQLNonNullType]
        public ICollection<ShoppingModeSelectorHeaderButton> Buttons { get; set; }
        [GraphQLNonNullType]
        public DownloadableAsset Image { get; set; }
    }

    [Shareable]
    public class ShoppingModeSelectorHeaderButton
    {
        [GraphQLDescription(@"DELIVERY | PICKUP | INSTORE")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLDescription(@"Button title: Delivery | Pickup | In-store")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"State of the button")]
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
    }

    [GraphQLName("ShoppingModeSelectorSection")]
    public interface IShoppingModeSelectorSection
    {
    }

    [Shareable]
    public class ShoppingModeSelectorStoreFeaturesSection : IShoppingModeSelectorSection
    {
        [GraphQLDescription(@"In-store features")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"To display features as text and icon")]
        [GraphQLNonNullType]
        public ICollection<IconTextBanner> Features { get; set; }
    }

    [Shareable]
    public class ShoppingModeSelectorStoreDetail
    {
        [GraphQLDescription(@"To display the trading hours and direction icon")]
        public DownloadableAsset? Image { get; set; }
        [GraphQLDescription(@"Trading hours | Getting there")]
        public string? Title { get; set; }
        [GraphQLDescription(@"Store timings | distance in km")]
        public string? Subtitle { get; set; }
        [GraphQLDescription(@"See all Hours - details screen | Get Direction - open map")]
        public Button? Button { get; set; }
    }

    [Shareable]
    public class ShoppingModeSelectorStoreDetailsSection : IShoppingModeSelectorSection
    {
        [GraphQLNonNullType]
        public ICollection<ShoppingModeSelectorStoreDetail> StoreDetails { get; set; }
    }

    [Shareable]
    public class ShoppingModeSelectorAddressInfoSection : IShoppingModeSelectorSection
    {
        [GraphQLDescription(@"Delivering to | Pick up location | Selected store")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Store or delivery address details")]
        [GraphQLNonNullType]
        public ShoppingModeSelectorAddressInfo Details { get; set; }
    }

    [GraphQLDescription(@"Store or delivery address details")]
    [Shareable]
    public class ShoppingModeSelectorAddressInfo
    {
        [GraphQLDescription(@"Optional, Map Image displayed for Pick-up and In-Store modes")]
        public DownloadableAsset? Image { get; set; }
        [GraphQLDescription(@"Optional used only for Pick up and In-store modes")]
        public string? Title { get; set; }
        [GraphQLDescription(@"Optional used only for Delivery mode")]
        public string? Subtitle { get; set; }
        [GraphQLDescription(@"Edit button that triggers delivery/pick up address selector screen as well as store selector screen")]
        [GraphQLNonNullType]
        public Button Button { get; set; }
        [GraphQLDescription(@"Store details button instore mode to navigate to store details screen")]
        public Button? SecondaryButton { get; set; }
        [GraphQLDescription(@"Fields required for old mode selector screen to work.
This will be used for V2 as well until V3 (aka Drop 3) is released.")]
        [GraphQLDeprecated(@"Use shoppingModeDetails instead")]
        public IModeSelectorV1AddressDetails? V1AddressDetails { get; set; }
        [GraphQLDescription(@"Fields used to ""sync"" shopping mode with App")]
        [GraphQLNonNullType]
        public ShoppingModeDetails ShoppingModeDetails { get; set; }
    }

    [Shareable]
    public class ShoppingModeSelectorOptionsSection : IShoppingModeSelectorSection
    {
        [GraphQLDescription(@"Delivery options | Pick up options")]
        public string? Title { get; set; }
        [GraphQLDescription(@"Array of option items")]
        [GraphQLNonNullType]
        public ICollection<ShoppingModeSelectorOption> Items { get; set; }
        [GraphQLDescription(@"Footnote for one or more delivery options
(e.g: `Delivery Unlimited discounts shown at checkout`)")]
        public string? Footnote { get; set; }
    }

    [GraphQLName("ShoppingModeSelectorOptionFulfilmentSection")]
    public interface IShoppingModeSelectorOptionFulfilmentSection
    {
    }

    [Shareable]
    public class ShoppingModeSelectorOption
    {
        [GraphQLDescription(@"DELIVERY | DELIVERY_NOW | PICK_UP")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLDescription(@"Current state of the Variant
(e.g. `SELECTED`, `DISABLED` or `AVAILABLE`)")]
        [GraphQLNonNullType]
        public ShoppingModeSelectorOptionState State { get; set; }
        [GraphQLDescription(@"Badge of the Variant
(e.g: `Temporarily unavailable` or `null` if no extra badge is necessary)")]
        public Badge? Badge { get; set; }
        [GraphQLDescription(@"Delivery Now | Schedule for later | Direct to boot")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Get in 1-2 hours | Delivery at the time that suits you | Order placed into your car boot")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"""$15 | Up to $15 | $0"",")]
        public string? Price { get; set; }
        [GraphQLDescription(@"Array of Badges

values: $50 minimum | 50 item limit | No minimum spend and so on...")]
        [GraphQLNonNullType]
        public ICollection<Badge> Conditions { get; set; }
        [GraphQLDescription(@"Divider and Button to show empty or selected fulfilment window state")]
        public ICollection<IShoppingModeSelectorOptionFulfilmentSection>? Fulfilment { get; set; }
    }

    [Shareable]
    public class ShoppingModeSelectorErrorResponse : ISetShoppingModeResponse, IShoppingModeSelectorResponse
    {
        [GraphQLDescription(@"User friendly error message")]
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"(Optional) deep-link if FE should redirect the user to a different screen")]
        public string? DeepLinkUrl { get; set; }
    }

    [Shareable]
    public class ShoppingModeSelectorRedirectResponse : ISetShoppingModeResponse
    {
        [GraphQLDescription(@"deep-link if FE should redirect the user to a different screen")]
        [GraphQLNonNullType]
        public string DeepLinkUrl { get; set; }
    }

    [GraphQLName("SetShoppingModeResponse")]
    public interface ISetShoppingModeResponse
    {
    }

    [GraphQLName("ShoppingModeSelectorResponse")]
    public interface IShoppingModeSelectorResponse
    {
    }

    [GraphQLDescription(@"Types used syncing shopping mode details for mode selector v1")]
    [GraphQLName("ModeSelectorV1AddressDetails")]
    public interface IModeSelectorV1AddressDetails
    {
    }

    [Shareable]
    public class ModeSelectorV1AddressDetailsDelivery : IModeSelectorV1AddressDetails
    {
        [GraphQLNonNullType]
        public string ModeId { get; set; }
        [GraphQLNonNullType]
        public int AddressId { get; set; }
        [GraphQLNonNullType]
        public string AddressText { get; set; }
        [GraphQLNonNullType]
        public bool IsPrimary { get; set; }
        [GraphQLNonNullType]
        public string Postcode { get; set; }
        [GraphQLNonNullType]
        public string Street1 { get; set; }
        [GraphQLNonNullType]
        public string Street2 { get; set; }
        [GraphQLNonNullType]
        public int SuburbId { get; set; }
        [GraphQLNonNullType]
        public string SuburbName { get; set; }
    }

    [Shareable]
    public class ModeSelectorV1AddressDetailsPickup : IModeSelectorV1AddressDetails
    {
        [GraphQLNonNullType]
        public string ModeId { get; set; }
        [GraphQLNonNullType]
        public string StoreId { get; set; }
        [GraphQLNonNullType]
        public int AddressId { get; set; }
        [GraphQLNonNullType]
        public string AddressText { get; set; }
        [GraphQLNonNullType]
        public string DisplayName { get; set; }
        [GraphQLNonNullType]
        public string Label { get; set; }
    }

    [GraphQLDescription(@"List of more items

Usage:
```graphql
  feed {
    ... on MoreDeliveryUnlimited {
      title
      subtitle
    }
    ... on MoreRewardsCard {
      cardNumber
      canBeUnlinked
      rewardsState
    }
    ... on MoreActivateRewardsCard {
      cardNumber
      title
      rewardsState
    }
    ... on MoreNotifications {
      title
    }
    ... on MoreChat {
      title
      url
    }
  }")]
    [GraphQLName("MoreFeedItem")]
    public interface IMoreFeedItem
    {
    }

    [Shareable]
    public class More
    {
        [GraphQLDescription(@"Feed of more screen sections")]
        [GraphQLNonNullType]
        public ICollection<IMoreFeedItem> Feed { get; set; }
    }

    [Shareable]
    public class MoreName : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [Shareable]
    public class MoreScanAndGo : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
    }

    [Shareable]
    public class MoreFindAStore : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
    }

    [Shareable]
    public class MoreRewards : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
    }

    [Shareable]
    public class MoreOrders : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
    }

    [Shareable]
    public class MoreNotifications : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
    }

    [Shareable]
    public class MoreLink : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public string? Url { get; set; }
    }

    [Shareable]
    public class MoreChat : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public string? Url { get; set; }
        public UnreadChatbotMsg? UnreadChatbotMsg { get; set; }
    }

    [Shareable]
    public class MoreLogin : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [Shareable]
    public class MoreLogout : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class MoreDeleteAccount : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class MoreLinkRewardsBanner : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public string? Url { get; set; }
        public string? AnalyticsLabel { get; set; }
    }

    [GraphQLDescription(@"More Screen E Receipts Tile")]
    [Shareable]
    public class MoreEReceipts : IMoreFeedItem
    {
        [GraphQLDescription(@"E Receipts title,")]
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class MoreReceiptPreferences : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Url { get; set; }
    }

    [Shareable]
    public class MoreOnlineShopping : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Url { get; set; }
    }

    [Shareable]
    public class MoreExplainingValue : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Url { get; set; }
    }

    [Shareable]
    public class MoreFoodTracker : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Url { get; set; }
    }

    [GraphQLName("MyAccountFeedItem")]
    public interface IMyAccountFeedItem
    {
    }

    [Shareable]
    public class AccountDetailsPage
    {
        [GraphQLNonNullType]
        public ICollection<IMyAccountFeedItem?> Feed { get; set; }
    }

    [Shareable]
    public class MyAccountPersonalDetails : IMyAccountFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<CoreRowUI> RowItems { get; set; }
    }

    [Shareable]
    public class MyAccountBusinessDetails : IMyAccountFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<CoreRowUI> RowItems { get; set; }
    }

    [Shareable]
    public class MyAccountContactDetails : IMyAccountFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<CoreRowUI> RowItems { get; set; }
    }

    [Shareable]
    public class MyAccountPreferences : IMyAccountFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<CoreRowUI> RowItems { get; set; }
    }

    [Shareable]
    public class MyAccountFooter : IMyAccountFeedItem
    {
        [GraphQLNonNullType]
        public Button Button { get; set; }
    }

    [Shareable]
    public class NCCta
    {
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLNonNullType]
        public string Url { get; set; }
    }

    [Shareable]
    public class NCMessage
    {
        [GraphQLDescription(@"Id of the notification message")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLDescription(@"campaignCode derived from swrve campaign")]
        [GraphQLNonNullType]
        public string CampaignCode { get; set; }
        public string? CampaignVariant { get; set; }
        public string? Title { get; set; }
        public string? Body { get; set; }
        public NCCta? Cta { get; set; }
        [GraphQLDescription(@"ttl expiry(ISO 8601 timestamp with timezone) of the notification in db")]
        [GraphQLNonNullType]
        public string Ttl { get; set; }
        [GraphQLDescription(@"ISO 8601 timestamp with timezone")]
        [GraphQLNonNullType]
        public string CreatedOn { get; set; }
    }

    [Shareable]
    public class PickupCheckInResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        public string? Message { get; set; }
        public string? Reason { get; set; }
    }

    [Shareable]
    public class PickupOrderLocationUpdateResponse
    {
        [GraphQLDescription(@"Id of the order associated with the on my way checkin")]
        [GraphQLNonNullType]
        public string OrderId { get; set; }
        [GraphQLDescription(@"Flag to indicate location tracking can be stopped as the order is either collected/cancelled or store is closed ")]
        [GraphQLNonNullType]
        public bool StopLocationTracking { get; set; }
        [GraphQLDescription(@"Travel time of customer in seconds provided by pickup service")]
        [GraphQLNonNullType]
        public int TravelTimeInSec { get; set; }
        [GraphQLDescription(@"Buffer time of 900 seconds to added to travel time for location tracking duration")]
        [GraphQLNonNullType]
        public int BufferTimeInSec { get; set; }
    }

    [Shareable]
    public class PreferenceAnalytics
    {
        [GraphQLNonNullType]
        public string Label { get; set; }
    }

    [Shareable]
    public class PreferenceText : IPreferenceItem
    {
        [GraphQLNonNullType]
        public string Body { get; set; }
        public string? AltText { get; set; }
    }

    [Shareable]
    public class PreviewImageItem
    {
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        public string? AltText { get; set; }
    }

    [Shareable]
    public class PreviewContent
    {
        public string? Badge { get; set; }
        [GraphQLNonNullType]
        public ICollection<PreviewImageItem> Entries { get; set; }
        public string? Footer { get; set; }
    }

    [Shareable]
    public class PreferenceToggle
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public bool Value { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public PreferenceAnalytics Analytics { get; set; }
        public string? IconUrl { get; set; }
        public string? AltText { get; set; }
        public PreviewContent? Preview { get; set; }
        public string? Footer { get; set; }
    }

    [Shareable]
    public class PreferenceToggleGroup : IPreferenceItem
    {
        public string? GroupTitle { get; set; }
        public string? Description { get; set; }
        [GraphQLNonNullType]
        public ICollection<PreferenceToggle> Toggles { get; set; }
    }

    [GraphQLName("PreferenceItem")]
    public interface IPreferenceItem
    {
    }

    [Shareable]
    public class Preferences
    {
        public string? Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<IPreferenceItem> Details { get; set; }
    }

    [Shareable]
    public class ProductNutritionInfo : IProductDetailsFeedItem, IProductDetailsRowUILinkContent
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string ServingsPerPack { get; set; }
        [GraphQLNonNullType]
        public string ServingSize { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> ServingsHeader { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> ServingsRow { get; set; }
        [GraphQLNonNullType]
        public string BottomCaption { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> TableHeaderRow { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICollection<string>> TableRows { get; set; }
    }

    [Shareable]
    public class ProductDisclaimer : IProductDetailsFeedItem
    {
        [GraphQLNonNullType]
        public string Content { get; set; }
    }

    [Shareable]
    public class ProductImage
    {
        public string? SmallUrl { get; set; }
        public string? MediumUrl { get; set; }
        public string? LargeUrl { get; set; }
        public string? AltText { get; set; }
        [GraphQLDescription(@"analytics for image gallery thumbnail click")]
        public Analytics? ImageGalleryThumbnailClickAnalytics { get; set; }
        [GraphQLDescription(@"analytics for product details thumbnail click")]
        public Analytics? ProductDetailsThumbnailClickAnalytics { get; set; }
        [GraphQLDescription(@"analytics for image gallery click")]
        public Analytics? ImageGalleryClickAnalytics { get; set; }
        [GraphQLDescription(@"analytics for image gallery scroll left/right")]
        public Analytics? ImageGalleryScrollAnalytics { get; set; }
        [GraphQLDescription(@"analytics for image gallery close")]
        public Analytics? ImageGalleryCloseAnalytics { get; set; }
    }

    [Shareable]
    public class FormattedFrame
    {
        [GraphQLNonNullType]
        public string Content { get; set; }
    }

    [Shareable]
    public class ImageContent : IProductDetailsFeedItem
    {
        public string? Url { get; set; }
        public string? Text { get; set; }
        [GraphQLNonNullType]
        public string AltText { get; set; }
    }

    [Shareable]
    public class ProductOriginAndHealthInfo : IProductDetailsFeedItem, IGenericPageFeedItem
    {
        public ImageContent? CountryOfOrigin { get; set; }
        public ImageContent? HealthStarRating { get; set; }
    }

    [Shareable]
    public class FormattedContent : IProductDetailsFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Content { get; set; }
        public string? FramedContent { get; set; }
        [GraphQLNonNullType]
        public bool IsCollapsable { get; set; }
    }

    [Shareable]
    public class FormattedBanner : IProductDetailsFeedItem
    {
        [GraphQLNonNullType]
        public bool HasIcon { get; set; }
        [GraphQLNonNullType]
        public string Content { get; set; }
        [GraphQLNonNullType]
        public FormattedBannerStyle Style { get; set; }
    }

    [Shareable]
    public class HealthierLink
    {
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLNonNullType]
        public string Url { get; set; }
    }

    [Shareable]
    public class HealthierLinkedInfo
    {
        [GraphQLNonNullType]
        public string ButtonLabel { get; set; }
        [GraphQLNonNullType]
        public string Content { get; set; }
        [GraphQLNonNullType]
        public ICollection<HealthierLink> Links { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? MarkdownContent { get; set; }
    }

    [Shareable]
    public class HealthierOption
    {
        [GraphQLNonNullType]
        public ProductCard ProductCard { get; set; }
        public ImageContent? HealthStarRating { get; set; }
    }

    [Shareable]
    public class HealthierHorizontalList : IProductDetailsFeedItem
    {
        [GraphQLNonNullType]
        public ICollection<HealthierOption> HealthierOptions { get; set; }
        public HealthierLinkedInfo? LinkedInfo { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class CouponBannerTermsAndConditions
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Url { get; set; }
        public string? AccessibilityLabel { get; set; }
    }

    [Shareable]
    public class CouponBanner : IProductDetailsFeedItem, ICartSection
    {
        [GraphQLNonNullType]
        public CouponBannerColorTheme CouponBannerColorTheme { get; set; }
        [GraphQLNonNullType]
        public string CouponBannerDescription { get; set; }
        [GraphQLNonNullType]
        public string CouponBannerCouponCode { get; set; }
        [GraphQLNonNullType]
        public string CouponBannerMinimumSpend { get; set; }
        public string? CouponBannerImage { get; set; }
        public string? CouponBannerCouponCodeAccessibilityLabel { get; set; }
        public string? CouponBannerDescriptionAccessibilityLabel { get; set; }
        [GraphQLNonNullType]
        public CouponBannerTermsAndConditions CouponBannerTermsAndConditions { get; set; }
    }

    [GraphQLDescription(@"Additional info for marketplace product details")]
    [Shareable]
    public class ProductDetailsMarketplace : IProductDetailsFeedItem
    {
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string DispatchNote { get; set; }
        [GraphQLNonNullType]
        public string SellerName { get; set; }
        [GraphQLNonNullType]
        public string BrandName { get; set; }
        [GraphQLNonNullType]
        public ProductListChannelType Channel { get; set; }
        [GraphQLNonNullType]
        public ProductListFacetType Facet { get; set; }
        public InfoSection? Info { get; set; }
        public MarketplaceEducationBottomSheet? BottomSheet { get; set; }
    }

    [GraphQLDescription(@"Product Ratings and reviews summary section on product details page")]
    [Shareable]
    public class ProductRatingsAndReviewsSummary : IProductDetailsFeedItem
    {
        [GraphQLDescription(@"Average rating of the product
e.g. 3.7")]
        [GraphQLNonNullType]
        public decimal AverageRatings { get; set; }
        [GraphQLDescription(@"how many stars frontend need to render based on the averageRatings")]
        [GraphQLNonNullType]
        public decimal DisplayRatings { get; set; }
        [GraphQLDescription(@"Max rating of the product
e.g. 5")]
        [GraphQLNonNullType]
        public int MaximumRating { get; set; }
        [GraphQLDescription(@"Average ratings text of the product")]
        [GraphQLNonNullType]
        public TextWithAlt RatingText { get; set; }
        [GraphQLDescription(@"Call to action for the section")]
        public ProductRatingsAndReviewsSummaryCta? Cta { get; set; }
    }

    [Shareable]
    public class ProductRatingsAndReviewsSummaryCta
    {
        [GraphQLDescription(@"Text to be displayed on the CTA
e.g. 41 reviews")]
        [GraphQLNonNullType]
        public TextWithAlt CtaText { get; set; }
        [GraphQLDescription(@"Defines the action to be taken when the CTA is clicked.")]
        [GraphQLNonNullType]
        public ActionData Action { get; set; }
    }

    [GraphQLName("ProductDetailsFeedItem")]
    public interface IProductDetailsFeedItem
    {
    }

    [Shareable]
    public class ProductDetails
    {
        [GraphQLNonNullType]
        public ICollection<IProductDetailsFeedItem> Feed { get; set; }
        [GraphQLNonNullType]
        public ICollection<ProductImage?> ImageList { get; set; }
    }

    [Shareable]
    public class ProductDetailsPage : IGenericPage
    {
        [GraphQLDescription(@"List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. opemBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        public ProductDetailsPageFooter? Footer { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class ProductDetailsPageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"represents page title")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"represents hero image url
optional field, usually only one hero image in a page")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [Shareable]
    public class ProductDetailsPageFooter
    {
        public TextWithAlt? FooterMessage { get; set; }
        [GraphQLNonNullType]
        public ICollection<Button> ProductDetailsActions { get; set; }
    }

    [Shareable]
    public class RoundelImage
    {
        [GraphQLDescription(@"The URL of the roundel image")]
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLDescription(@"Alternative text for the roundel image, used for accessibility")]
        [GraphQLNonNullType]
        public string AltText { get; set; }
        [GraphQLDescription(@"The priority of the roundel image, indicating its importance")]
        [GraphQLNonNullType]
        public RoundelImagePriority Priority { get; set; }
    }

    [Shareable]
    public class ProductDetailsImages : IGenericPageFeedItem
    {
        [GraphQLDescription(@"A list of images representing the product")]
        [GraphQLNonNullType]
        public ICollection<ProductImage> ProductImages { get; set; }
        [GraphQLDescription(@"A list of roundel images associated with the product")]
        [GraphQLNonNullType]
        public ICollection<RoundelImage> RoundelImages { get; set; }
    }

    [Shareable]
    public class ProductDetailsProductPanel : IGenericPageFeedItem
    {
        [GraphQLDescription(@"Summary of ratings and reviews for the product")]
        public ProductRatingsAndReviewsSummary? RatingsAndReviewsSummary { get; set; }
        [GraphQLDescription(@"Detailed information about the product")]
        [GraphQLNonNullType]
        public ProductCard Product { get; set; }
    }

    [Shareable]
    public class ProductDetailsRowAccordion : IGenericPageFeedItem
    {
        [GraphQLDescription(@"Analytics for accordion component open action")]
        public Analytics? OpenActionAnalytics { get; set; }
        [GraphQLDescription(@"Analytics for accordion component close action")]
        public Analytics? CloseActionAnalytics { get; set; }
        [GraphQLDescription(@"Core DS Row Component")]
        [GraphQLNonNullType]
        public CoreRowUI RowUI { get; set; }
        [GraphQLDescription(@"Indicates whether the accordion row is expanded")]
        [GraphQLNonNullType]
        public bool IsExpanded { get; set; }
        [GraphQLDescription(@"To include a divider or separator at the top of the component")]
        [GraphQLNonNullType]
        public bool HasTopSeparator { get; set; }
        [GraphQLDescription(@"Content displayed when the accordion row is expanded")]
        [GraphQLNonNullType]
        public IProductDetailsRowAccordionExpandedContent ExpandedContent { get; set; }
    }

    [GraphQLName("ProductDetailsRowAccordionExpandedContent")]
    public interface IProductDetailsRowAccordionExpandedContent
    {
    }

    [Shareable]
    [GraphQLName("ProductDetailsRowAccordionProductList")]
    public class ProductDetailsRowAccordionProductListData : IProductDetailsRowAccordionExpandedContent
    {
        [GraphQLNonNullType]
        public ParagraphTextItem ProductDetailsRowAccordionProductListTextItem { get; set; }
        [GraphQLNonNullType]
        public ContentCta ProductDetailsRowAccordionProductListCta { get; set; }
        public HorizontalList? ProductDetailsRowAccordionProductList { get; set; }
    }

    [Shareable]
    public class ProductDetailsRatingsAndReviewsPreview : IGenericPageFeedItem
    {
        [GraphQLDescription(@"Preview of ratings and reviews for the product")]
        public RatingsAndReviewsPreviewResponse? RatingsAndReviewsPreview { get; set; }
    }

    [GraphQLName("ProductDetailsRowUILinkContent")]
    public interface IProductDetailsRowUILinkContent
    {
    }

    [Shareable]
    public class ProductDetailsRowLink : IGenericPageFeedItem
    {
        [GraphQLDescription(@"Core DS Row Component")]
        [GraphQLNonNullType]
        public CoreRowUI RowUI { get; set; }
        [GraphQLDescription(@"To include a divider or separator at the top of the component")]
        [GraphQLNonNullType]
        public bool HasTopSeparator { get; set; }
        [GraphQLDescription(@"Content linked to the row, can be either a paragraph text item or nutrition info")]
        [GraphQLNonNullType]
        public IProductDetailsRowUILinkContent LinkContent { get; set; }
        [GraphQLDescription(@"Analytics for accordion component open action")]
        public Analytics? OpenActionAnalytics { get; set; }
    }

    [GraphQLName("ProductDetailsCoreRowDetails")]
    public interface IProductDetailsCoreRowDetails
    {
    }

    [Shareable]
    public class ProductDetailsCoreRow : IGenericPageFeedItem
    {
        [GraphQLDescription(@"To include a divider or separator at the top of the section")]
        [GraphQLNonNullType]
        public bool HasTopSeparator { get; set; }
        [GraphQLDescription(@"List of different UI components to be displayed for Market Place section")]
        [GraphQLNonNullType]
        public IProductDetailsCoreRowDetails RowDetails { get; set; }
    }

    [Shareable]
    [GraphQLName("ProductDetailsCouponBanner")]
    public class ProductDetailsCouponBannerData : IGenericPageFeedItem
    {
        public CouponBanner? ProductDetailsCouponBanner { get; set; }
    }

    [GraphQLDescription(@"Filter switch")]
    [Shareable]
    public class ProductFilterSwitch
    {
        [GraphQLDescription(@"Represents the key of the switch option which should be used while selecting the switch option .")]
        [GraphQLNonNullType]
        public string Key { get; set; }
        [GraphQLDescription(@"Represents the value of the switch option *e.g. ""Include Marketplace items"".")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Represents the ordering or more description of the switch option.")]
        public string? Subtitle { get; set; }
        [GraphQLDescription(@"Represents the icon in front of switch .")]
        public string? ImageUrl { get; set; }
        [GraphQLDescription(@"Represent whether the switch option is on or off.")]
        [GraphQLNonNullType]
        public bool Value { get; set; }
        [GraphQLDescription(@"Represent a optional button such as ""Learn more"".")]
        public ContentCta? ButtonCta { get; set; }
    }

    [GraphQLDescription(@"A list of filter menu items.")]
    [Shareable]
    public class FilterMenuItem
    {
        [GraphQLDescription(@"Represents the name of the filter which should be used as a key while applying the filter .")]
        [GraphQLNonNullType]
        public string Key { get; set; }
        [GraphQLDescription(@"Represents the filter name. *e.g. ""Dairy, Eggs & Fridge"".")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Represents the display name of the filter which is including the products count. *e.g. ""Dairy, Eggs & Fridge (30)"".")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Represent whether the filter has applied or not.")]
        [GraphQLNonNullType]
        public bool IsApplied { get; set; }
        [GraphQLDescription(@"Represent the parentKey of the filter item.")]
        public string? ParentKey { get; set; }
        [GraphQLDescription(@"Represent whether the filter item has child filters or not.")]
        [GraphQLNonNullType]
        public bool HasChildren { get; set; }
    }

    [GraphQLDescription(@"A list of product filters.")]
    [Shareable]
    public class ProductFilter
    {
        [GraphQLDescription(@"Represents the name of the filter which should be used as a key while applying the filters.")]
        [GraphQLNonNullType]
        public string HeaderKey { get; set; }
        [GraphQLDescription(@"Represents the display name of the filter.")]
        [GraphQLNonNullType]
        public string HeaderTitle { get; set; }
        [GraphQLDescription(@"Represent the list of filters available. Default is [].")]
        [GraphQLNonNullType]
        public ICollection<FilterMenuItem> FilterItems { get; set; }
        [GraphQLDescription(@"Represents the information or the warning message about the filter.")]
        public InsetBanner? Banner { get; set; }
    }

    [GraphQLDescription(@"A list of sort options.")]
    [Shareable]
    public class ProductSortOption
    {
        [GraphQLDescription(@"Represents the key of the sort option which should be used while selecting the sort option .")]
        [GraphQLNonNullType]
        public string Key { get; set; }
        [GraphQLDescription(@"Represents the value of the sort option *e.g. ""Price"".")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Represents the ordering or more description of the sort option  *e.g. ""Low to High"".")]
        public string? Subtitle { get; set; }
        [GraphQLDescription(@"Represent whether the sort option is applied or not.")]
        [GraphQLNonNullType]
        public bool IsApplied { get; set; }
    }

    [GraphQLDescription(@"ProductCard contains high level information on a particular product")]
    [Shareable]
    public class ProductCard : IBundleItem, IProductDetailsFeedItem, IProductListFeed, IHorizontalListItem, ICatalogueBrowseCategoryPageItem, ICatalogueBrowsePromotionPageItem, ICatalogueListingItem, ICataloguePromotionDetailsItem, ICataloguePromotionGroupItem, ICataloguePromotionListingItem, IProductSectionFeedItem
    {
        [GraphQLDescription(@"A unique id that can be used to lookup product details.")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLDescription(@"The name of the product.")]
        [GraphQLNonNullType]
        public string Name { get; set; }
        [GraphQLDescription(@"A url pointing to image stored in Adobe target.")]
        public string? ProductImage { get; set; }
        [GraphQLDescription(@"Availability is calculated by determining if product is inStock **and** inRange.")]
        [GraphQLNonNullType]
        public bool IsAvailable { get; set; }
        [GraphQLDescription(@"Product availability with message and display information")]
        public InStoreAvailabilityInfo? InStoreAvailabilityInfo { get; set; }
        [GraphQLDescription(@"Used to verify whether a product has restrictions for specific types of users.
E.G.: Tobacco and Alcohol products cannot be added to the cart if the user is a GUEST
or UNDER 18 years of age.")]
        public PurchaseRestriction? PurchaseRestriction { get; set; }
        [GraphQLDescription(@"New products are tagged with isNew and this drives the ""new"" prefix added to the product tile. TBC duration of tag is 28 days.")]
        [GraphQLNonNullType]
        public bool IsNew { get; set; }
        [GraphQLDescription(@"Price including GST * 100 to avoid floating point issues.")]
        public int? Price { get; set; }
        [GraphQLDescription(@"Refers to the description of single unit e.g. ""each"", ""per kilo"", ""per 100ml"". Relates to CUP (Carton Unit Price) in apigee.")]
        public string? UnitPriceDescription { get; set; }
        [GraphQLDescription(@"Drives the roundel badge on the product image. URL points to sitemanagement for online mode and azure blog for instore mode.")]
        public string? BadgeImage { get; set; }
        [GraphQLDescription(@"Will be DEPRECATED: Points to `promotionInfo` in response(after it is updated for all APIs). e.g. ""Save $1 amount"" text to appear in promotion badge.")]
        [GraphQLDeprecated(@"Use `promotionInfo` after it is updated for all APIs.")]
        public string? PromotionValue { get; set; }
        [GraphQLDescription(@"Will be DEPRECATED: Points to `promotionInfo` in response(after it is updated for all APIs). Drives the styling of promotion badge.")]
        [GraphQLDeprecated(@"Use `promotionInfo` after it is updated for all APIs.")]
        public string? PromotionType { get; set; }
        [GraphQLDescription(@"Drives the styling and text to appear in promotion badge.
This field needs to be updated for all products related APIs, Currently it is updated only for product details API.")]
        public ProductPromotionInfo? PromotionInfo { get; set; }
        [GraphQLDescription(@"When something is on special e.g. 1/2 price, this is the original price.")]
        public string? WasPrice { get; set; }
        [GraphQLDescription(@"Warning to customer on the product list e.g. ""Bakery items""  has pm restriction ""must be purchased before midday"". Also applies to Tobacco + liquor + Chilled Items etc.")]
        public string? PurchaseWarning { get; set; }
        [GraphQLDescription(@"List contains the product quantity meta data which is used to add product to list")]
        [GraphQLNonNullType]
        public ProductShoppingList List { get; set; }
        [GraphQLDescription(@"Only available if mode is ONLINE or PICKUP. Represents the items currently added to users shopping cart.")]
        public ProductTrolley? Trolley { get; set; }
        [GraphQLDescription(@"Represents the quantity or weight option and increments when adding the items to cart.
Currently only used for NZ")]
        public ICollection<ProductTrolley>? Trolleys { get; set; }
        [GraphQLDescription(@"Only available if mode is INSTORE.")]
        [GraphQLDeprecated(@"Use `inStoreLocation.displayInfo` instead")]
        public ProductInStoreDetails? InStoreDetails { get; set; }
        [GraphQLDescription(@"Product location info only available if mode is INSTORE.")]
        public InStoreLocationInfo? InStoreLocation { get; set; }
        [GraphQLDescription(@"Price for multi buy labelling")]
        [GraphQLDeprecated(@"Use `multiBuyPriceInfo` as this field will be used for app versions prior to Project Slade Phase 1 and this field will hold information related to multi buy price label and Member Price for single-sell prodcts, BMSM products.")]
        public string? MultiBuyPrice { get; set; }
        [GraphQLDescription(@"Price for multi buy labelling that will be used after Project Slade Phase 2")]
        public MultiBuyPriceInfo? MultiBuyPriceInfo { get; set; }
        [GraphQLDescription(@"Member pricing")]
        [GraphQLDeprecated(@"Use `memberPriceInfo`. This field was introduced as part of Project Slade Phase 1 to add styling to Member Price for BMSM products")]
        public MemberPricingType? MemberPricingType { get; set; }
        [GraphQLDescription(@"Member Pricing for BMSM, Products without promotions that will be used after Project Slade Phase 2")]
        public MemberPriceInfo? MemberPriceInfo { get; set; }
        [GraphQLDescription(@"Unit price for multi buy labelling")]
        [GraphQLDeprecated(@"Use `multiBuyPriceInfo` as this field will be used for app versions prior to Project Slade Phase 1 and this field will hold information related to multi buy price label and Member Price for single-sell prodcts, BMSM products.")]
        public string? MultiBuyUnitPrice { get; set; }
        [GraphQLDescription(@"Drives the ""new"" pr ""sponsored"" prefix added to the product tile.")]
        public ICollection<ProductInlineLabel?>? InlineLabels { get; set; }
        [GraphQLDescription(@"Ad id for sponsored products. Used for client side tracking")]
        public string? AdId { get; set; }
        [GraphQLDescription(@"Contains additional info if for a marketplace product")]
        public ProductListMarketplace? Marketplace { get; set; }
        [GraphQLDescription(@"Contains rewards Offer info")]
        public RewardsOfferInfo? RewardsOfferInfo { get; set; }
        [GraphQLDescription(@"Contains info for rendering extra label")]
        public TagLabel? TagLabel { get; set; }
        [GraphQLDescription(@"Contains disclaimer text")]
        public string? Disclaimer { get; set; }
        [GraphQLDescription(@"Multi-variant products")]
        public ProductVarieties? ProductVarieties { get; set; }
        [GraphQLDescription(@"Product Categories")]
        public ICollection<ProductCategoryItem>? Categories { get; set; }
        [GraphQLDescription(@"Product source")]
        public string? Source { get; set; }
        [GraphQLDescription(@"Indicates if the product is a tobacco product")]
        [GraphQLNonNullType]
        public bool IsTobacco { get; set; }
        [GraphQLDescription(@"Is the product excluded from substitution")]
        public bool? IsExcludedFromSubstitution { get; set; }
        [GraphQLDescription(@"Additional fields on cart product(initially used for analytics)")]
        public CartProductInfo? CartProductInfo { get; set; }
        [GraphQLDescription(@"Base Analytics fields which will (initially) be used by HorizontalList.
* extraContent (key & value) - Used to send product details to Tealium")]
        public Analytics? ProductCardAnalytics { get; set; }
        [GraphQLDescription(@"If provided, the product card will perform the action when tapped")]
        public ActionData? ProductCardAction { get; set; }
        [GraphQLDescription(@"If provided, the product card will use this to display unit of measurement (e.g. kg/ea)
Currently only used for NZ")]
        public string? UnitOfMeasureLabel { get; set; }
    }

    [Shareable]
    public class ProductCategoryItem
    {
        public string? Name { get; set; }
        public int? CategoryLevel { get; set; }
    }

    [Shareable]
    public class ProductVarieties
    {
        [GraphQLNonNullType]
        public int TotalCount { get; set; }
        public string? Label { get; set; }
        [GraphQLNonNullType]
        public string PriceFamilyId { get; set; }
    }

    [GraphQLDescription(@"Represents the Product Promotion Details including the Type and Value of the product")]
    [Shareable]
    public class ProductPromotionInfo
    {
        [GraphQLDescription(@"Drives the styling or Type of the promotion badge.")]
        [GraphQLNonNullType]
        public ProductPromotionTypes Type { get; set; }
        [GraphQLDescription(@"Drives the text to appear in the promotion badge. e.g. ""Save $1 amount"".")]
        [GraphQLNonNullType]
        public string Label { get; set; }
    }

    [GraphQLDescription(@"Represents the rewards offer details")]
    [Shareable]
    public class RewardsOfferInfo
    {
        [GraphQLDescription(@"Offer id of rewards offer")]
        [GraphQLNonNullType]
        public string OfferId { get; set; }
        [GraphQLDescription(@"Offer expiry date to be shown to the user")]
        [GraphQLNonNullType]
        public string DisplayExpiry { get; set; }
        [GraphQLDescription(@"Offer minimum spend to be shown to the user")]
        public string? MinimumSpend { get; set; }
        [GraphQLDescription(@"Status of the offer")]
        [GraphQLNonNullType]
        public RewardsOfferStatus OfferStatus { get; set; }
        [GraphQLDescription(@"Status text to be shown to the user")]
        public string? DisplayStatus { get; set; }
        [GraphQLDescription(@"Analytics details of the rewards offer")]
        public RewardsOfferAnalytics? OfferAnalytics { get; set; }
        [GraphQLDescription(@"Button to Boost offer")]
        public Button? BoostButton { get; set; }
    }

    [GraphQLDescription(@"Represents the rewards offer analytics details")]
    [Shareable]
    public class RewardsOfferAnalytics
    {
        public string? OfferName { get; set; }
        public string? CampaignStream { get; set; }
        public string? Channel { get; set; }
        public string? Status { get; set; }
        public string? OfferType { get; set; }
        public string? PartnerId { get; set; }
        public string? RtlAccountID { get; set; }
        public string? RtlCampaignID { get; set; }
        public string? RtlCampaignCode { get; set; }
    }

    [GraphQLDescription(@"Represents the Product Quantities which can be added to Customer's shopping list")]
    [Shareable]
    public class ProductShoppingList
    {
        [GraphQLDescription(@"Minimum amount that can be added to list.")]
        [GraphQLNonNullType]
        public decimal Minimum { get; set; }
        [GraphQLDescription(@"Maximum amount that can be added to list.")]
        [GraphQLNonNullType]
        public decimal Maximum { get; set; }
        [GraphQLDescription(@"Increment for adding products to list.")]
        [GraphQLNonNullType]
        public decimal Increment { get; set; }
        [GraphQLDescription(@"Default amount to initialize the quantity selector when item is not already added to any list")]
        [GraphQLNonNullType]
        public decimal Default { get; set; }
        [GraphQLDescription(@"Measurement used for product.")]
        public string? Unit { get; set; }
    }

    [Shareable]
    public class InStoreAvailabilityInfo
    {
        [GraphQLDescription(@"Button for Instore product availability")]
        [GraphQLNonNullType]
        public Button Button { get; set; }
        [GraphQLDescription(@"Indicate current product availability status in store")]
        public string? Status { get; set; }
        [GraphQLDescription(@"More info to be displayed on the bottom sheet")]
        public InfoSheet? InfoSheet { get; set; }
    }

    [GraphQLDescription(@"Represents availability bottom sheet information")]
    [Shareable]
    public class InfoSheet
    {
        [GraphQLDescription(@"Title to be displayed on the pop screen")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Message to be displayed on the pop screen")]
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"Button to display Got it / ok")]
        [GraphQLNonNullType]
        public Button Button { get; set; }
    }

    [GraphQLDescription(@"Represents the items currently added to users shopping cart. Available if mode is ONLINE or PICKUP.")]
    [Shareable]
    public class ProductTrolley
    {
        [GraphQLDescription(@"Minimum amount that can be added to cart.")]
        [GraphQLNonNullType]
        public decimal Minimum { get; set; }
        [GraphQLDescription(@"Maximum amount that can be added to cart.")]
        [GraphQLNonNullType]
        public decimal Maximum { get; set; }
        [GraphQLDescription(@"Increment for adding products to cart.")]
        [GraphQLNonNullType]
        public decimal Increment { get; set; }
        [GraphQLDescription(@"Default amount of items to be added to cart.")]
        [GraphQLNonNullType]
        public decimal Default { get; set; }
        [GraphQLDescription(@"Represents how many products are currently in users cart. Comes from Trader downstream service.")]
        public decimal? InTrolley { get; set; }
        [GraphQLDescription(@"Measurement used for product.")]
        public string? Unit { get; set; }
        [GraphQLDescription(@"Add/Update/Unavailable determining style of the button")]
        [GraphQLNonNullType]
        public string ButtonState { get; set; }
        [GraphQLDescription(@"Add/Update/Unavailable what the text will be on the label.")]
        [GraphQLNonNullType]
        public string ButtonLabel { get; set; }
        [GraphQLDescription(@"The amount you can add to the cart. e.g. Update ""12"".")]
        public string? ButtonQuantity { get; set; }
        [GraphQLDescription(@"Used for displaying quantity or weight option title when adding items to card
Currently only used for NZ")]
        public string? Title { get; set; }
    }

    [GraphQLDescription(@"Only available when mode is INSTORE. Gives additional instore information on product - deprecated")]
    [Shareable]
    public class ProductInStoreDetails
    {
        [GraphQLDescription(@"Represents where in the store the product can be found. *e.g. ""Aisle 5""*.")]
        public string? LocationText { get; set; }
        [GraphQLDescription(@"Represents the category of the location.")]
        public InStoreLocationType? LocationType { get; set; }
    }

    [GraphQLDescription(@"Only available when mode is INSTORE. Labels to be displayed on the Product Card")]
    [Shareable]
    public class InStoreLocationDisplayInfo
    {
        [GraphQLDescription(@"Represents where in the store the product can be found. *e.g. ""Aisle 5""*.")]
        public string? LocationText { get; set; }
        [GraphQLDescription(@"Represents the category of the location. Used by FE to determine styling.")]
        public InStoreLocationType? LocationType { get; set; }
    }

    [GraphQLDescription(@"Represents the product location details from PLIS service.")]
    [Shareable]
    public class InStoreLocationDetails
    {
        [GraphQLDescription(@"x,y,z coordinates of the product location")]
        [GraphQLNonNullType]
        public decimal X { get; set; }
        [GraphQLNonNullType]
        public decimal Y { get; set; }
        [GraphQLNonNullType]
        public decimal Z { get; set; }
        [GraphQLNonNullType]
        public AisleSide AisleSide { get; set; }
        public string? Location { get; set; }
        [GraphQLNonNullType]
        public int AisleNumber { get; set; }
        [GraphQLNonNullType]
        public int BayNumber { get; set; }
        public int? BayNumberAlternate { get; set; }
        [GraphQLNonNullType]
        public int FloorNumber { get; set; }
    }

    [GraphQLDescription(@"Represents location info of Product in store.")]
    [Shareable]
    public class InStoreLocationInfo
    {
        [GraphQLDescription(@"SAAS product location will be displayed when details not available from PLIS")]
        public InStoreLocationDisplayInfo? DisplayInfo { get; set; }
        public InStoreLocationDetails? Details { get; set; }
    }

    [GraphQLDescription(@"Represents the Sponsored or New badge of the product.")]
    [Shareable]
    public class ProductInlineLabel
    {
        [GraphQLDescription(@"Represents the type of the label is Sponsored/New.")]
        [GraphQLNonNullType]
        public string Type { get; set; }
        [GraphQLDescription(@"Represents the text of the label for Sponsored/New products.")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Represents the priority of the label.")]
        public int? Priority { get; set; }
    }

    [GraphQLDescription(@"Represents a list of products")]
    [Shareable]
    public class ProductsInList
    {
        [GraphQLNonNullType]
        public ICollection<ProductCard> Products { get; set; }
    }

    [Shareable]
    public class DietaryDisclaimer : IProductListFeed
    {
        [GraphQLNonNullType]
        public InsetBanner InsetBanner { get; set; }
        public DietaryInfo? DietaryInfo { get; set; }
    }

    [Shareable]
    public class DietaryInfo
    {
        public string? Title { get; set; }
        public string? Content { get; set; }
    }

    [GraphQLName("ProductListFeed")]
    public interface IProductListFeed
    {
    }

    [GraphQLDescription(@"Represents ingredient status which is used for analysis")]
    [Shareable]
    public class IngredientAnalytics
    {
        [GraphQLNonNullType]
        public string Label { get; set; }
    }

    [GraphQLDescription(@"Represents a row that shows ingredient information")]
    [Shareable]
    public class IngredientCard : IProductListFeed
    {
        [GraphQLNonNullType]
        public string IngredientDetails { get; set; }
        public Button? SwapButton { get; set; }
        [GraphQLNonNullType]
        public ICollection<ProductCard> AlternativeProducts { get; set; }
        [GraphQLNonNullType]
        public IngredientAnalytics Analytics { get; set; }
    }

    [GraphQLDescription(@"Represents the list section header between product cards, it can also be used for divider like label which only has plain text
the type value is used by FE to style the text")]
    [Shareable]
    public class ListSectionHeader : IFoodTrackerContentItem, IProductListFeed
    {
        [GraphQLNonNullType]
        public ListSectionHeaderTypes ListSectionHeaderType { get; set; }
        [GraphQLNonNullType]
        public string ListSectionHeaderText { get; set; }
    }

    [GraphQLDescription(@"Represents a list of different analytics that are related to ProductList.")]
    [GraphQLName("ProductListAnalytics")]
    public interface IProductListAnalytics
    {
    }

    [GraphQLDescription(@"A paginated list of products.")]
    [Shareable]
    public class ProductList
    {
        [GraphQLDescription(@"Represents total sum of products available in database.")]
        public int? TotalNumberOfProducts { get; set; }
        [GraphQLDescription(@"Points to next page in response. Null if not page available.")]
        public int? NextPage { get; set; }
        [GraphQLDescription(@"DEPRECATED: Points to next page in response. Null if not page available.")]
        [GraphQLDeprecated(@"Use `nextPage`.")]
        public string? Cursor { get; set; }
        [GraphQLDescription(@"DEPRECATED: Represent a list of product cards.")]
        [GraphQLDeprecated(@"Use `productsFeed`.")]
        [GraphQLNonNullType]
        public ICollection<ProductCard> Products { get; set; }
        [GraphQLDescription(@"Represents a list of different components to be displayed in screen.")]
        [GraphQLNonNullType]
        public ICollection<IProductListFeed> ProductsFeed { get; set; }
        [GraphQLDescription(@"Represents a list of different analytics that may be related to ProductList.")]
        public ICollection<IProductListAnalytics>? Analytics { get; set; }
        [GraphQLDescription(@"Represent a list of product filters.")]
        [GraphQLNonNullType]
        public ICollection<ProductFilter> Filters { get; set; }
        [GraphQLDescription(@"Represent the list of sort options available. Default is [].")]
        [GraphQLNonNullType]
        public ICollection<ProductSortOption> SortOptions { get; set; }
        [GraphQLDescription(@"Optional Inset Banner under sort options on Filter screen")]
        public InsetBanner? SortOptionsBanner { get; set; }
        [GraphQLDescription(@"Represent the filter toggle of whether include marketplace products.")]
        public ProductFilterSwitch? MarketplaceFilterSwitch { get; set; }
        [GraphQLDescription(@"Message to display if the user is not logged in / mismatch of cards / any other custom errors")]
        [GraphQLNonNullType]
        public ICollection<ICustomMessageFeed> CustomMessages { get; set; }
        public InfoSection? MarketplaceInfo { get; set; }
        public MarketplaceEducationBottomSheet? MarketplaceBottomSheet { get; set; }
        public ICollection<Chip>? Chips { get; set; }
        [GraphQLDescription(@"List of facet chips to display. `null` if no facet chips are available.")]
        public ICollection<Chip>? FacetChips { get; set; }
        [GraphQLDescription(@"Use as Page Title (Only for dynamic Product Lists where title is not known upfront)")]
        public string? PageTitle { get; set; }
        [GraphQLDescription(@"Content to show when no products found on initial request")]
        public ProductListZeroResult? ZeroResultContent { get; set; }
    }

    [GraphQLName("ProductListZeroResultItem")]
    public interface IProductListZeroResultItem
    {
    }

    [Shareable]
    public class ProductListZeroResult
    {
        [GraphQLDescription(@"e.g. No result found for `<Search Term>`")]
        public string? Title { get; set; }
        [GraphQLDescription(@"e.g. Check the spelling or ...")]
        public string? Message { get; set; }
        [GraphQLDescription(@"One or more CTA")]
        [GraphQLNonNullType]
        public ICollection<IProductListZeroResultItem> Items { get; set; }
    }

    [GraphQLDescription(@"Categories section (e.g. Popular Categories)")]
    [Shareable]
    public class ZeroResultProductCategories : IProductListZeroResultItem
    {
        public string? ZeroResultProductCategoriesTitle { get; set; }
        [GraphQLDescription(@"List of category tiles")]
        [GraphQLNonNullType]
        public ICollection<ProductCategoryTile> ZeroResultProductCategoriesItems { get; set; }
    }

    [GraphQLDescription(@"Ad banner that comes may come from different sources (e.g. GAM, AEM)")]
    [GraphQLName("ProductListItemAdBanner")]
    public interface IProductListItemAdBanner
    {
    }

    [GraphQLDescription(@"Additional info for marketplace products")]
    [Shareable]
    public class ProductListMarketplace
    {
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string SellerName { get; set; }
        [GraphQLNonNullType]
        public string BrandName { get; set; }
        public bool? IsFreeShipping { get; set; }
        public decimal? FreightAmount { get; set; }
        public bool? IsUndeliverable { get; set; }
        public string? Postcode { get; set; }
    }

    [Shareable]
    public class Chip
    {
        [GraphQLDescription(@"Identifier used by BFF to associate chip to action")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLDescription(@"Is the chip selected")]
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLDescription(@"Text to be displayed in chip,
  including Accessibility text, for example ""See specials only""")]
        [GraphQLNonNullType]
        public TextWithAlt Text { get; set; }
        [GraphQLDescription(@"number of products matching filter chip")]
        public int? Count { get; set; }
    }

    [GraphQLDescription(@"Multi buy price that will be used by Apps after Project Slade phase 2")]
    [Shareable]
    public class MultiBuyPriceInfo
    {
        [GraphQLDescription(@"Multi buy price for BMSM products")]
        [GraphQLNonNullType]
        public string Price { get; set; }
        [GraphQLDescription(@"Unit Price for BMSM products.
Optional - to handle scenarios where unit price is not available.")]
        public string? UnitPrice { get; set; }
    }

    [GraphQLDescription(@"Member price details that will be used by Apps after Project Slade phase 2")]
    [Shareable]
    public class MemberPriceInfo
    {
        [GraphQLDescription(@"Member price label (e.g., Member Price)")]
        [GraphQLNonNullType]
        public string Header { get; set; }
        [GraphQLDescription(@"single-sell products
BMSM:  Buy More Save More promotional products
For single-sell products, it will be price of a single product
For BMSM products to show multi buy Price label, it will be price of group of products")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Unit price of the product.
Optional - to handle scenarios where unit price is not available.")]
        public string? Subtitle { get; set; }
    }

    [Shareable]
    public class CategoryAndEventsPage : IGenericPage
    {
        [GraphQLDescription(@"List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. opemBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class CategoryAndEventsPageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"represents page title")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"represents hero image url
optional field, usually only one hero image in a page")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [Shareable]
    public class CategoryMenuItem
    {
        [GraphQLNonNullType]
        public string CategoryId { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string HeaderTitle { get; set; }
        [GraphQLNonNullType]
        public string DisplayOrder { get; set; }
        public string? IconUrl { get; set; }
        [GraphQLNonNullType]
        public bool IsFinalLevel { get; set; }
        [GraphQLDescription(@"category navigation path for product source
eg: Aisle.Pantry.Baking for Baking category object")]
        public string? Source { get; set; }
    }

    [Shareable]
    public class MarketplaceCategoriesInfo
    {
        [GraphQLNonNullType]
        public ProductListChannelType Channel { get; set; }
        [GraphQLNonNullType]
        public ProductListFacetType Facet { get; set; }
    }

    [Shareable]
    public class ProductCategories
    {
        [GraphQLNonNullType]
        public string HeaderTitle { get; set; }
        [GraphQLNonNullType]
        public int TotalNumberOfCategories { get; set; }
        [GraphQLNonNullType]
        public int Level { get; set; }
        public ICollection<CategoryMenuItem>? Categories { get; set; }
        [GraphQLNonNullType]
        public MarketplaceCategoriesInfo Marketplace { get; set; }
    }

    [Shareable]
    public class SpecialMenuItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public int ProductCount { get; set; }
        public string? FilterName { get; set; }
        [GraphQLNonNullType]
        public bool IsClickable { get; set; }
        public string? AdTargeting { get; set; }
    }

    [Shareable]
    public class SpecialCategories
    {
        public CatalogueCard? Catalogue { get; set; }
        [GraphQLNonNullType]
        public string HeaderTitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<SpecialMenuItem> Categories { get; set; }
    }

    [Shareable]
    public class ProductCategoryTile : IHorizontalListItem
    {
        [GraphQLDescription(@"When user tap a tile")]
        [GraphQLNonNullType]
        public ActionData ProductCategoryTileAction { get; set; }
        [GraphQLDescription(@"Category Image (Absolute URL)")]
        [GraphQLNonNullType]
        public string ProductCategoryTileImageUrl { get; set; }
        [GraphQLDescription(@"Category label")]
        [GraphQLNonNullType]
        public string ProductCategoryTileLabel { get; set; }
        [GraphQLDescription(@"Category Tile Size (default: DEFAULT)")]
        public ProductCategoryTileSize? ProductCategoryTileSize { get; set; }
    }

    [Shareable]
    public class BoostTagProductOffersResponse
    {
        public ICollection<BoostOfferResponse>? BoostOffers { get; set; }
    }

    [Shareable]
    public class BoostOfferResponse
    {
        [GraphQLNonNullType]
        public string OfferId { get; set; }
        [GraphQLNonNullType]
        public bool Success { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        public RewardsOfferInfo? Info { get; set; }
    }

    [Shareable]
    public class ProductReviewResponse : IProductReviewResult
    {
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public ICollection<IProductReviewFeedItem> Feed { get; set; }
        [GraphQLNonNullType]
        public ICollection<Analytics> Analytics { get; set; }
    }

    [GraphQLName("ProductReviewFeedItem")]
    public interface IProductReviewFeedItem
    {
    }

    [Shareable]
    public class ProductReviewGroup : IProductReviewFeedItem
    {
        [GraphQLNonNullType]
        public InsetBanner Banner { get; set; }
        [GraphQLNonNullType]
        public ProductReviewGroupType Type { get; set; }
        [GraphQLNonNullType]
        public ICollection<ProductReviewCard> Products { get; set; }
        [GraphQLNonNullType]
        public Analytics Analytics { get; set; }
    }

    [Shareable]
    public class ProductReviewAlternative
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Type of product alternatives")]
        [GraphQLNonNullType]
        public ProductReviewAlternativeType Type { get; set; }
    }

    [GraphQLDescription(@"Product review card for cart and checkout products that are restricted or unavailable")]
    [Shareable]
    public class ProductReviewCard
    {
        [GraphQLDescription(@"Product name")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Product stockcode")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLDescription(@"Current quantity in cart")]
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }
        [GraphQLDescription(@"Product image")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"OOS badge")]
        public Badge? Badge { get; set; }
        [GraphQLDescription(@"Quantity information for quantity selector")]
        public CartProductQuantityInfo? QuantityInfo { get; set; }
        [GraphQLDescription(@"The total price")]
        public int? Price { get; set; }
        [GraphQLDescription(@"Is the product available (true or false)")]
        [GraphQLNonNullType]
        public bool IsAvailable { get; set; }
        [GraphQLDescription(@"Product alternatives for restricted or out of stock products")]
        public ProductReviewAlternative? Alternative { get; set; }
        [GraphQLDescription(@"The unit price of the product")]
        public string? UnitPrice { get; set; }
        [GraphQLDescription(@"New text to display available limit for ATP/Trader limit restrictions")]
        public string? AvailableLimit { get; set; }
    }

    [GraphQLName("ProductReviewResult")]
    public interface IProductReviewResult
    {
    }

    [Shareable]
    public class ProductReviewError : IProductReviewResult
    {
        [GraphQLDescription(@"Errors when trying to update products")]
        public ICollection<UpdateProductReviewProductQuantitiesError>? Errors { get; set; }
    }

    [Shareable]
    public class UpdateProductReviewProductQuantitiesError
    {
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        public string? Message { get; set; }
    }

    [GraphQLDescription(@"Empty state response, indicating if review is required")]
    [Shareable]
    public class ProductReviewEmpty : IProductReviewResult
    {
        [GraphQLNonNullType]
        public bool RequiresProductReview { get; set; }
    }

    [Shareable]
    public class SubstitutionPreferenceFooter
    {
        [GraphQLNonNullType]
        public Button Button { get; set; }
    }

    [Shareable]
    public class SubstitutionPreferenceResponse
    {
        [GraphQLNonNullType]
        public ProductToBeSubstituteSection ProductToBeSubstituteSection { get; set; }
        [GraphQLNonNullType]
        public CheaperSubstitutesSection CheaperSubstitutesSection { get; set; }
        [GraphQLNonNullType]
        public SubstitutionPreferenceOptionsSection SubstitutionPreferenceOptionsSection { get; set; }
        [GraphQLNonNullType]
        public ProductSubstitutesSection ProductSubstitutesSection { get; set; }
        [GraphQLNonNullType]
        public SubstitutionPreferenceFooter SubstitutionPreferenceFooter { get; set; }
    }

    [Shareable]
    public class CheaperSubstitutesSection
    {
        [GraphQLNonNullType]
        public BroadcastBanner Banner { get; set; }
    }

    [Shareable]
    public class ProductSubstitutesSection
    {
        public ICollection<ProductSubstitute>? Substitutions { get; set; }
    }

    [Shareable]
    public class ProductSubstitute
    {
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }
        [GraphQLNonNullType]
        public string Name { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
    }

    [Shareable]
    public class ProductToBeSubstituteSection
    {
        [GraphQLNonNullType]
        public string Name { get; set; }
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
    }

    [Shareable]
    public class SubstitutionPreferenceOptionsSection
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public InsetBanner? InsetBanner { get; set; }
        [GraphQLNonNullType]
        public ICollection<SubstitutionPreferenceOption> Items { get; set; }
    }

    [Shareable]
    public class SubstitutionPreferenceOption
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public bool ShowProducts { get; set; }
        [GraphQLNonNullType]
        public bool IsEnabled { get; set; }
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        public string? Description { get; set; }
    }

    [Shareable]
    public class UpdateSubstitutionPreferencesSuccessResponse : IUpdateSubstitutionPreferencesResponse
    {
        [GraphQLNonNullType]
        public bool IsSuccess { get; set; }
    }

    [GraphQLName("UpdateSubstitutionPreferencesResponse")]
    public interface IUpdateSubstitutionPreferencesResponse
    {
    }

    [GraphQLDescription(@"Represents a shop event")]
    [Shareable]
    public class PastshopEvent
    {
        [GraphQLDescription(@"Unique id of a Past Shop event, if no Id, means ""Everything I've ever bought"" cell")]
        public int? Id { get; set; }
        [GraphQLDescription(@"Unique id of purchase history representing past shops events")]
        public string? BasketID { get; set; }
        [GraphQLDescription(@"Pastshop title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [GraphQLDescription(@"A paginated list of pastshops events")]
    [Shareable]
    public class PastshopList
    {
        [GraphQLDescription(@"Represents total sum of pastshop events")]
        [GraphQLNonNullType]
        public int TotalItemCount { get; set; }
        [GraphQLDescription(@"Points to next page in response. Null if not page available.")]
        public int? NextPage { get; set; }
        [GraphQLDescription(@"Represent a list of pastshop event.")]
        [GraphQLNonNullType]
        public ICollection<PastshopEvent> Items { get; set; }
    }

    [GraphQLDescription(@"Represents a purchase history event")]
    [Shareable]
    public class PurchaseHistoryEvent
    {
        [GraphQLDescription(@"Unique id of a purchase history event, if no Id, means ""Everything I've ever bought"" cell")]
        [ID]
        public string? BasketID { get; set; }
        [GraphQLDescription(@"title to represents the date, e.g. ""23rd of Feb 2022""")]
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [GraphQLDescription(@"A paginated list of purchase history events")]
    [Shareable]
    public class PurchaseHistoryList
    {
        [GraphQLDescription(@"Represents total sum of purchase history events")]
        [GraphQLNonNullType]
        public int TotalItemCount { get; set; }
        [GraphQLDescription(@"Points to next page in response. Null if not page available.")]
        public int? NextPage { get; set; }
        [GraphQLDescription(@"Represent a list of purchase history event.")]
        [GraphQLNonNullType]
        public ICollection<PurchaseHistoryEvent> Items { get; set; }
    }

    [GraphQLDescription(@"Ratings details section of preview response")]
    [Shareable]
    public class RatingsAndReviewsRatingsDetails : IRatingsAndReviewsPreviewSections
    {
        [GraphQLDescription(@"Ratings section")]
        [GraphQLNonNullType]
        public ICollection<IRatingsAndReviewsRatingDistribution> Sections { get; set; }
    }

    [GraphQLDescription(@"Review item of ratings details section")]
    [Shareable]
    public class RatingsAndReviewsReviewItem
    {
        [GraphQLDescription(@"Sections of ratings and reviews review item")]
        [GraphQLNonNullType]
        public ICollection<IRatingsAndReviewsReviewItemSections> Sections { get; set; }
    }

    [GraphQLDescription(@"Review details section")]
    [Shareable]
    public class RatingsAndReviewsReviewDetails : IRatingsAndReviewsPreviewSections
    {
        [GraphQLDescription(@"Review items")]
        [GraphQLNonNullType]
        public ICollection<RatingsAndReviewsReviewItem> Items { get; set; }
    }

    [GraphQLDescription(@"Union type for ratings and reviews review item sections")]
    [GraphQLName("RatingsAndReviewsReviewItemSections")]
    public interface IRatingsAndReviewsReviewItemSections
    {
    }

    [GraphQLDescription(@"Overall rating section of review item")]
    [Shareable]
    public class RatingsAndReviewsReviewItemRating : IRatingsAndReviewsReviewItemSections
    {
        [GraphQLDescription(@"Rating score
e.g. 4")]
        [GraphQLNonNullType]
        public int Rating { get; set; }
        [GraphQLDescription(@"Maximum ratings the rating system can have")]
        [GraphQLNonNullType]
        public int MaximumRating { get; set; }
        [GraphQLDescription(@"Verified text")]
        public string? Text { get; set; }
    }

    [GraphQLDescription(@"Review title section of review item")]
    [Shareable]
    public class RatingsAndReviewsReviewItemReviewTitle : IRatingsAndReviewsReviewItemSections
    {
        [GraphQLDescription(@"e.g. Easy, refreshing, and effective")]
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [GraphQLDescription(@"Recommendation section of review item")]
    [Shareable]
    public class RatingsAndReviewsReviewItemRecommendation : IRatingsAndReviewsReviewItemSections
    {
        [GraphQLDescription(@"Recommendation text
e.g. Yes, I recommend this product")]
        public string? Text { get; set; }
    }

    [GraphQLDescription(@"Review info section of review item")]
    [Shareable]
    public class RatingsAndReviewsReviewItemInfo : IRatingsAndReviewsReviewItemSections
    {
        [GraphQLDescription(@"User name")]
        [GraphQLNonNullType]
        public string UserName { get; set; }
        [GraphQLDescription(@"Display when the review conducted
e.g. 5 days ago")]
        [GraphQLNonNullType]
        public DateTimeOffset CreatedAt { get; set; }
    }

    [GraphQLDescription(@"Review body section of review item")]
    [Shareable]
    public class RatingsAndReviewsReviewItemBody : IRatingsAndReviewsReviewItemSections
    {
        [GraphQLDescription(@"Review body content")]
        [GraphQLNonNullType]
        public string Content { get; set; }
    }

    [GraphQLDescription(@"Union type for ratings and reviews rating distribution")]
    [GraphQLName("RatingsAndReviewsRatingDistribution")]
    public interface IRatingsAndReviewsRatingDistribution
    {
    }

    [GraphQLDescription(@"Write review section of rating distribution")]
    [Shareable]
    public class RatingsAndReviewsRatingDistributionWriteReview : IRatingsAndReviewsRatingDistribution
    {
        [GraphQLNonNullType]
        public Button Button { get; set; }
    }

    [GraphQLDescription(@"Overview section of rating distribution")]
    [Shareable]
    public class RatingsAndReviewsRatingDistributionOverview : IRatingsAndReviewsRatingDistribution
    {
        [GraphQLDescription(@"Average ratings
e.g. 3.7")]
        [GraphQLNonNullType]
        public decimal AverageRating { get; set; }
        [GraphQLDescription(@"how many stars frontend need to render based on the averageRatings")]
        [GraphQLNonNullType]
        public decimal DisplayRatings { get; set; }
        [GraphQLDescription(@"Average ratings text of the product")]
        [GraphQLNonNullType]
        public TextWithAlt RatingText { get; set; }
        [GraphQLDescription(@"Maximum ratings the rating system can have
used for rendering the max number of rating stars in frontend")]
        [GraphQLNonNullType]
        public int MaximumRating { get; set; }
        [GraphQLDescription(@"Total number of reviews text
e.g. 41 reviews")]
        [GraphQLNonNullType]
        public string TotalReviewsText { get; set; }
        [GraphQLDescription(@"Call to action item for rating distribution")]
        public Link? Cta { get; set; }
    }

    [GraphQLDescription(@"Details section of rating distribution")]
    [Shareable]
    public class RatingsAndReviewsRatingDistributionDetails : IRatingsAndReviewsRatingDistribution
    {
        [GraphQLDescription(@"Ratings distribution items")]
        [GraphQLNonNullType]
        public ICollection<RatingsDistributionItem> Items { get; set; }
    }

    [GraphQLDescription(@"Ratings distribution item")]
    [Shareable]
    public class RatingsDistributionItem
    {
        [GraphQLDescription(@"Rating distribution score
e.g. 5")]
        [GraphQLNonNullType]
        public string RatingScore { get; set; }
        [GraphQLDescription(@"Rating distribution percentage
e.g. 0.75")]
        [GraphQLNonNullType]
        public decimal Percentage { get; set; }
        [GraphQLDescription(@"Rating distribution count for a certain distribution score")]
        [GraphQLNonNullType]
        public string RatingCount { get; set; }
    }

    [GraphQLDescription(@"Ratings and reviews details response")]
    [Shareable]
    public class RatingsAndReviewsDetailsResponse
    {
        [GraphQLDescription(@"Ratings and reviews ratings details")]
        public RatingsAndReviewsRatingsDetails? Ratings { get; set; }
        [GraphQLDescription(@"Ratings and reviews reviews details")]
        [GraphQLNonNullType]
        public ICollection<RatingsAndReviewsReviewItem> Reviews { get; set; }
        [GraphQLDescription(@"Call to action item for ""Write a review""")]
        public Link? Cta { get; set; }
        [GraphQLDescription(@"Ratings and reviews page info")]
        public RatingsAndReviewsPageInfo? PageInfo { get; set; }
    }

    [GraphQLDescription(@"Ratings and reviews page info")]
    [Shareable]
    public class RatingsAndReviewsPageInfo
    {
        [GraphQLDescription(@"Points to next page in response. Null if reaching end of page")]
        public int? NextPage { get; set; }
    }

    [Shareable]
    public class RatingsAndReviewsPreviewResponse
    {
        [GraphQLDescription(@"Sections of ratings and reviews preview response")]
        [GraphQLNonNullType]
        public ICollection<IRatingsAndReviewsPreviewSections> Sections { get; set; }
    }

    [GraphQLDescription(@"Union type for ratings and reviews preview sections")]
    [GraphQLName("RatingsAndReviewsPreviewSections")]
    public interface IRatingsAndReviewsPreviewSections
    {
    }

    [GraphQLDescription(@"Ratings and reviews preview CTA section")]
    [Shareable]
    public class RatingsAndReviewsPreviewCta : IRatingsAndReviewsPreviewSections
    {
        [GraphQLNonNullType]
        public Button Button { get; set; }
    }

    [GraphQLDescription(@"Ratings and reviews preview ratings details section")]
    [Shareable]
    public class RatingsAndReviewsPreviewHeader : IRatingsAndReviewsPreviewSections
    {
        [GraphQLDescription(@"Ratings and reviews preview header title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Ratings and reviews preview header subtitle")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
    }

    [GraphQLDescription(@"Response type for the submitProductReview mutation.")]
    [Shareable]
    public class SubmitProductReviewResponse
    {
        [GraphQLDescription(@"Indicates if the submission was successful.")]
        [GraphQLNonNullType]
        public bool Success { get; set; }
        [GraphQLDescription(@"A message associated with the submission result, e.g., success or failure reason.")]
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"Optional error field to provide error details if the submission failed.")]
        public SubmitProductResponseError? Error { get; set; }
    }

    [GraphQLDescription(@"Error type detailing what went wrong in case of a failure.")]
    [Shareable]
    public class SubmitProductResponseError
    {
        [GraphQLDescription(@"code identifying the type of error.")]
        [GraphQLNonNullType]
        public string Code { get; set; }
        [GraphQLDescription(@"message describing the error.")]
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [GraphQLDescription(@"Response type for writeReviewForm.")]
    [Shareable]
    public class WriteReviewFormResponse
    {
        [GraphQLDescription(@"The title of the page, e.g. 'Write review'.")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"Sections of the write review form.")]
        [GraphQLNonNullType]
        public ICollection<IWriteReviewFormSections> Sections { get; set; }
        [GraphQLDescription(@"submit button")]
        [GraphQLNonNullType]
        public Button SubmitButton { get; set; }
    }

    [GraphQLDescription(@"Union of different sections that can be part of the write review form.")]
    [GraphQLName("WriteReviewFormSections")]
    public interface IWriteReviewFormSections
    {
    }

    [GraphQLDescription(@"Review section items")]
    [Shareable]
    public class WriteReviewFormReview : IWriteReviewFormSections
    {
        [GraphQLNonNullType]
        public ICollection<IWriteReviewFormReviewItem> Items { get; set; }
    }

    [GraphQLDescription(@"Union of Review section items")]
    [GraphQLName("WriteReviewFormReviewItem")]
    public interface IWriteReviewFormReviewItem
    {
    }

    [GraphQLDescription(@"Displays the target product for the review.")]
    [Shareable]
    public class WriteReviewFormTargetProduct : IWriteReviewFormSections
    {
        [GraphQLDescription(@"Details of the product.")]
        [GraphQLNonNullType]
        public ProductCard Product { get; set; }
        [GraphQLDescription(@"Alternative text for the product")]
        [GraphQLNonNullType]
        public string AltText { get; set; }
    }

    [GraphQLDescription(@"Instructs the UI to insert a horizontal divider")]
    [Shareable]
    public class WriteReviewFormDivider
    {
        public bool? _ { get; set; }
    }

    [GraphQLDescription(@"Represents a title section in the form.")]
    [Shareable]
    public class WriteReviewFormReviewItemTitle : IWriteReviewFormReviewItem
    {
        [GraphQLDescription(@"Title text for a section, e.g. 'Review'.")]
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [GraphQLDescription(@"Ratings section of the review form.")]
    [Shareable]
    public class WriteReviewFormRatings : IWriteReviewFormReviewItem
    {
        [GraphQLDescription(@"Title for the ratings section, e.g. 'How would you rate this product overall'.")]
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [GraphQLDescription(@"Field for entering the title of the review.")]
    [Shareable]
    public class WriteReviewFormReviewTitle : IWriteReviewFormReviewItem, ITextField
    {
        [GraphQLDescription(@"Label for the review title field, e.g. 'Review title'.")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Indicates if the field is optional, e.g. false.")]
        [GraphQLNonNullType]
        public bool IsOptional { get; set; }
        [GraphQLDescription(@"Minimum character count for the review title.")]
        public int? MinCharacterCount { get; set; }
        [GraphQLDescription(@"Maximum character count for the review title.")]
        [GraphQLNonNullType]
        public int MaxCharacterCount { get; set; }
        [GraphQLDescription(@"help text field for the input")]
        public string? HelpText { get; set; }
        [GraphQLDescription(@"placeholderText field for the input")]
        public string? PlaceholderText { get; set; }
    }

    [GraphQLDescription(@"Field for entering the main body of the review.")]
    [Shareable]
    public class WriteReviewFormReviewBody : IWriteReviewFormReviewItem, ITextArea
    {
        [GraphQLDescription(@"Label for the review body field, e.g. 'Review'.")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Indicates if the field is optional, e.g. false.")]
        [GraphQLNonNullType]
        public bool IsOptional { get; set; }
        [GraphQLDescription(@"Minimum character count for the review body.")]
        public int? MinCharacterCount { get; set; }
        [GraphQLDescription(@"Maximum character count for the review body.")]
        [GraphQLNonNullType]
        public int MaxCharacterCount { get; set; }
        [GraphQLDescription(@"help text field for the input")]
        public string? HelpText { get; set; }
        [GraphQLDescription(@"placeholderText field for the input")]
        public string? PlaceholderText { get; set; }
    }

    [GraphQLDescription(@"Field for entering the reviewer's name or nickname.")]
    [Shareable]
    public class WriteReviewFormNameField : IWriteReviewFormReviewItem, ITextField
    {
        [GraphQLDescription(@"Label for the name field, e.g. 'Public name'.")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Indicates if the field is optional, e.g. false.")]
        [GraphQLNonNullType]
        public bool IsOptional { get; set; }
        [GraphQLDescription(@"Minimum character count for the name field.")]
        public int? MinCharacterCount { get; set; }
        [GraphQLDescription(@"Maximum character count for the name field.")]
        [GraphQLNonNullType]
        public int MaxCharacterCount { get; set; }
        [GraphQLDescription(@"Help text for the name field, e.g. 'Visible to public'.")]
        public string? HelpText { get; set; }
        [GraphQLDescription(@"placeholderText field for the input")]
        public string? PlaceholderText { get; set; }
    }

    [GraphQLDescription(@"Terms and conditions section of the review form.")]
    [Shareable]
    public class WriteReviewFormTermsConditions : IWriteReviewFormSections
    {
        [GraphQLDescription(@"Markdown text for terms and conditions, e.g. 'I agree to the [**Terms and Conditions**](https://...)'.")]
        public string? MarkdownText { get; set; }
        [GraphQLDescription(@"Additional terms text, e.g. 'You may receive emails regarding this submission. Any emails will include the ability to opt-out of future communications.'.")]
        public string? AdditionalTermsText { get; set; }
    }

    [GraphQLDescription(@"Submit button for the review form.")]
    [Shareable]
    public class WriteReviewFormSubmitButton
    {
        [GraphQLDescription(@"Details of the submit button.")]
        [GraphQLNonNullType]
        public Button Button { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsHeader : IReceiptDetailsItem
    {
        public string? IconUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Content { get; set; }
        public string? StoreNo { get; set; }
        public string? Division { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsTotal : IReceiptDetailsItem
    {
        [GraphQLNonNullType]
        public string Total { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsLineItem
    {
        public string? PrefixChar { get; set; }
        [GraphQLNonNullType]
        public string Description { get; set; }
        public string? Amount { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsSavings : IReceiptDetailsItem
    {
        [GraphQLNonNullType]
        public string Savings { get; set; }
        [GraphQLNonNullType]
        public ICollection<ReceiptDetailsLineItem> SummaryItems { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsBarcode
    {
        [GraphQLNonNullType]
        public string Value { get; set; }
        public string? Type { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsCouponSection
    {
        public string? SectionTitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> Details { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsCoupon : IReceiptDetailsItem
    {
        public string? HeaderImageUrl { get; set; }
        [GraphQLNonNullType]
        public ICollection<ReceiptDetailsCouponSection> Sections { get; set; }
        public string? Footer { get; set; }
        public ReceiptDetailsBarcode? Barcode { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsFooter : IReceiptDetailsItem
    {
        public ReceiptDetailsBarcode? Barcode { get; set; }
        [GraphQLNonNullType]
        public string TransactionDetails { get; set; }
        [GraphQLNonNullType]
        public string AbnAndStore { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsSummary : IReceiptDetailsItem
    {
        [GraphQLNonNullType]
        public ICollection<ReceiptDetailsLineItem> Discounts { get; set; }
        [GraphQLNonNullType]
        public ICollection<ReceiptDetailsLineItem> SummaryItems { get; set; }
        public ReceiptDetailsLineItem? Gst { get; set; }
        [GraphQLNonNullType]
        public ReceiptDetailsLineItem ReceiptTotal { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsInfo : IReceiptDetailsItem
    {
        [GraphQLNonNullType]
        public ReceiptDetailsLineItem Header { get; set; }
        [GraphQLNonNullType]
        public ICollection<ReceiptDetailsLineItem> Info { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsItems : IReceiptDetailsItem
    {
        [GraphQLNonNullType]
        public ReceiptDetailsLineItem Header { get; set; }
        [GraphQLNonNullType]
        public ICollection<ReceiptDetailsLineItem> Items { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsPaymentInfo
    {
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsPayment
    {
        [GraphQLNonNullType]
        public ICollection<ReceiptDetailsPaymentInfo> Details { get; set; }
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLNonNullType]
        public string Amount { get; set; }
        public string? IconUrl { get; set; }
        public string? AltText { get; set; }
    }

    [Shareable]
    public class ReceiptDetailsPayments : IReceiptDetailsItem
    {
        [GraphQLNonNullType]
        public ICollection<ReceiptDetailsPayment> Payments { get; set; }
    }

    [Shareable]
    public class ReceiptAnalytics
    {
        [GraphQLNonNullType]
        public string PartnerName { get; set; }
    }

    [GraphQLName("ReceiptDetailsItem")]
    public interface IReceiptDetailsItem
    {
    }

    [Shareable]
    public class ReceiptDownload
    {
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLNonNullType]
        public string Filename { get; set; }
    }

    [Shareable]
    public class ReceiptDetails
    {
        public ReceiptDownload? Download { get; set; }
        [GraphQLNonNullType]
        public ICollection<IReceiptDetailsItem> Details { get; set; }
        [GraphQLNonNullType]
        public ReceiptAnalytics Analytics { get; set; }
    }

    [Shareable]
    public class ReceiptListPageInfo
    {
        public int? NextPage { get; set; }
    }

    [Shareable]
    public class ReceiptFeedGroupHeader : IReceiptFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class ReceiptItem : IReceiptFeedItem
    {
        [GraphQLDescription(@"id is encrypted to consist basketKey+card+banner")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string DisplayDate { get; set; }
        [GraphQLNonNullType]
        public string DisplayValue { get; set; }
    }

    [GraphQLName("ReceiptFeedItem")]
    public interface IReceiptFeedItem
    {
    }

    [Shareable]
    public class ReceiptsList
    {
        [GraphQLNonNullType]
        public ICollection<IReceiptFeedItem> Items { get; set; }
        [GraphQLNonNullType]
        public ReceiptListPageInfo PageInfo { get; set; }
    }

    [Shareable]
    public class Badge
    {
        [GraphQLDescription(@"label that is shown in the badge")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"altLabel will hold the string that is shown to the user along with 
text that is ready by screen reader for accessibility")]
        public TextWithAlt? AltLabel { get; set; }
        [GraphQLDescription(@"type of badge used to apply different background colours based on BadgeType")]
        [GraphQLNonNullType]
        public BadgeType Type { get; set; }
    }

    [Shareable]
    public class IconTextBanner : IOrderConfirmationContentSegment
    {
        [GraphQLDescription(@"[URL](https://woolworthsdigital.atlassian.net/wiki/spaces/Market/pages/25800148254/Order+Confirmation#Delivery-Unlimited) details.")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class ContentCta
    {
        [GraphQLNonNullType]
        public string Label { get; set; }
        public string? Url { get; set; }
        public Analytics? OnCtaClickAnalytics { get; set; }
    }

    [GraphQLName("BottomSheetContent")]
    public interface IBottomSheetContent
    {
        [GraphQLNonNullType]
        string BottomSheetTitle { get; set; }
        [GraphQLNonNullType]
        string BottomSheetBody { get; set; }
        bool? ShowOnceOnly { get; set; }
        DownloadableAsset? BannerAsset { get; set; }
        ContentCta? PrimaryCta { get; set; }
        ContentCta? SecondaryCta { get; set; }
    }

    [Shareable]
    public class DismissBottomSheetResultSuccess
    {
        public bool? _ { get; set; }
    }

    [Shareable]
    public class BroadcastBanner : IHomeFeed, IMoreFeedItem, IOrderProductListFeedItem, IGenericPageFeedItem, IFulfilmentExtraInfoContent
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public string? Deeplink { get; set; }
        [GraphQLNonNullType]
        public BroadcastBannerType Type { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        public string? ActionLabel { get; set; }
        public string? AnalyticsLabel { get; set; }
        public bool? Dismissible { get; set; }
        public string? BannerId { get; set; }
    }

    [Shareable]
    public class Button : IShoppingModeSelectorOptionFulfilmentSection, IShoppingModeVariantFulfilmentWindowSection, IFeedItem, IGenericPageFeedItem
    {
        public string? ButtonId { get; set; }
        [GraphQLNonNullType]
        public string Label { get; set; }
        public ButtonStyle? Style { get; set; }
        [GraphQLNonNullType]
        public bool Enabled { get; set; }
        [GraphQLDescription(@"Any free form string eg. submit/cancel/add-to-cart etc
If url field is used, set action to LINK")]
        [GraphQLDeprecated(@"Please ask your BFF dev to start using `Button.buttonAction` to adapt to generic implementation of action of any component")]
        public string? Action { get; set; }
        [GraphQLDescription(@"Deeplink url")]
        [GraphQLDeprecated(@"Please ask your BFF dev to start using `Button.buttonAction` to adapt to generic implementation of action of any component")]
        public string? Url { get; set; }
        [GraphQLDescription(@"Generic way of defining the action of a button.")]
        public ActionData? ButtonAction { get; set; }
        [GraphQLDescription(@"return the image for the button if it's a image button")]
        public string? IconUrl { get; set; }
        [GraphQLDescription(@"Text to be read out by screen reader")]
        public string? AltText { get; set; }
        [GraphQLDescription(@"Optional analytics object for APP")]
        public ButtonAnalytics? Analytics { get; set; }
    }

    [Shareable]
    public class TagLabel
    {
        [GraphQLDescription(@"label text e.g. ""Unavailable in App"" ""Unavailable"" ""Featured""")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"label style")]
        public TagStyle? Style { get; set; }
    }

    [GraphQLDescription(@"Type to provide custom analytics for Button")]
    [Shareable]
    public class ButtonAnalytics
    {
        [GraphQLDescription(@"Used to populate event.Label")]
        public string? Label { get; set; }
    }

    [GraphQLDescription(@"Chat Entry Card used in Specials Home Screen")]
    [Shareable]
    public class ChatEntryCard : IGenericPageFeedItem
    {
        [GraphQLNonNullType]
        public string ChatEntryCardTitle { get; set; }
        [GraphQLNonNullType]
        public string ChatEntryCardSubtitle { get; set; }
        public bool? ChatEntryCardShowBeta { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> ChatEntryCardTextPrompts { get; set; }
        [GraphQLNonNullType]
        public ActionData ChatEntryCardAction { get; set; }
        [GraphQLNonNullType]
        public string ChatEntryCardImageUrl { get; set; }
    }

    [GraphQLDescription(@"Instructs the UI to insert a horizontal or vertical divider")]
    [Shareable]
    public class DividerCard : IHomeFeed, IShoppingModeSelectorOptionFulfilmentSection, IProductDetailsFeedItem, IShoppingModeVariantFulfilmentWindowSection
    {
        public bool? _ { get; set; }
    }

    [Shareable]
    public class DownloadableAsset : IFoodTrackerContentItem, IGenericPageFeedItem
    {
        [GraphQLDescription(@"Asset Id for AEM driven component")]
        public string? AssetId { get; set; }
        [GraphQLDescription(@"Type of the asset, image")]
        [GraphQLNonNullType]
        public DownloadableAssetType AssetType { get; set; }
        [GraphQLDescription(@"FQDN URL of the asset. Example https://test.mobile-api.woolworths.com.au/zeus/mnemosyne/v1/public/content/onboarding/test.png")]
        [GraphQLNonNullType]
        public string AssetUrl { get; set; }
        [GraphQLDescription(@"Width of the asset")]
        [GraphQLNonNullType]
        public int AssetWidth { get; set; }
        [GraphQLDescription(@"Height of the asset")]
        [GraphQLNonNullType]
        public int AssetHeight { get; set; }
        [GraphQLDescription(@"How the image should be scaled. The default should be ASPECT_FILL if fit is NULL.")]
        public DownloadableAssetFit? Fit { get; set; }
        [GraphQLDescription(@"for accessibility")]
        public string? AltText { get; set; }
    }

    [Shareable]
    public class Footer : IProductDetailsFeedItem
    {
        [GraphQLNonNullType]
        public ICollection<Button?> Buttons { get; set; }
    }

    [GraphQLDescription(@"On the home page: Displays if there are contextual products;
Shows a list of ProductCards in a horizontal view;
This is the same Card as in ProductLists;
On the recipes page: Displays a RecipesSummaryCard")]
    [GraphQLName("HorizontalListBase")]
    public interface IHorizontalListBase : IBaseNode
    {
    }

    [GraphQLName("HorizontalListBadge")]
    public interface IHorizontalListBadge
    {
    }

    [Shareable]
    public class HorizontalList : INodeContent, IProductListFeed, IProductListZeroResultItem, IFreshMagHomeItem, IFeedItem, IGenericPageFeedItem, IHorizontalListBase, IBaseNode
    {
        public string? Id { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public InsetBanner? InsetBanner { get; set; }
        [GraphQLDescription(@"Clickable text link (e.g. ""See all"")")]
        public Link? HorizontalListTrailingLink { get; set; }
        public string? NodeId { get; set; }
        [GraphQLDescription(@"Dynamic Analytics fields to be used for all component events:
* eventCategory - universal_product_list
* eventLabel - title")]
        public Analytics? HorizontalListAnalytics { get; set; }
        [GraphQLDescription(@"Analytics fields to be used for impression events:
* tealiumEvent - show_universal_product_list
* eventAction - show")]
        public Analytics? HorizontalListImpressionAnalytics { get; set; }
        [GraphQLDescription(@"Badges to be made available for any of the horizontal list components")]
        public ICollection<IHorizontalListBadge>? Badges { get; set; }
        [GraphQLDescription(@"@deprecated (reason: 'Superseded by horizontalListTrailingLink')")]
        public string? ActionTitle { get; set; }
        [GraphQLDescription(@"@deprecated (reason: 'Superseded by horizontalListTrailingLink')")]
        public string? DeepLink { get; set; }
        [GraphQLDescription(@"@deprecated (reason: 'Superseded by horizontalListTrailingLink')")]
        public string? ActionPath { get; set; }
        [GraphQLDescription(@"@deprecated (reason: 'Superseded by horizontalListTrailingLink')")]
        [GraphQLNonNullType]
        public ICollection<IActionMetaData> ActionMetadata { get; set; }
        [GraphQLNonNullType]
        public IEnumerable<IHorizontalListItem> Items { get; set; }
    }

    [GraphQLDescription(@"Displays list of recipe cards")]
    [Shareable]
    public class RecipeHorizontalList : IHomeFeed, IHorizontalListBase, IBaseNode
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public string? ActionTitle { get; set; }
        public string? DeepLink { get; set; }
        public string? NodeId { get; set; }
        [GraphQLNonNullType]
        public IEnumerable<IHorizontalListItem> Items { get; set; }
    }

    [GraphQLDescription(@"Display list of historical orders")]
    [Shareable]
    public class OrderHorizontalList : IHomeFeed, IHorizontalListBase, IBaseNode
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public string? ActionTitle { get; set; }
        public string? DeepLink { get; set; }
        public string? NodeId { get; set; }
        [GraphQLNonNullType]
        public IEnumerable<IHorizontalListItem> Items { get; set; }
    }

    [GraphQLDescription(@"Display list of contextual products")]
    [Shareable]
    public class ProductHorizontalList : IHomeFeed, IProductDetailsFeedItem, IHorizontalListBase, IBaseNode
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public string? ActionTitle { get; set; }
        public string? DeepLink { get; set; }
        public string? NodeId { get; set; }
        [GraphQLNonNullType]
        public IEnumerable<IHorizontalListItem> Items { get; set; }
    }

    [GraphQLDescription(@"Display list of quick links")]
    [Shareable]
    public class QuickLinkHorizontalList : IHomeFeed, IHorizontalListBase, IBaseNode
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public string? ActionTitle { get; set; }
        public string? DeepLink { get; set; }
        public string? NodeId { get; set; }
        [GraphQLNonNullType]
        public IEnumerable<IHorizontalListItem> Items { get; set; }
    }

    [GraphQLDescription(@"Display list of rewards offer boosters")]
    [Shareable]
    public class BoosterHorizontalList : IHomeFeed, IGenericPageFeedItem, IHorizontalListBase, IBaseNode
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        public string? ActionTitle { get; set; }
        public string? DeepLink { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> TigerOfferIds { get; set; }
        public string? NodeId { get; set; }
        [GraphQLNonNullType]
        public IEnumerable<IHorizontalListItem> Items { get; set; }
    }

    [GraphQLName("ActionMetaData")]
    public interface IActionMetaData
    {
    }

    [GraphQLName("HorizontalListItem")]
    public interface IHorizontalListItem
    {
    }

    [Shareable]
    public class ImageWithAlt
    {
        [GraphQLDescription(@"Image to be displayed on screen")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"Text to be read out by screen reader")]
        [GraphQLNonNullType]
        public string AltText { get; set; }
    }

    [Shareable]
    public class ImageTextBanner : ICheckoutSegmentContent, IProductListFeed, ICartSection
    {
        [GraphQLDescription(@"Url to image")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"Message to be displayed next to image")]
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class InlineMessage : ICartSection, IShippingMessageBanner
    {
        [GraphQLDescription(@"Represents the type of the inset banner. e.g. ""INFO""")]
        [GraphQLNonNullType]
        public InsetBannerDisplayType DisplayType { get; set; }
        [GraphQLDescription(@"Provides the message to be displayed.")]
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"InlineMessage analytics")]
        public Analytics? Analytics { get; set; }
    }

    [GraphQLDescription(@"LinkCardBase is template for actionable cards
Used in InStore home page QuickLinkCard, RecipeStickerCard, RecipeGroupCard")]
    [GraphQLName("LinkCardBase")]
    public interface ILinkCardBase
    {
        [GraphQLNonNullType]
        string LinkCardTitle { get; set; }
        string? LinkCardSubtitle { get; set; }
        string? LinkCardImage { get; set; }
        [GraphQLNonNullType]
        string LinkCardLink { get; set; }
        [GraphQLNonNullType]
        CardSize LinkCardSize { get; set; }
    }

    [GraphQLDescription(@"Represents more card on horizontal list, usually appears at the end.")]
    [Shareable]
    public class MoreCard : IHorizontalListItem
    {
        [GraphQLNonNullType]
        public MoreCardStyle MoreCardStyle { get; set; }
        [GraphQLNonNullType]
        public ActionData MoreCardAction { get; set; }
    }

    [GraphQLDescription(@"Stepper Component")]
    [Shareable]
    public class ProgressStepper
    {
        [GraphQLDescription(@"Current active step title (e.g., 1. Placed (Order placed), 2. Ready (Ready for collection), Collected etc)")]
        [GraphQLNonNullType]
        public string CurrentStep { get; set; }
        [GraphQLDescription(@"Current active step position")]
        [GraphQLNonNullType]
        public int CurrentStepPosition { get; set; }
        [GraphQLDescription(@"Current active step type")]
        [GraphQLNonNullType]
        public ProgressStepType CurrentStepType { get; set; }
        [GraphQLDescription(@"Total steps in the stepper component (e.g., 3)")]
        [GraphQLNonNullType]
        public int TotalSteps { get; set; }
        [GraphQLDescription(@"Number of steps completed (e.g., 1)")]
        [GraphQLDeprecated(@"Use currentStepPosition")]
        [GraphQLNonNullType]
        public int CompletedSteps { get; set; }
        [GraphQLDescription(@"Show tooltip if true or else tooltip will not be shown")]
        [GraphQLDeprecated(@"Use imageName")]
        [GraphQLNonNullType]
        public bool ShouldShowToolTip { get; set; }
        [GraphQLDescription(@"imageName")]
        public TooltipType? ImageName { get; set; }
    }

    [GraphQLDescription(@"Generic type used to ""sync"" shopping mode details with APP")]
    [Shareable]
    public class ShoppingModeDetails
    {
        [GraphQLNonNullType]
        public string Mode { get; set; }
        public string? DisplayName { get; set; }
        public int? StoreAddressId { get; set; }
    }

    [Shareable]
    public class Spacer : IDeliveryUnlimitedSubscribePlanTypeFeedItem, IFeedItem
    {
        [GraphQLNonNullType]
        public SpacerType Size { get; set; }
    }

    [Shareable]
    public class TextWithAlt
    {
        [GraphQLDescription(@"Text to be displayed on screen")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"Text to be read out by screen reader")]
        [GraphQLNonNullType]
        public string AltText { get; set; }
    }

    [Shareable]
    public class TextWithLink : IFoodTrackerContentItem
    {
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLNonNullType]
        public string Url { get; set; }
    }

    [GraphQLDescription(@"TextArea module based on Core Design System")]
    [GraphQLName("TextArea")]
    public interface ITextArea
    {
        [GraphQLDescription(@"Label for the text area, indicating its purpose or content.")]
        [GraphQLNonNullType]
        string Label { get; set; }
        [GraphQLDescription(@"Additional help text providing guidance about the text area's usage.")]
        string? HelpText { get; set; }
        [GraphQLDescription(@"Indicates if the text area is optional. 'true' means optional, 'false' means required.")]
        [GraphQLNonNullType]
        bool IsOptional { get; set; }
        [GraphQLDescription(@"Minimum character count allowed in the text area.")]
        int? MinCharacterCount { get; set; }
        [GraphQLDescription(@"Maximum character count allowed in the text area.")]
        [GraphQLNonNullType]
        int MaxCharacterCount { get; set; }
        [GraphQLDescription(@"Placeholder text displayed in the text area before user input.")]
        string? PlaceholderText { get; set; }
    }

    [GraphQLDescription(@"TextField module based on Core Design System")]
    [GraphQLName("TextField")]
    public interface ITextField
    {
        [GraphQLDescription(@"Label for the text field, indicating its purpose or content.")]
        [GraphQLNonNullType]
        string Label { get; set; }
        [GraphQLDescription(@"Additional help text providing guidance about the text field's usage.")]
        string? HelpText { get; set; }
        [GraphQLDescription(@"Indicates if the field is optional. 'true' means optional, 'false' means required.")]
        [GraphQLNonNullType]
        bool IsOptional { get; set; }
        [GraphQLDescription(@"Minimum character count allowed in the text field.")]
        int? MinCharacterCount { get; set; }
        [GraphQLDescription(@"Maximum character count allowed in the text field.")]
        [GraphQLNonNullType]
        int MaxCharacterCount { get; set; }
        [GraphQLDescription(@"Placeholder text displayed in the text field before user input.")]
        string? PlaceholderText { get; set; }
    }

    [GraphQLName("UniversalInventory")]
    public interface IUniversalInventory
    {
    }

    [GraphQLName("UniversalInventoryNextBestAction")]
    public interface IUniversalInventoryNextBestAction
    {
    }

    [GraphQLDescription(@"represents the stacked layout in FE")]
    [Shareable]
    public class VerticalListAction
    {
        public string? ActionTitle { get; set; }
        [GraphQLNonNullType]
        public ActionData Action { get; set; }
    }

    [Shareable]
    public class VerticalList : IGenericPageFeedItem
    {
        public string? VerticalListTitle { get; set; }
        public string? VerticalListSubtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<IVerticalListItem> VerticalListItems { get; set; }
        public VerticalListAction? VerticalListAction { get; set; }
    }

    [GraphQLName("VerticalListItem")]
    public interface IVerticalListItem
    {
    }

    [Shareable]
    public class Shopper
    {
        public string? ShopperId { get; set; }
        public string? FirstName { get; set; }
        public string? MiddleInitial { get; set; }
        public string? LastName { get; set; }
        public string? FullName { get; set; }
        public string? DateOfBirth { get; set; }
        public string? Email { get; set; }
        public string? HomePhone { get; set; }
        public string? BusinessPhone { get; set; }
        public string? MobilePhone { get; set; }
        public string? Comments { get; set; }
        public string? Company { get; set; }
        public int? OrderCount { get; set; }
        public string? Abn { get; set; }
        public string? JobTitle { get; set; }
        public string? TypeOfBusiness { get; set; }
        public bool? IsBusinessAccount { get; set; }
        public bool? TeamMember { get; set; }
        public string? DateCreated { get; set; }
        public string? DateLastModified { get; set; }
        public bool? AllowSMS { get; set; }
        public bool? AllowSamples { get; set; }
        public bool? CatalogueOptIn { get; set; }
        public bool? IsGuest { get; set; }
    }

    [GraphQLDescription(@"Mutation reponse with shopping modes list")]
    [Shareable]
    public class ShoppingModeMutationResponse
    {
        [GraphQLDescription(@"If mutation was successfuls")]
        [GraphQLNonNullType]
        public bool IsSuccess { get; set; }
        [GraphQLDescription(@"Shopping modes screen")]
        [GraphQLNonNullType]
        public ShoppingModes ShoppingModes { get; set; }
    }

    [Shareable]
    public class ShoppingModes
    {
        [GraphQLDescription(@"List of available shopping modes")]
        [GraphQLNonNullType]
        public ICollection<IShoppingModeUnion> Modes { get; set; }
    }

    [GraphQLDescription(@"Default Shopping Mode")]
    [Shareable]
    public class ShoppingMode : IShoppingModeUnion
    {
        [GraphQLDescription(@"Kind of shopping mode")]
        [GraphQLNonNullType]
        public ShoppingModeType Type { get; set; }
        [GraphQLDescription(@"Shopping mode title, normally title of currently selected (or default) variant")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Shopping mode variants
For example for Delivery mode we have `Delivery` and `Delivery Now` variants")]
        [GraphQLNonNullType]
        public ICollection<IShoppingModeVariantUnion> Variants { get; set; }
        [GraphQLDescription(@"Shopping mode address: `DeliveryAddress` in for Delivery Mode")]
        public IAddressUnion? Address { get; set; }
        [GraphQLDescription(@"Current state of the *Delivery* shopping mode
(e.g. `SELECTED` or `AVAIABLE`)")]
        [GraphQLNonNullType]
        public ShoppingModeState State { get; set; }
    }

    [GraphQLDescription(@"One of the available shopping modes

Usage:
```graphql
shoppingModes {
  ... on ShoppingMode {
    __typename
  }
}
```")]
    [GraphQLName("ShoppingModeUnion")]
    public interface IShoppingModeUnion
    {
    }

    [Shareable]
    public class ShoppingModeVariantFulfilmentWindowState : IShoppingModeVariantFulfilmentWindowSection, IFulfilmentWindowState
    {
        [GraphQLNonNullType]
        public string FulfilmentWindowStateTitle { get; set; }
        public TextWithAlt? FulfilmentWindowStateSubtitle { get; set; }
        [GraphQLNonNullType]
        public Button FulfilmentWindowStateButton { get; set; }
    }

    [GraphQLName("ShoppingModeVariantFulfilmentWindowSection")]
    public interface IShoppingModeVariantFulfilmentWindowSection
    {
    }

    [GraphQLDescription(@"Default the Variant")]
    [Shareable]
    public class ShoppingModeVariant : IShoppingModeVariantUnion
    {
        [GraphQLDescription(@"ID of the the Variant for selection")]
        [GraphQLNonNullType]
        public ShoppingModeId Id { get; set; }
        [GraphQLDescription(@"Title for the Variant")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"The Variant subtitle
(ETA: e.g. `Approx. 1hr and 20mins`)")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"The Variant price
(e.g. `{text: ""$19""}`)")]
        public IShoppingModeVariantPrice? Price { get; set; }
        [GraphQLDescription(@"The Variant conditions
(e.g. `[{text: ""50 item limit""}]`)")]
        public ICollection<ShoppingModeVariantCondition?>? Conditions { get; set; }
        [GraphQLDescription(@"Current state of the Variant
(e.g. `SELECTED`, `DISABLED` or `AVAIABLE`)")]
        [GraphQLNonNullType]
        public ShoppingModeVariantState State { get; set; }
        [GraphQLDescription(@"Current state of the Variant, currently present only for Delivery Now
(e.g. `Closed`, `Available`, `Exhausted`, etc)")]
        public DeliveryWindowStatus? Status { get; set; }
        [GraphQLDescription(@"Badge of the Variant
(e.g: `Temporarily unavailable` or `null` if no extra badge is necessary)")]
        [GraphQLDeprecated(@"Use `statusBadge`")]
        public ShoppingModeVariantBadge? Badge { get; set; }
        [GraphQLDescription(@"Badge of the Variant
(e.g: `Temporarily unavailable` or `null` if no extra badge is necessary)")]
        public Badge? StatusBadge { get; set; }
        [GraphQLDescription(@"Footnote of the Variant
(e.g: `Delivery Unlimited discounts shown at checkout`)")]
        public string? Footnote { get; set; }
        [GraphQLDescription(@"DeliveryNowStoreId of the Variant
(e.g: `Delivery Now store id 1213`)")]
        public int? ExpressDeliveryStoreId { get; set; }
        public ICollection<IShoppingModeVariantFulfilmentWindowSection>? Fulfilment { get; set; }
    }

    [GraphQLDescription(@"One of the available the Variants

Usage:
```graphql
variants {
   ... on ShoppingModeVariant {
     __typename
   }
 }
```")]
    [GraphQLName("ShoppingModeVariantUnion")]
    public interface IShoppingModeVariantUnion
    {
    }

    [GraphQLDescription(@"Badge of a shopping mode variant
(e.g: ""Temporarily unavailable"")")]
    [Shareable]
    public class ShoppingModeVariantBadge
    {
        [GraphQLDescription(@"Printable condition text")]
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [GraphQLDescription(@"Condition of a shopping mode variant
(e.g: ""Order by 6pm for the next day delivery"")")]
    [Shareable]
    public class ShoppingModeVariantCondition
    {
        [GraphQLDescription(@"Printable condition text")]
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [GraphQLDescription(@"Price for different shopping mode variants could be either range or exact

Usage:
```gql
price {
  ... on Price {
    text
    value
  }
  ... on PriceRange {
    text
    min
    max
  }
}
```")]
    [GraphQLName("ShoppingModeVariantPrice")]
    public interface IShoppingModeVariantPrice
    {
    }

    [Shareable]
    public class WebLink
    {
        [GraphQLNonNullType]
        public ICollection<WebLinkCookie> Cookies { get; set; }
        [GraphQLNonNullType]
        public ICollection<WebLinkHeader> Headers { get; set; }
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class WebLinkCookie
    {
        [GraphQLNonNullType]
        public string Name { get; set; }
        [GraphQLNonNullType]
        public string Value { get; set; }
        [GraphQLNonNullType]
        public string Domain { get; set; }
        [GraphQLNonNullType]
        public string Path { get; set; }
        [GraphQLNonNullType]
        public int MaxAge { get; set; }
        [GraphQLNonNullType]
        public bool HttpOnly { get; set; }
        [GraphQLNonNullType]
        public bool Secure { get; set; }
    }

    [Shareable]
    public class WebLinkHeader
    {
        [GraphQLNonNullType]
        public string Key { get; set; }
        [GraphQLNonNullType]
        public string Value { get; set; }
    }

    [GraphQLDescription(@"A type representing the store details and product availability")]
    [Shareable]
    public class StoreProductAvailability
    {
        [GraphQLNonNullType]
        public string StoreId { get; set; }
        [GraphQLNonNullType]
        public string Name { get; set; }
        [GraphQLNonNullType]
        public StoreIcon Icon { get; set; }
        public string? Division { get; set; }
        [GraphQLNonNullType]
        public StoreAddress Address { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> Facilities { get; set; }
        [GraphQLNonNullType]
        public ICollection<TradingHour> TradingHours { get; set; }
        [GraphQLNonNullType]
        public GeoInfo Geo { get; set; }
        [GraphQLNonNullType]
        public bool IsProductAvailable { get; set; }
    }

    [GraphQLDescription(@"A type representing the stores list")]
    [Shareable]
    public class StoreProductAvailabilityList
    {
        [GraphQLNonNullType]
        public ICollection<StoreProductAvailability> Stores { get; set; }
    }

    [GraphQLDescription(@"A type representing the address information of a store.")]
    [Shareable]
    public class StoreAddress
    {
        [GraphQLNonNullType]
        public string Line1 { get; set; }
        public string? Line2 { get; set; }
        [GraphQLNonNullType]
        public string Suburb { get; set; }
        [GraphQLNonNullType]
        public string State { get; set; }
        [GraphQLNonNullType]
        public string Country { get; set; }
        [GraphQLNonNullType]
        public string Postcode { get; set; }
        public string? Phone { get; set; }
        public string? Email { get; set; }
    }

    [GraphQLDescription(@"A type representing the store icon.")]
    [Shareable]
    public class StoreIcon
    {
        public string? Small { get; set; }
        public string? Large { get; set; }
    }

    [GraphQLDescription(@"A type representing the store day and opening hours.")]
    [Shareable]
    public class TradingHour
    {
        [GraphQLNonNullType]
        public string DayLabel { get; set; }
        [GraphQLNonNullType]
        public string HoursLabel { get; set; }
    }

    [GraphQLDescription(@"A type representing the store location and distance.")]
    [Shareable]
    public class GeoInfo
    {
        public decimal? Distance { get; set; }
        [GraphQLNonNullType]
        public string Latitude { get; set; }
        [GraphQLNonNullType]
        public string Longitude { get; set; }
    }

    [GraphQLDescription(@"A type representing the base store details card")]
    [Shareable]
    public class StoreDetailCard
    {
        [GraphQLNonNullType]
        public string StoreId { get; set; }
        [GraphQLNonNullType]
        public string Name { get; set; }
        [GraphQLNonNullType]
        public StoreIcon Icon { get; set; }
        public string? Division { get; set; }
        [GraphQLNonNullType]
        public StoreAddress Address { get; set; }
        [GraphQLNonNullType]
        public ICollection<string?> Facilities { get; set; }
        [GraphQLNonNullType]
        public ICollection<TradingHour?> TradingHours { get; set; }
        [GraphQLNonNullType]
        public GeoInfo Geo { get; set; }
    }

    [Shareable]
    public class StoreList
    {
        [GraphQLNonNullType]
        public ICollection<StoreDetailCard> Stores { get; set; }
    }

    [Shareable]
    public class SuburbList
    {
        [GraphQLNonNullType]
        public ICollection<SuburbDetailCard> Suburbs { get; set; }
    }

    [GraphQLDescription(@"A type representing the base suburb details card")]
    [Shareable]
    public class SuburbDetailCard
    {
        [GraphQLNonNullType]
        public string Name { get; set; }
        [GraphQLNonNullType]
        public string State { get; set; }
        [GraphQLNonNullType]
        public string Postcode { get; set; }
        [GraphQLNonNullType]
        public string Latitude { get; set; }
        [GraphQLNonNullType]
        public string Longitude { get; set; }
    }

    [Shareable]
    public class SubscriptionInfo
    {
        [GraphQLNonNullType]
        public string Name { get; set; }
        [GraphQLNonNullType]
        public string Status { get; set; }
        public string? TrialStartDate { get; set; }
        public string? TrialEndDate { get; set; }
        public string? AllowedUsageType { get; set; }
        public string? BillingPeriod { get; set; }
        public string? SubscriptionType { get; set; }
        public string? SubscriberType { get; set; }
        public string? NextBillingDate { get; set; }
        public string? SubscriptionId { get; set; }
        public string? Price { get; set; }
    }

    [Shareable]
    public class SubscriptionAnalyticsData
    {
        public ICollection<string?>? SubscriptionTypes { get; set; }
        public ICollection<string?>? SubscriptionBillingPeriods { get; set; }
        public ICollection<string?>? SubscriptionAllowedUsageTypes { get; set; }
        public ICollection<string?>? SubscriptionIds { get; set; }
        public ICollection<string?>? UserStatus { get; set; }
        public ICollection<string?>? UserSubscriberTypes { get; set; }
    }

    [Shareable]
    public class SubscriptionsInfo
    {
        public bool? IsB2B { get; set; }
        public ICollection<SubscriptionInfo?>? Subscriptions { get; set; }
        public SubscriptionAnalyticsData? AnalyticsData { get; set; }
    }

    [GraphQLDescription(@"Represents a suggested List")]
    [Shareable]
    public class SuggestedListItem
    {
        [GraphQLDescription(@"Unique id of a list")]
        [GraphQLNonNullType]
        public int Id { get; set; }
        [GraphQLDescription(@"List name")]
        [GraphQLNonNullType]
        public string Name { get; set; }
        [GraphQLDescription(@"Image url")]
        public string? Image { get; set; }
    }

    [GraphQLDescription(@"A paginated list of suggested lists")]
    [Shareable]
    public class SuggestedLists
    {
        [GraphQLDescription(@"Represents total sum of lists")]
        [GraphQLNonNullType]
        public int TotalItemCount { get; set; }
        [GraphQLDescription(@"Points to next page in response. Null if not page available.")]
        public int? NextPage { get; set; }
        [GraphQLDescription(@"Represent a list of suggested list.")]
        [GraphQLNonNullType]
        public ICollection<SuggestedListItem> Items { get; set; }
    }

    [Shareable]
    public class VocSurvey
    {
        [GraphQLDescription(@"Survey url
url for web based survey url")]
        public string? SurveyUrl { get; set; }
        [GraphQLNonNullType]
        public string PromptTitle { get; set; }
        public string? PromptSubTitle { get; set; }
        [GraphQLNonNullType]
        public Button Cta { get; set; }
        public string? ScreenTitle { get; set; }
    }

    [Shareable]
    public class CheckoutSurvey
    {
        [GraphQLDescription(@"Survey ID - uniq per survey type")]
        [GraphQLNonNullType]
        public string SurveyId { get; set; }
        [GraphQLDescription(@"Response ID - must be sent to the mutation when sending back the response to BFF")]
        [GraphQLNonNullType]
        public string ResponseId { get; set; }
        [GraphQLDescription(@"Text to display after survey has completed")]
        [GraphQLNonNullType]
        public string CommentText { get; set; }
        [GraphQLDescription(@"Text to display on get comment button. If null, we don't display the button.")]
        public string? CommentPrompt { get; set; }
        [GraphQLDescription(@"List of questions")]
        [GraphQLNonNullType]
        public ICollection<Question> Questions { get; set; }
        public VocSurvey? VocSurvey { get; set; }
    }

    [Shareable]
    public class Question
    {
        [GraphQLDescription(@"Survey ID")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLDescription(@"Question text to display")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"Survey type
Type dictates the UI controls")]
        [GraphQLNonNullType]
        public SurveyQuestionType Type { get; set; }
    }

    [Shareable]
    public class TrafficDriverItem
    {
        [GraphQLDescription(@"AEM title field")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"AEM tagline field")]
        public string? Subtitle { get; set; }
        [GraphQLDescription(@"AEM image field")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"AEM keywords field")]
        [GraphQLNonNullType]
        public ICollection<string> Keywords { get; set; }
        [GraphQLDescription(@"AEM path + search_tracking fields")]
        [GraphQLNonNullType]
        public ActionData Action { get; set; }
        [GraphQLDescription(@"Item tag with TagStyle 'FEATURED'")]
        public TagLabel? Tag { get; set; }
        [GraphQLDescription(@"Item impression Analytics")]
        public Analytics? ImpressionAnalytics { get; set; }
    }

    [Shareable]
    public class TrafficDriver
    {
        [GraphQLDescription(@"Maximum number of items to display in FE if multiple matches are found")]
        [GraphQLNonNullType]
        public int NumberOfItemsToDisplay { get; set; }
        [GraphQLDescription(@"Starting position to inject the traffic drivers in search suggestions result UI.
It's 0 based indexing. To appear after the 3rd search item in position 4.
  - if search suggestions return 5 items, inject traffic driver item(s) from 4th position
  - if search suggestions return 1 items, move up the traffic driver item(s) to 2nd position")]
        [GraphQLNonNullType]
        public int StartingIndex { get; set; }
        [GraphQLDescription(@"List of traffic drivers")]
        [GraphQLNonNullType]
        public ICollection<TrafficDriverItem> Items { get; set; }
        [GraphQLDescription(@"Base Analytics fields which will be used in child analytics")]
        public Analytics? Analytics { get; set; }
    }

    [GraphQLDescription(@"Represents the AEM video page")]
    [Shareable]
    public class VideoPage : IGenericPage
    {
        [GraphQLDescription(@"Inherited from GenericPage.
List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. openBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class VideoPageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"Inherited from GenericPage.
Represents text to display on top bar")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"implement from generic type, represents hero image url
optional field, usually only one hero image in a page")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [Shareable]
    public class VoiceSearchResult
    {
        [GraphQLNonNullType]
        public string Result { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> SelectedChips { get; set; }
    }

    [Shareable]
    public class WXIDDetails
    {
        [GraphQLDescription(@"User wxid. This is used for user targetting
For new signups, it takes at least a day for wxid to get generated.
There will be a case where wxid will be null.")]
        public string? Wxid { get; set; }
        [GraphQLDescription(@"WXID changes if any of the PII details is updated.
App should fetch to check for wxid updates after this timestamp.")]
        [GraphQLNonNullType]
        public decimal NextFetchTime { get; set; }
    }

    [GraphQLDescription(@"Cart section that has products, rewards, savings etc")]
    [Shareable]
    public class CartResponse
    {
        [GraphQLDescription(@"Cart header")]
        [GraphQLNonNullType]
        public CartHeader Header { get; set; }
        [GraphQLDescription(@"Total products in cart (e.g., 4), used for showing the empty state of cart")]
        [GraphQLNonNullType]
        public int TotalProducts { get; set; }
        [GraphQLDescription(@"Rewards points earned will be shown only for rewards linked customers")]
        public CartRewardsInfo? RewardsInfo { get; set; }
        [GraphQLDescription(@"Product sections")]
        [GraphQLNonNullType]
        public ICollection<ICartSection> CartSections { get; set; }
        [GraphQLDescription(@"Remove all products from cart")]
        [GraphQLNonNullType]
        public string RemoveAllAction { get; set; }
        [GraphQLDescription(@"Cart footer")]
        [GraphQLNonNullType]
        public CartFooter Footer { get; set; }
        [GraphQLDescription(@"Help FE with navigation, indicating Products in cart requires review")]
        [GraphQLNonNullType]
        public bool RequiresProductReview { get; set; }
        [GraphQLDescription(@"Help FE with navigation, indicating a Fulfilment window needs to be selected")]
        [GraphQLNonNullType]
        public bool RequiresFulfilmentWindow { get; set; }
        [GraphQLDescription(@"Help FE with navigation, indicating a HaveYouForgotten screen is required")]
        [GraphQLNonNullType]
        public bool RequiresHaveYouForgotten { get; set; }
        [GraphQLDescription(@"Help FE with navigation, indicating customer need to enter their address")]
        [GraphQLNonNullType]
        public bool RequiresFulfilmentAddress { get; set; }
        [GraphQLDescription(@"Help FE with navigation, indicating customer need to address something before next step")]
        public CartAlert? RequiredAlert { get; set; }
        [GraphQLDescription(@"Analytics for cart")]
        [GraphQLNonNullType]
        public ICollection<Analytics> Analytics { get; set; }
        [GraphQLDescription(@"All products in cart for list actions")]
        [GraphQLNonNullType]
        public ICollection<CartProductQuantity> CartProductQuantities { get; set; }
    }

    [GraphQLDescription(@"Product card")]
    [Shareable]
    public class CartProductCard : ICartProductFeed, IProductRow
    {
        [GraphQLDescription(@"product id that is unique to each item")]
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLDescription(@"Description of the product")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Image url of the product")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"Is the product available (true or false)")]
        [GraphQLNonNullType]
        public bool IsAvailable { get; set; }
        [GraphQLDescription(@"Total price (it will be removed once FE started consuming unitPrice and totalPrice)")]
        public int? Price { get; set; }
        [GraphQLDescription(@"Price per item in cents")]
        public int? UnitPrice { get; set; }
        [GraphQLDescription(@"Total Price of same products in cents")]
        public int? TotalPrice { get; set; }
        [GraphQLDescription(@"Quanitities in cart")]
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }
        [GraphQLDescription(@"Disclaimer text for meat loss and tobacco products")]
        public InsetBanner? Disclaimer { get; set; }
        [GraphQLDescription(@"quantity selector information")]
        [GraphQLNonNullType]
        public CartProductQuantityInfo QuantityInfo { get; set; }
        [GraphQLDescription(@"marketplace info for market product")]
        public MarketplaceProductInfo? Marketplace { get; set; }
        [GraphQLDescription(@"Total saving for this product")]
        public string? Saving { get; set; }
        [GraphQLDescription(@"Total price before reduction")]
        public string? WasPrice { get; set; }
        [GraphQLDescription(@"EDR member product price promotion info")]
        public MemberPricePromotionInfo? MemberPricePromotionInfo { get; set; }
        [GraphQLDescription(@"Non EDR member buy more save more product promotion info")]
        public MultiBuyPromotionInfo? MultiBuyPromotionInfo { get; set; }
        [GraphQLDescription(@"Bundle promotion info")]
        public BundlePromotionInfo? BundlePromotionInfo { get; set; }
        [GraphQLDescription(@"Additional fields on cart product(initially used for analytics)")]
        public CartProductInfo? CartProductInfo { get; set; }
        [GraphQLDescription(@"Available limit for ATP/Trader limit restrictions")]
        public string? AvailableLimit { get; set; }
    }

    [GraphQLDescription(@"Represents the products currently added to users shopping cart.")]
    [Shareable]
    public class CartProductQuantityInfo
    {
        [GraphQLDescription(@"Minimum amount that can be added to cart.")]
        [GraphQLNonNullType]
        public decimal Minimum { get; set; }
        [GraphQLDescription(@"Maximum amount that can be added to cart.")]
        [GraphQLNonNullType]
        public decimal Maximum { get; set; }
        [GraphQLDescription(@"Increment for adding products to cart.")]
        [GraphQLNonNullType]
        public decimal Increment { get; set; }
        [GraphQLDescription(@"Default amount to initialize the quantity selector when item is not already added to any cart")]
        [GraphQLNonNullType]
        public decimal Default { get; set; }
        [GraphQLDescription(@"Measurement used for product.")]
        public string? Unit { get; set; }
    }

    [GraphQLDescription(@"Cart Product section")]
    [Shareable]
    public class CartProductSection : ICartSection
    {
        [GraphQLDescription(@"Title of the product section")]
        public string? Title { get; set; }
        [GraphQLDescription(@"Section header with title and icon")]
        public CheckoutSectionHeader? SectionHeader { get; set; }
        [GraphQLDescription(@"Array of product feeds")]
        [GraphQLNonNullType]
        public ICollection<ICartProductFeed> Products { get; set; }
    }

    [GraphQLDescription(@"Cart Available Product section")]
    [Shareable]
    public class CartAvailableProductSection : ICartSection
    {
        [GraphQLDescription(@"Title of the product section")]
        public string? Title { get; set; }
        [GraphQLDescription(@"Section header with title and icon")]
        public CheckoutSectionHeader? SectionHeader { get; set; }
        [GraphQLDescription(@"Array of product feeds")]
        [GraphQLNonNullType]
        public ICollection<ICartProductFeed> Products { get; set; }
    }

    [Shareable]
    public class CartProductCategory : ICartProductFeed
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [GraphQLDescription(@"Promotion section")]
    [Shareable]
    public class CartPromotionSection : ICartSection
    {
        [GraphQLDescription(@"Promotion Id such as rewardcredits")]
        [GraphQLNonNullType]
        public string PromotionId { get; set; }
        [GraphQLDescription(@"Array of product feeds")]
        [GraphQLNonNullType]
        public ICollection<ICartProductFeed> Products { get; set; }
        [GraphQLDescription(@"Title of the section")]
        public string? Title { get; set; }
        [GraphQLDescription(@"Promotion info (e.g., Rewards credits info)")]
        [GraphQLNonNullType]
        public CartPromotionInfo Info { get; set; }
    }

    [GraphQLDescription(@"Array of product feeds")]
    [GraphQLName("CartProductFeed")]
    public interface ICartProductFeed
    {
    }

    [GraphQLDescription(@"Array of different sections within the cart")]
    [GraphQLName("CartSection")]
    public interface ICartSection
    {
    }

    [GraphQLDescription(@"Cart Header")]
    [Shareable]
    public class CartHeader
    {
        [GraphQLDescription(@"Total price including delivery fees")]
        [GraphQLNonNullType]
        public string SubtotalInclDelivery { get; set; }
        [GraphQLDescription(@"Savings on cart e.g., You have saved $0.20")]
        public SavingsOnCart? SavingsOnCart { get; set; }
        [GraphQLDescription(@"Checkout button")]
        [GraphQLNonNullType]
        public Button CartCheckoutBtn { get; set; }
        [GraphQLDescription(@"Subtitle")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
    }

    [GraphQLDescription(@"Savings information")]
    [Shareable]
    public class SavingsOnCart
    {
        [GraphQLDescription(@"label i.e., You have saved")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Savings amount $0.20")]
        [GraphQLNonNullType]
        public string Amount { get; set; }
    }

    [GraphQLDescription(@"Rewards information")]
    [Shareable]
    public class CartRewardsInfo
    {
        [GraphQLDescription(@"Image url of rewards card icon")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"content showing rewards points earned")]
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [GraphQLDescription(@"Promotion Information such as rewards credits")]
    [Shareable]
    public class CartPromotionInfo
    {
        [GraphQLDescription(@"To show different background colours based on isRewardsLinked flag (true or false)")]
        [GraphQLNonNullType]
        public bool Active { get; set; }
        [GraphQLDescription(@"Image url of rewards credits icon")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"Rewards credits description")]
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLDescription(@"Rewards credits tooltip message")]
        [GraphQLNonNullType]
        public CartPromotionsToolTipMessage TooltipMessage { get; set; }
    }

    [Shareable]
    public class CartPromotionsToolTipMessage
    {
        [GraphQLDescription(@"Title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"tooltip message")]
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [GraphQLDescription(@"Cart footer")]
    [Shareable]
    public class CartFooter
    {
        [GraphQLNonNullType]
        public Button Button { get; set; }
        [GraphQLNonNullType]
        public string TotalLabel { get; set; }
        [GraphQLNonNullType]
        public string TotalAmount { get; set; }
        public string? TotalDescription { get; set; }
        public string? Savings { get; set; }
        [GraphQLDescription(@"panelMarkdown is used to display the cart ""About estimated totals"" panel. Currently only supported by the NZ app.")]
        public string? PanelMarkdown { get; set; }
    }

    [GraphQLDescription(@"Banners for cart")]
    [Shareable]
    public class CartBanner : ICartSection
    {
        [GraphQLNonNullType]
        public InsetBanner Banner { get; set; }
        [GraphQLDescription(@"Specify the type of action mapped on FE for the banner")]
        [GraphQLNonNullType]
        public CartBannerType Type { get; set; }
    }

    [GraphQLDescription(@"EDR member product price promotion info")]
    [Shareable]
    public class MemberPricePromotionInfo
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public bool IsApplied { get; set; }
    }

    [GraphQLDescription(@"Non EDR member buy more save more product promotion info")]
    [Shareable]
    public class MultiBuyPromotionInfo
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public bool IsApplied { get; set; }
    }

    [GraphQLDescription(@"Bundle promotion info for online and EDR member only.")]
    [Shareable]
    public class BundlePromotionInfo
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public bool IsApplied { get; set; }
        [GraphQLNonNullType]
        public BundleType BundleType { get; set; }
        [GraphQLNonNullType]
        public decimal AppliedQuantity { get; set; }
        [GraphQLNonNullType]
        public bool IsShowBanner { get; set; }
    }

    [GraphQLDescription(@"Additional cart state fields")]
    [Shareable]
    public class CartProductInfo
    {
        [GraphQLDescription(@"totalPrice as number eg: 15.5")]
        public string? TotalPrice { get; set; }
        [GraphQLDescription(@"wasPrice as number eg: 15.5")]
        public string? TotalOriginalPrice { get; set; }
        [GraphQLDescription(@"savings as number eg: 5.5")]
        public string? TotalDiscount { get; set; }
    }

    [GraphQLDescription(@"Alert shown in cart")]
    [Shareable]
    public class CartAlert
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        public Analytics? Analytics { get; set; }
    }

    [Shareable]
    public class CartProductQuantity
    {
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }
    }

    [Shareable]
    public class MarketSellerCard
    {
        [GraphQLDescription(@"Seller name")]
        [GraphQLNonNullType]
        public string SellerName { get; set; }
        [GraphQLDescription(@"Seller Dispatch Notes")]
        [GraphQLNonNullType]
        public string DispatchNote { get; set; }
        [GraphQLDescription(@"Array of product feeds")]
        [GraphQLNonNullType]
        public ICollection<ICartProductFeed> Products { get; set; }
        [GraphQLDescription(@"Seller shipping fees")]
        public decimal? ShippingFee { get; set; }
    }

    [GraphQLName("ShippingMessageBanner")]
    public interface IShippingMessageBanner
    {
    }

    [Shareable]
    public class CartMarketProductSection : ICartSection
    {
        [GraphQLDescription(@"Section header with title and icon")]
        public CheckoutSectionHeader? SectionHeader { get; set; }
        [GraphQLDescription(@"Market shipping message")]
        [GraphQLDeprecated(@"Not used by FE from 22.19 onwards, use shippingMessageBanner")]
        public InlineMessage? ShippingMessage { get; set; }
        [GraphQLDescription(@"Market shipping message banner")]
        public IShippingMessageBanner? ShippingMessageBanner { get; set; }
        [GraphQLDescription(@"Array of sellerGroups")]
        [GraphQLNonNullType]
        public ICollection<MarketSellerCard?> SellerGroups { get; set; }
        [GraphQLDescription(@"Market shipping fee tracker")]
        public MarketplaceCartTracker? CartTracker { get; set; }
        [GraphQLDescription(@"Stock codes list that are undeliverable")]
        [GraphQLNonNullType]
        public ICollection<int> UndeliverableStockcodes { get; set; }
    }

    [Shareable]
    public class MarketplaceProductInfo
    {
        [GraphQLNonNullType]
        public string SellerName { get; set; }
        [GraphQLNonNullType]
        public string BrandName { get; set; }
    }

    [Shareable]
    public class MarketplaceCartTracker
    {
        [GraphQLDescription(@"0.75 percentage as decimal")]
        [GraphQLNonNullType]
        public decimal FreeShippingPercentage { get; set; }
        [GraphQLDescription(@"You are $23 away from FREE shipping")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Orders under $100 have a $10 shipping fee")]
        [GraphQLNonNullType]
        public string Description { get; set; }
    }

    [Shareable]
    public class CartInfoResponse
    {
        [GraphQLNonNullType]
        public int TotalProductCount { get; set; }
        [GraphQLNonNullType]
        public ICollection<CartInfoProductQuantity> ProductQuantities { get; set; }
    }

    [Shareable]
    public class CartInfoProductQuantity
    {
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }
    }

    [GraphQLDescription(@"Response for update product cart quantities")]
    [Shareable]
    public class CartProductQuantitiesUpdatedResponse
    {
        [GraphQLNonNullType]
        public int ProductCount { get; set; }
        [GraphQLNonNullType]
        public ICollection<CartProductQuantityUpdated> UpdatedProductQuantities { get; set; }
        [GraphQLNonNullType]
        public int TotalProductCount { get; set; }
        [GraphQLNonNullType]
        public CartResponse Cart { get; set; }
    }

    [GraphQLDescription(@"Updated quantity for a single cart product")]
    [Shareable]
    public class CartProductQuantityUpdated
    {
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLNonNullType]
        public decimal UpdatedQuantity { get; set; }
        [GraphQLDescription(@"deltaQuantity, deltaSubtotal, productQuantityAction required for calculating analytics info")]
        public decimal? DeltaQuantity { get; set; }
        public string? DeltaSubtotal { get; set; }
        public CartProductQuantityAction? ProductQuantityAction { get; set; }
        [GraphQLNonNullType]
        public bool Success { get; set; }
        public ErrorUpdateCartProductQuantity? Error { get; set; }
    }

    [GraphQLDescription(@"Error in update of quantity for a single cart product")]
    [Shareable]
    public class ErrorUpdateCartProductQuantity
    {
        [GraphQLNonNullType]
        public UpdateCartProductQuantityFailedReason Reason { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class CatalogueBrowse
    {
        [GraphQLNonNullType]
        public ICollection<ICatalogueBrowsePageItem> Pages { get; set; }
        [GraphQLNonNullType]
        public int TotalNumberOfPages { get; set; }
    }

    [GraphQLName("CatalogueBrowsePageItem")]
    public interface ICatalogueBrowsePageItem
    {
    }

    [Shareable]
    public class CatalogueBrowseCategoryPage : ICatalogueBrowsePageItem
    {
        [GraphQLNonNullType]
        public int PageNumber { get; set; }
        [GraphQLNonNullType]
        public string BackgroundUrl { get; set; }
        public string? BackgroundColor { get; set; }
        [GraphQLDescription(@"Category ID(nodeId) e.g. 1_DEB537E, if there is new collection required that not part
of categories, new ID will be added")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICatalogueBrowseCategoryPageItem> Items { get; set; }
    }

    [Shareable]
    public class CatalogueBrowsePromotionPage : ICatalogueBrowsePageItem
    {
        [GraphQLNonNullType]
        public int PageNumber { get; set; }
        [GraphQLNonNullType]
        public string BackgroundUrl { get; set; }
        public string? BackgroundColor { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICatalogueBrowsePromotionPageItem> Items { get; set; }
    }

    [GraphQLName("CatalogueBrowseCategoryPageItem")]
    public interface ICatalogueBrowseCategoryPageItem
    {
    }

    [GraphQLName("CatalogueBrowsePromotionPageItem")]
    public interface ICatalogueBrowsePromotionPageItem
    {
    }

    [Shareable]
    public class CatalogueBrowseCategoryPageHeader : ICatalogueBrowseCategoryPageItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
    }

    [Shareable]
    public class CatalogueBrowseCategoryPageButton : ICatalogueBrowseCategoryPageItem
    {
        [GraphQLNonNullType]
        public Button Button { get; set; }
    }

    [Shareable]
    public class CatalogueBrowsePromotionPageHeader : ICatalogueBrowsePromotionPageItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
    }

    [Shareable]
    public class CatalogueBrowsePromotionPageButton : ICatalogueBrowsePromotionPageItem
    {
        [GraphQLNonNullType]
        public Button Button { get; set; }
    }

    [Shareable]
    public class CatalogueHome
    {
        [GraphQLNonNullType]
        public ICollection<ICatalogueHomeItem> Items { get; set; }
    }

    [GraphQLName("CatalogueHomeCard")]
    public interface ICatalogueHomeCard
    {
        [GraphQLNonNullType]
        string Title { get; set; }
        [GraphQLNonNullType]
        string Image { get; set; }
        [GraphQLNonNullType]
        string Id { get; set; }
        [GraphQLNonNullType]
        string DateDisplay { get; set; }
    }

    [GraphQLName("CatalogueHomeItem")]
    public interface ICatalogueHomeItem
    {
    }

    [Shareable]
    public class CatalogueHomeSpecialsCard : ICatalogueHomeItem, ICatalogueHomeCard
    {
        [GraphQLDescription(@"the URL of the image resource for the card")]
        [GraphQLNonNullType]
        public string Image { get; set; }
        [GraphQLDescription(@"e.g., ""My Specials Catalogue""")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"a unique ID so that we know what catalogue to open when the item is clicked")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLDescription(@"Offer valid date range
e.g. Offer valid Wed 8 Jun - Tue 14 Jun 2022")]
        [GraphQLNonNullType]
        public string DateDisplay { get; set; }
    }

    [Shareable]
    public class CatalogueHomeChangeStore : ICatalogueHomeItem
    {
        [GraphQLNonNullType]
        public string StoreName { get; set; }
        [GraphQLNonNullType]
        public string PostCode { get; set; }
        [GraphQLNonNullType]
        public Button Button { get; set; }
    }

    [Shareable]
    public class CatalogueHomeTermsAndConditions : ICatalogueHomeItem
    {
        [GraphQLNonNullType]
        public Button Button { get; set; }
        [GraphQLDescription(@"A collated array of the terms and conditions for every catalogue")]
        [GraphQLNonNullType]
        public ICollection<CatalogueHomeTerm> Terms { get; set; }
    }

    [Shareable]
    public class CatalogueHomeTerm
    {
        [GraphQLDescription(@"e.g., Weekly Specials NSW - Sneak Peek")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"e.g., On sale from Wednesday 8th June, 2022 until...")]
        [GraphQLNonNullType]
        public string Body { get; set; }
    }

    [Shareable]
    public class CatalogueHomeCatalogueCard : ICatalogueHomeItem, ICatalogueHomeCard
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Image { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string DateDisplay { get; set; }
        public string? Description { get; set; }
        public string? DownloadLink { get; set; }
        [GraphQLDescription(@"An optional sneak peek pink decoration for future catalogues
displayed on Tuesday")]
        public CatalogueHomeCardSneakPeek? SneakPeek { get; set; }
        [GraphQLDescription(@"Tracking metadata for analytics")]
        [GraphQLNonNullType]
        public CatalogueHomeCardTracking Tracking { get; set; }
        [GraphQLDescription(@"Represents the page path from content management system(AEM)")]
        public string? PagePath { get; set; }
    }

    [Shareable]
    public class CatalogueHomeCardSneakPeek
    {
        [GraphQLDescription(@"e.g., Sneak Peek")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"e.g., On sale")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"A date in EEE d/M format
e.g., Wed. 8/6")]
        [GraphQLNonNullType]
        public string DateDisplay { get; set; }
    }

    [Shareable]
    public class CatalogueHomeCardTracking
    {
        [GraphQLDescription(@"The id of the catalogue e.g,. 45341")]
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public CatalogueHomeCardTrackingValidity Validity { get; set; }
        [GraphQLDescription(@"e.g., Weekly Specials NSW")]
        [GraphQLNonNullType]
        public string Type { get; set; }
        [GraphQLDescription(@"All dates in following format: yyyy-MM-dd HH:mm:ss")]
        [GraphQLNonNullType]
        public string PublishDate { get; set; }
        [GraphQLNonNullType]
        public string StartDate { get; set; }
        [GraphQLNonNullType]
        public string EndDate { get; set; }
        [GraphQLNonNullType]
        public string PostCode { get; set; }
        [GraphQLDescription(@"e.g., NSW")]
        [GraphQLNonNullType]
        public string State { get; set; }
    }

    [Shareable]
    public class CatalogueLanding
    {
        [GraphQLNonNullType]
        public ICollection<ICatalogueLandingItem> Items { get; set; }
    }

    [GraphQLName("CatalogueLandingCard")]
    public interface ICatalogueLandingCard
    {
        [GraphQLNonNullType]
        string Title { get; set; }
        [GraphQLNonNullType]
        string Image { get; set; }
        [GraphQLNonNullType]
        string Id { get; set; }
    }

    [GraphQLName("CatalogueLandingItem")]
    public interface ICatalogueLandingItem
    {
    }

    [Shareable]
    public class CatalogueLandingHeader : ICatalogueLandingItem
    {
        [GraphQLDescription(@"The display image URL for header")]
        [GraphQLNonNullType]
        public string HeaderImage { get; set; }
    }

    [Shareable]
    public class CatalogueLandingCategoryCard : ICatalogueLandingItem, ICatalogueLandingCard
    {
        [GraphQLDescription(@"The display title for a Category Card")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"The display image URL for a Category Card")]
        [GraphQLNonNullType]
        public string Image { get; set; }
        [GraphQLDescription(@"The category ID for a Category Card")]
        [GraphQLNonNullType]
        public string Id { get; set; }
    }

    [Shareable]
    public class CatalogueLandingPrimaryContentCard : ICatalogueLandingItem, ICatalogueLandingCard
    {
        [GraphQLDescription(@"The display title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"The display image URL for Primary Content Card")]
        [GraphQLNonNullType]
        public string Image { get; set; }
        [GraphQLDescription(@"The subtitle shows 'xxx PRODUCTS'")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
    }

    [Shareable]
    public class CatalogueListing
    {
        public CatalogueListingHeader? Header { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICatalogueListingItem> Items { get; set; }
    }

    [GraphQLName("CatalogueListingItem")]
    public interface ICatalogueListingItem
    {
    }

    [Shareable]
    public class CatalogueListingHeader
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? BackgroundImageUrl { get; set; }
        public string? BackgroundColor { get; set; }
    }

    [GraphQLDescription(@"A full width ""hero"" product card.")]
    [Shareable]
    public class CatalogueListingHeroProductCard : ICatalogueListingItem
    {
        [GraphQLNonNullType]
        public ProductCard Product { get; set; }
    }

    [Shareable]
    public class PromotionDetailsHeader : ICataloguePromotionDetailsItem
    {
        [GraphQLDescription(@"Represents the title")]
        [GraphQLNonNullType]
        public string PromotionDetailsHeaderTitle { get; set; }
        [GraphQLDescription(@"Color of the title, hex code. e.g. #c45021")]
        public string? PromotionDetailsHeaderTitleColor { get; set; }
        [GraphQLDescription(@"Represents the sub title")]
        public string? PromotionDetailsHeaderSubtitle { get; set; }
        [GraphQLDescription(@"Represents the image url")]
        public string? PromotionDetailsHeaderImage { get; set; }
    }

    [Shareable]
    public class TermsAndConditions : ICataloguePromotionDetailsItem
    {
        [GraphQLDescription(@"Title of terms and conditions")]
        [GraphQLNonNullType]
        public string TermsAndConditionsTitle { get; set; }
        [GraphQLDescription(@"Content of terms and conditions")]
        [GraphQLNonNullType]
        public string TermsAndConditionsContent { get; set; }
    }

    [GraphQLName("CataloguePromotionDetailsItem")]
    public interface ICataloguePromotionDetailsItem
    {
    }

    [Shareable]
    public class CataloguePromotionDetails
    {
        [GraphQLDescription(@"List of catalogue promotion details item")]
        [GraphQLNonNullType]
        public ICollection<ICataloguePromotionDetailsItem> Items { get; set; }
    }

    [Shareable]
    public class CataloguePromotionListing
    {
        public CataloguePromotionListingHeader? Header { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICataloguePromotionListingItem> Items { get; set; }
    }

    [GraphQLName("CataloguePromotionGroupItem")]
    public interface ICataloguePromotionGroupItem
    {
    }

    [GraphQLName("CataloguePromotionListingItem")]
    public interface ICataloguePromotionListingItem
    {
    }

    [Shareable]
    public class CataloguePromotionGroup : ICataloguePromotionListingItem
    {
        public ImageWithAlt? CataloguePromotionGroupBadge { get; set; }
        public string? CataloguePromotionGroupBackgroundColor { get; set; }
        public ICollection<ICataloguePromotionGroupItem>? CataloguePromotionGroupItems { get; set; }
    }

    [Shareable]
    public class ProductHeroCard : ICatalogueBrowsePromotionPageItem, ICataloguePromotionGroupItem, ICataloguePromotionListingItem
    {
        [GraphQLNonNullType]
        public ProductCard ProductHeroCardProduct { get; set; }
    }

    [Shareable]
    public class CataloguePromotionListingHeader
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? BackgroundImageUrl { get; set; }
        public string? BackgroundColor { get; set; }
    }

    [Shareable]
    public class IdVerificationCompleteFail : IIdVerificationCompleteResponse
    {
        [GraphQLNonNullType]
        public IdVerificationBottomSheet IdVerificationBottomSheet { get; set; }
    }

    [GraphQLName("IdVerificationCompleteResponse")]
    public interface IIdVerificationCompleteResponse
    {
    }

    [Shareable]
    public class IdVerificationCompleteSuccess : IIdVerificationCompleteResponse
    {
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class IdVerificationInitResponse
    {
        [GraphQLNonNullType]
        public string VerificationFormUrl { get; set; }
        [GraphQLNonNullType]
        public string CallbackUrlPattern { get; set; }
    }

    [Shareable]
    public class IdVerificationBottomSheet
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Body { get; set; }
        [GraphQLDescription(@"The image urls for liquor items")]
        [GraphQLNonNullType]
        public ICollection<string> ImageUrls { get; set; }
        public Button? PrimaryButton { get; set; }
        public Button? SecondaryButton { get; set; }
    }

    [Shareable]
    public class ApplyCheckoutCreditResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        [GraphQLDescription(@"message used for failure")]
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"checkout summary after applying store credits")]
        public CheckoutContent? CheckoutSummary { get; set; }
    }

    [Shareable]
    public class RemoveCheckoutCreditResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        [GraphQLDescription(@"message used for failure")]
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"checkout summary after removing store credits")]
        public CheckoutContent? CheckoutSummary { get; set; }
    }

    [GraphQLName("CheckoutSegmentError")]
    public interface ICheckoutSegmentError
    {
    }

    [Shareable]
    public class AlertMessage : ICheckoutSegmentError
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class SnackBar : ICheckoutSegmentMessage, ICheckoutSegmentError
    {
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"source where the message snackbar triggerred")]
        [GraphQLNonNullType]
        public string EventSource { get; set; }
    }

    [Shareable]
    public class LegacyError
    {
        [GraphQLNonNullType]
        public int ErrorCode { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public string Key { get; set; }
    }

    [Shareable]
    public class HasHaveYouForgotten
    {
        [GraphQLNonNullType]
        public bool Status { get; set; }
    }

    [Shareable]
    public class CheckoutOrderTotalDetailsRow
    {
        [GraphQLDescription(@"eg: Subtotal or You'll collect")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Style type of title")]
        [GraphQLNonNullType]
        public CheckoutSummaryValueType TitleType { get; set; }
        [GraphQLDescription(@"eg: 72 points or $21.00")]
        [GraphQLNonNullType]
        public string Value { get; set; }
        [GraphQLDescription(@"Type of value")]
        [GraphQLNonNullType]
        public CheckoutSummaryValueType ValueType { get; set; }
        [GraphQLDescription(@"Optional image url")]
        public string? ImageUrl { get; set; }
        [GraphQLDescription(@"Optional message for popup dialog box")]
        public CheckoutOrderTotalDetailsRowMessage? Message { get; set; }
    }

    [Shareable]
    public class CheckoutOrderTotalDetailsRowMessage
    {
        public string? Title { get; set; }
        public string? Body { get; set; }
    }

    [Shareable]
    public class CheckoutOrderTotalDetailsSummaryRow
    {
        [GraphQLDescription(@"eg: Subtotal or You'll collect")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"eg: 72 points or $21.00")]
        [GraphQLNonNullType]
        public string Value { get; set; }
        [GraphQLDescription(@"payable amount number eg: 21.00")]
        [GraphQLNonNullType]
        public decimal BalanceToPay { get; set; }
        [GraphQLDescription(@"Optional button text eg: Continue")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        [GraphQLDescription(@"Next step on button click")]
        public CheckoutProgressId? ProgressId { get; set; }
        [GraphQLDescription(@"is the button enabled")]
        [GraphQLNonNullType]
        public bool IsEnabled { get; set; }
    }

    [Shareable]
    public class CheckoutRefundInfoBottomSheet : IBottomSheetContent
    {
        [GraphQLNonNullType]
        public string BottomSheetTitle { get; set; }
        [GraphQLNonNullType]
        public string BottomSheetBody { get; set; }
        public bool? ShowOnceOnly { get; set; }
        public DownloadableAsset? BannerAsset { get; set; }
        public ContentCta? PrimaryCta { get; set; }
        public ContentCta? SecondaryCta { get; set; }
    }

    [Shareable]
    public class CheckoutOrderTotalDetails
    {
        public InlineMessage? InlineMessage { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICollection<CheckoutOrderTotalDetailsRow>> Sections { get; set; }
        [GraphQLNonNullType]
        public CheckoutOrderTotalDetailsSummaryRow Total { get; set; }
        [GraphQLDeprecated(@"Replaced by product restriction feature")]
        public CheckoutReviewProductsList? ReviewProducts { get; set; }
        public CheckoutRefundInfoBottomSheet? RefundInfo { get; set; }
    }

    [GraphQLName("PaymentInstrumentsResponse")]
    public interface IPaymentInstrumentsResponse
    {
    }

    [Shareable]
    public class PaymentInstrumentResponseSuccess : IPaymentInstrumentsResponse
    {
        [GraphQLNonNullType]
        public GiftCardSection GiftCardSection { get; set; }
        [GraphQLNonNullType]
        public PaymentMethodSection PaymentMethodSection { get; set; }
        [GraphQLNonNullType]
        public PaymentInstrumentTotalDetails PaymentInstrumentTotalDetails { get; set; }
        public string? SnackBarMessage { get; set; }
        public string? FooterMessageMd { get; set; }
        [GraphQLNonNullType]
        public ICollection<Analytics> Analytics { get; set; }
    }

    [Shareable]
    public class PaymentInstrumentResponseValidationFailure : IPaymentInstrumentsResponse
    {
        [GraphQLNonNullType]
        public string ErrorMessage { get; set; }
        [GraphQLNonNullType]
        public string ErrorTitle { get; set; }
        public Analytics? ImpressionAnalytics { get; set; }
    }

    [Shareable]
    public class GiftCardSection
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<IGiftCardItem> GiftCards { get; set; }
    }

    [GraphQLName("GiftCardItem")]
    public interface IGiftCardItem
    {
    }

    [Shareable]
    public class AddGiftCard : IGiftCardItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public Analytics ClickAnalytics { get; set; }
    }

    [Shareable]
    public class LinkedGiftCard : IGiftCardItem
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLNonNullType]
        public string AmountTitle { get; set; }
        [GraphQLDescription(@"Balance value")]
        [GraphQLNonNullType]
        public string AmountValue { get; set; }
        [GraphQLDescription(@"Amount to redeem in cents")]
        [GraphQLNonNullType]
        public int AmountRedeem { get; set; }
        public InsetBanner? ErrorBanner { get; set; }
    }

    [Shareable]
    public class UnlinkedGiftCard : IGiftCardItem
    {
        [GraphQLNonNullType]
        public string Number { get; set; }
        [GraphQLNonNullType]
        public string Pin { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLNonNullType]
        public string AmountTitle { get; set; }
        [GraphQLNonNullType]
        public string AmountValue { get; set; }
        [GraphQLDescription(@"Amount to redeem in cents")]
        [GraphQLNonNullType]
        public int AmountRedeem { get; set; }
        public InsetBanner? ErrorBanner { get; set; }
    }

    [Shareable]
    public class PaymentMethodSection
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<IPaymentMethodItem> PaymentMethods { get; set; }
    }

    [GraphQLName("PaymentMethodItem")]
    public interface IPaymentMethodItem
    {
    }

    [Shareable]
    public class AddCreditCard : IPaymentMethodItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public Analytics ClickAnalytics { get; set; }
    }

    [Shareable]
    public class LinkedCreditCard : IPaymentMethodItem
    {
        [GraphQLNonNullType]
        public string Icon { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLNonNullType]
        public string AmountTitle { get; set; }
        [GraphQLNonNullType]
        public string AmountValue { get; set; }
        [GraphQLNonNullType]
        public int AmountToPay { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string CvvUrl { get; set; }
    }

    [Shareable]
    public class UnlinkedCreditCard : IPaymentMethodItem
    {
        [GraphQLNonNullType]
        public string Icon { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLNonNullType]
        public string AmountTitle { get; set; }
        [GraphQLNonNullType]
        public string AmountValue { get; set; }
        [GraphQLNonNullType]
        public int AmountToPay { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
    }

    [Shareable]
    public class ExpiredCreditCard : IPaymentMethodItem
    {
        [GraphQLNonNullType]
        public string Icon { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
    }

    [Shareable]
    public class AddPayPal : IPaymentMethodItem
    {
        [GraphQLNonNullType]
        public string Icon { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public AddPayPalAlert Alert { get; set; }
    }

    [Shareable]
    public class AddPayPalAlert
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public string PrimaryButtonTitle { get; set; }
        [GraphQLNonNullType]
        public string SecondaryButtonTitle { get; set; }
        [GraphQLNonNullType]
        public Analytics ClickAnalytics { get; set; }
    }

    [Shareable]
    public class LinkedPayPal : IPaymentMethodItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Icon { get; set; }
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLNonNullType]
        public string AmountTitle { get; set; }
        [GraphQLNonNullType]
        public string AmountValue { get; set; }
        [GraphQLNonNullType]
        public int AmountToPay { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
    }

    [Shareable]
    public class GooglePay : IPaymentMethodItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLNonNullType]
        public string AmountTitle { get; set; }
        [GraphQLNonNullType]
        public string AmountValue { get; set; }
        [GraphQLNonNullType]
        public int AmountToPay { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> SupportedNetworks { get; set; }
    }

    [Shareable]
    public class ApplePay : IPaymentMethodItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLNonNullType]
        public string AmountTitle { get; set; }
        [GraphQLNonNullType]
        public string AmountValue { get; set; }
        [GraphQLNonNullType]
        public int AmountToPay { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> SupportedNetworks { get; set; }
    }

    [Shareable]
    public class PaymentInstrumentTotalDetails
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDeprecated(@"Use button instead")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        [GraphQLDeprecated(@"Use button instead")]
        [GraphQLNonNullType]
        public bool ButtonEnabled { get; set; }
        [GraphQLNonNullType]
        public IPlaceOrderButton Button { get; set; }
    }

    [GraphQLName("PlaceOrderButton")]
    public interface IPlaceOrderButton
    {
    }

    [Shareable]
    public class PlaceOrderButtonDefault : IPlaceOrderButton
    {
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLNonNullType]
        public bool IsEnabled { get; set; }
        [GraphQLNonNullType]
        public Analytics Analytics { get; set; }
    }

    [Shareable]
    public class PlaceOrderButtonApplePay : IPlaceOrderButton
    {
        [GraphQLNonNullType]
        public ICollection<string> SupportedNetworks { get; set; }
        [GraphQLNonNullType]
        public Analytics Analytics { get; set; }
    }

    [Shareable]
    public class PlaceOrderButtonGooglePay : IPlaceOrderButton
    {
        [GraphQLNonNullType]
        public ICollection<string> SupportedNetworks { get; set; }
        [GraphQLNonNullType]
        public Analytics Analytics { get; set; }
    }

    [Shareable]
    public class AddCreditCardResponse
    {
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLNonNullType]
        public bool IsMandatorySave { get; set; }
        public string? InfoText { get; set; }
        [GraphQLNonNullType]
        public Analytics ClickAnalytics { get; set; }
    }

    [Shareable]
    public class LinkPayPalResponse
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLDescription(@"approval Url")]
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLNonNullType]
        public string RedirectUrl { get; set; }
    }

    [Shareable]
    public class LinkCreditCardResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        public string? PaymentMethodId { get; set; }
    }

    [Shareable]
    public class AddGiftCardResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        public string? Id { get; set; }
        public string? Message { get; set; }
    }

    [GraphQLName("UnlinkCreditCardResponse")]
    public interface IUnlinkCreditCardResponse
    {
    }

    [Shareable]
    public class UnlinkCreditCardSuccess : IUnlinkCreditCardResponse
    {
        public bool? _ { get; set; }
    }

    [Shareable]
    public class UnlinkCreditCardValidationFailure : IUnlinkCreditCardResponse
    {
        [GraphQLNonNullType]
        public string ErrorMessage { get; set; }
        [GraphQLNonNullType]
        public string ErrorTitle { get; set; }
        [GraphQLNonNullType]
        public string ErrorButton { get; set; }
        [GraphQLNonNullType]
        public Analytics Analytics { get; set; }
    }

    [Shareable]
    public class UnlinkCreditCardFailure : IUnlinkCreditCardResponse
    {
        [GraphQLNonNullType]
        public string ErrorMessage { get; set; }
        [GraphQLNonNullType]
        public Analytics Analytics { get; set; }
    }

    [Shareable]
    public class UnlinkGiftCardResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        public string? Message { get; set; }
    }

    [Shareable]
    public class UnlinkPayPalResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        [GraphQLDescription(@" when not successful, this will be populated ")]
        public string? Message { get; set; }
    }

    [GraphQLName("WpayPaymentResponse")]
    public interface IWpayPaymentResponse
    {
    }

    [Shareable]
    public class WpayPaymentSuccess : IWpayPaymentResponse
    {
        [GraphQLNonNullType]
        public int OrderId { get; set; }
    }

    [Shareable]
    public class WpayPaymentFailure : IWpayPaymentResponse
    {
        [GraphQLNonNullType]
        public string ErrorMessage { get; set; }
        [GraphQLNonNullType]
        public Analytics Analytics { get; set; }
        [GraphQLNonNullType]
        public bool RegenerateIdempotencyKey { get; set; }
    }

    [Shareable]
    public class CheckoutProductInfo
    {
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLNonNullType]
        public string ProductName { get; set; }
        [GraphQLNonNullType]
        public decimal Price { get; set; }
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }
        [GraphQLNonNullType]
        public decimal Subtotal { get; set; }
        [GraphQLNonNullType]
        public bool IsAvailable { get; set; }
        public string? SellerName { get; set; }
        public string? BrandName { get; set; }
        public string? DispatchNote { get; set; }
        public string? Source { get; set; }
    }

    [Shareable]
    public class CheckoutSegmentProgress
    {
        [GraphQLNonNullType]
        public string Index { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"progress identifier")]
        [GraphQLNonNullType]
        public CheckoutProgressId Id { get; set; }
    }

    [GraphQLName("ApplyPromoCodeResult")]
    public interface IApplyPromoCodeResult
    {
    }

    [Shareable]
    public class ApplyPromoCodeFail : IApplyPromoCodeResult
    {
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class ApplyPromoCodeSuccess : IApplyPromoCodeResult
    {
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class ApplyPromoCodeReplaceConfirmation : IApplyPromoCodeResult
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public string PrimaryButtonTitle { get; set; }
        [GraphQLNonNullType]
        public string SecondaryButtonTitle { get; set; }
    }

    [Shareable]
    public class ApplyPromoCodeAdditionalInfo : IApplyPromoCodeResult
    {
        [GraphQLNonNullType]
        public InsetBanner Banner { get; set; }
        [GraphQLNonNullType]
        public ApplyPromoCodeBannerType Type { get; set; }
        [GraphQLNonNullType]
        public Analytics ClickAnalytics { get; set; }
    }

    [Shareable]
    public class ApplyCheckoutPromoCodeResponse
    {
        [GraphQLNonNullType]
        public IApplyPromoCodeResult Result { get; set; }
        [GraphQLDescription(@"FE decide if it need to query the checkout summary to refresh
e.g. apply promotion outside of checkout summary don't need to query this field")]
        public CheckoutContent? CheckoutSummary { get; set; }
    }

    [Shareable]
    public class RemoveCheckoutPromoCodeResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        [GraphQLDescription(@"message used for failure")]
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"checkout summary after removing store credits")]
        public CheckoutContent? CheckoutSummary { get; set; }
    }

    [Shareable]
    public class CheckoutReviewProductsList
    {
        [GraphQLNonNullType]
        public ICollection<ICheckoutReviewProductRow> UnavailableOrderItems { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICheckoutReviewProductRow> RestrictedOrderItems { get; set; }
        [GraphQLNonNullType]
        public ICollection<CheckoutReviewSupplyLimitGroups> ExceededSupplyLimitProductGroups { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICheckoutReviewProductRow> RestrictedProductsByDeliveryMethod { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICheckoutReviewProductRow> RestrictedProductsByDeliPlatter { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICheckoutReviewProductRow> AvailableOrderItems { get; set; }
    }

    [Shareable]
    public class CheckoutReviewSupplyLimitGroups
    {
        [GraphQLNonNullType]
        public ICollection<ICheckoutReviewProductRow> Products { get; set; }
        public string? ErrorMessage { get; set; }
    }

    [GraphQLName("CheckoutReviewProductRow")]
    public interface ICheckoutReviewProductRow
    {
        decimal? Quantity { get; set; }
        decimal? Subtotal { get; set; }
        string? CheckoutErrorMessage { get; set; }
        int? Stockcode { get; set; }
        string? Name { get; set; }
        string? DisplayName { get; set; }
        string? VolumeSize { get; set; }
        string? ImagePath { get; set; }
        bool? IsAvailable { get; set; }
        bool? IsRestricted { get; set; }
        decimal? MinQuantity { get; set; }
        decimal? SupplyLimit { get; set; }
        decimal? Price { get; set; }
    }

    [Shareable]
    public class CheckoutReviewProduct : ICheckoutReviewProductRow
    {
        public decimal? Quantity { get; set; }
        public decimal? Subtotal { get; set; }
        public string? CheckoutErrorMessage { get; set; }
        public int? Stockcode { get; set; }
        public string? Name { get; set; }
        public string? DisplayName { get; set; }
        public string? VolumeSize { get; set; }
        public string? ImagePath { get; set; }
        public bool? IsAvailable { get; set; }
        public bool? IsRestricted { get; set; }
        public decimal? MinQuantity { get; set; }
        public decimal? SupplyLimit { get; set; }
        public decimal? Price { get; set; }
    }

    [Shareable]
    public class CheckoutReviewProductSupplyLimit : ICheckoutReviewProductRow
    {
        public decimal? Quantity { get; set; }
        public decimal? Subtotal { get; set; }
        public string? CheckoutErrorMessage { get; set; }
        public int? Stockcode { get; set; }
        public string? Name { get; set; }
        public string? DisplayName { get; set; }
        public string? VolumeSize { get; set; }
        public string? ImagePath { get; set; }
        public bool? IsAvailable { get; set; }
        public bool? IsRestricted { get; set; }
        public decimal? MinQuantity { get; set; }
        public decimal? SupplyLimit { get; set; }
        public decimal? Price { get; set; }
        [GraphQLDescription(@"Additional field for supply limit items")]
        public decimal? ProductGroupSupplyLimit { get; set; }
    }

    [Shareable]
    public class CheckoutReviewProductContent
    {
        [GraphQLNonNullType]
        public ICollection<LegacyError> LegacyErrors { get; set; }
        public CheckoutReviewProductsList? ReviewProducts { get; set; }
    }

    [Shareable]
    public class CheckoutSubstitutionPreferences
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Body { get; set; }
        [GraphQLNonNullType]
        public SubstitutionState State { get; set; }
        [GraphQLNonNullType]
        public CheckoutInfoDialog Info { get; set; }
    }

    [Shareable]
    public class CheckoutProductSubstitutionPreference
    {
        [GraphQLNonNullType]
        public SubstitutionState State { get; set; }
        [GraphQLDescription(@" Optional header, useful in error state ")]
        public string? Header { get; set; }
        [GraphQLDescription(@"Error State: Unable to load pref
Non Error State: Substitute")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Hold the value for the action button in the row.")]
        [GraphQLNonNullType]
        public Button Action { get; set; }
    }

    [Shareable]
    public class CheckoutOrderSummary : ICheckoutSegmentContent, IOrderConfirmationContentSegment
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? SummaryText { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICollection<CheckoutOrderTotalDetailsRow>> Sections { get; set; }
    }

    [Shareable]
    public class CheckoutTermsConditions : ICheckoutSegmentContent, IFulfilmentExtraInfoContent
    {
        [GraphQLNonNullType]
        public string MarkdownText { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeConfirmation
    {
        [GraphQLNonNullType]
        public ICollection<IDeliveryUnlimitedSubscribeConfirmationFeedItem> Feed { get; set; }
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribeConfirmationAnalytics Analytics { get; set; }
    }

    [GraphQLName("DeliveryUnlimitedSubscribeConfirmationFeedItem")]
    public interface IDeliveryUnlimitedSubscribeConfirmationFeedItem
    {
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeConfirmationLineItem : IDeliveryUnlimitedSubscribeConfirmationFeedItem
    {
        public string? Title { get; set; }
        [GraphQLNonNullType]
        public string Label { get; set; }
        public string? IconUrl { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeConfirmationAnalytics
    {
        [GraphQLNonNullType]
        public string SubscriptionType { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeFeature : IDeliveryUnlimitedSubscribePlanTypeFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
        [GraphQLNonNullType]
        public string Description { get; set; }
        public DeliveryUnlimitedSubscribeFeatureLink? Link { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeLink
    {
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLNonNullType]
        public string Url { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedPayment
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        public string? Description { get; set; }
        public DeliveryUnlimitedIconItem? IconItem { get; set; }
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribeFooter Footer { get; set; }
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribeTerms Terms { get; set; }
        [GraphQLNonNullType]
        public PaymentMethodSection PaymentMethodSection { get; set; }
        [GraphQLNonNullType]
        public ICollection<Analytics> Analytics { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribePayment
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public string PriceDescription { get; set; }
        [GraphQLNonNullType]
        public string PriceLabel { get; set; }
        [GraphQLNonNullType]
        public int Price { get; set; }
        public string? Description { get; set; }
        public DeliveryUnlimitedIconItem? IconItem { get; set; }
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribeFooter Footer { get; set; }
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribeTerms Terms { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedIconItem
    {
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
        [GraphQLNonNullType]
        public string Label { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeTerms
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<DeliveryUnlimitedSubscribeTermsItem> Terms { get; set; }
        [GraphQLNonNullType]
        public string ErrorMessage { get; set; }
        [GraphQLNonNullType]
        public Button Button { get; set; }
        public Analytics? ImpressionAnalytics { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeTermsItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<DeliveryUnlimitedSubscribeLink> Links { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribePlans
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<DeliveryUnlimitedSubscribePlanType> PlanTypes { get; set; }
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribeFooter Footer { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribePlanType
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [ID]
        public string? DefaultPlanSelection { get; set; }
        [GraphQLNonNullType]
        public ICollection<IDeliveryUnlimitedSubscribePlanTypeFeedItem> Feed { get; set; }
    }

    [GraphQLName("DeliveryUnlimitedSubscribePlanTypeFeedItem")]
    public interface IDeliveryUnlimitedSubscribePlanTypeFeedItem
    {
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeFeatureLink
    {
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLNonNullType]
        public string Url { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribePlan : IDeliveryUnlimitedSubscribePlanTypeFeedItem
    {
        [GraphQLNonNullType]
        public string Identifier { get; set; }
        [GraphQLNonNullType]
        public string PlanTitle { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public int Price { get; set; }
        public Badge? Badge { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeSubmissionResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        public string? Message { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeSummary
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? ImageUrl { get; set; }
        public DownloadableAsset? BannerAsset { get; set; }
        public Badge? Badge { get; set; }
        [GraphQLNonNullType]
        public ICollection<DeliveryUnlimitedSubscribeFeature> Features { get; set; }
        public DeliveryUnlimitedSubscribeDisclaimer? Disclaimer { get; set; }
        public DeliveryUnlimitedSubscribeTermsMarkdown? TermsMarkdown { get; set; }
        [GraphQLNonNullType]
        public DeliveryUnlimitedSubscribeFooter Footer { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeDisclaimer
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Content { get; set; }
        [GraphQLNonNullType]
        public ICollection<DeliveryUnlimitedSubscribeLink> Links { get; set; }
    }

    [Shareable]
    public class DeliveryUnlimitedSubscribeTermsMarkdown
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Content { get; set; }
    }

    [Shareable]
    public class FreshMagHome
    {
        [GraphQLNonNullType]
        public ICollection<IFreshMagHomeItem?> Items { get; set; }
    }

    [GraphQLName("FreshMagHomeItem")]
    public interface IFreshMagHomeItem
    {
    }

    [Shareable]
    public class FreshMagSummary : IFreshMagHomeItem
    {
        [GraphQLNonNullType]
        public string CoverImageUrl { get; set; }
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLNonNullType]
        public string MagazineId { get; set; }
        public string? ButtonTitle { get; set; }
    }

    [GraphQLDescription(@"More screen CiscoWiFi option")]
    [Shareable]
    public class MoreCiscoWiFi : IMoreFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
    }

    [GraphQLDescription(@"Terms and conditions for deleting account")]
    [Shareable]
    public class DeleteAccountMutationResponse
    {
        [GraphQLDescription(@"returns the deletion is successful or not (e.g., true or false)")]
        [GraphQLNonNullType]
        public bool Success { get; set; }
    }

    [GraphQLDescription(@"Terms and conditions for deleting account")]
    [Shareable]
    public class DeleteAccountTnCResponse
    {
        [GraphQLDescription(@"Title e.g. Some important things you need to know")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Describe the process around account deletion")]
        [GraphQLNonNullType]
        public string TermsAndConditions { get; set; }
        [GraphQLDescription(@"Terms and conditions accept text")]
        [GraphQLNonNullType]
        public string TermsAndConditionsAgreeText { get; set; }
        [GraphQLDescription(@"Delete button")]
        [GraphQLNonNullType]
        public Button DeleteButton { get; set; }
    }

    [GraphQLDescription(@"More Screen Delivery Unlimited Tile")]
    [Shareable]
    public class MoreDeliveryUnlimited : IMoreFeedItem
    {
        [GraphQLDescription(@"Delivery Unlimited title,")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"The text/copy to be displayed as a compliment to the title")]
        public string? Subtitle { get; set; }
        [GraphQLDescription(@"The text/copy for the brand label")]
        public string? Badge { get; set; }
        [GraphQLDescription(@"Current state of Delivery Unlimited
(e.g. `SUBSCRIBED` or `NOT_SUBSCRIBED`)")]
        [GraphQLNonNullType]
        public MoreDeliveryUnlimitedStatus Status { get; set; }
        [GraphQLNonNullType]
        public string SubscribeUrl { get; set; }
    }

    [GraphQLDescription(@"NOTE: This is deprecated
OneLogin accounts will always have activated Rewards account

More screen Rewards Card Activation tile")]
    [Shareable]
    public class MoreActivateRewardsCard : IMoreFeedItem
    {
        [GraphQLDescription(@"Activation copy")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Rewards card number")]
        [GraphQLNonNullType]
        public string CardNumber { get; set; }
        [GraphQLDescription(@"Rewards state")]
        [GraphQLNonNullType]
        public string RewardsState { get; set; }
    }

    [GraphQLDescription(@"More screen Rewards Card details tile")]
    [Shareable]
    public class MoreRewardsCard : IMoreFeedItem
    {
        [GraphQLDescription(@"Rewards card number")]
        [GraphQLNonNullType]
        public string CardNumber { get; set; }
        [GraphQLDescription(@"Can be unlinked from shopper account")]
        [GraphQLNonNullType]
        public bool CanBeUnlinked { get; set; }
        [GraphQLDescription(@"Rewards state")]
        [GraphQLNonNullType]
        public string RewardsState { get; set; }
    }

    [Shareable]
    public class CancelOrderResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        public string? Message { get; set; }
        public CancelOrderReason? Reason { get; set; }
        public string? Title { get; set; }
    }

    [Shareable]
    public class OrderConfirmationBannerImage : IOrderConfirmationContentSegment
    {
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string AltText { get; set; }
    }

    [Shareable]
    public class OrderConfirmationHeader : IOrderConfirmationContentSegment
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<CheckoutOrderTotalDetailsRow> Order { get; set; }
    }

    [Shareable]
    public class OrderConfirmationFooterText : IOrderConfirmationContentSegment
    {
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [Shareable]
    public class OrderInfo
    {
        [GraphQLNonNullType]
        public ICollection<CheckoutProductInfo> ProductsInfo { get; set; }
        [GraphQLNonNullType]
        public bool IsDeliveryNow { get; set; }
        [GraphQLNonNullType]
        public bool IsDirectToBootNow { get; set; }
        [GraphQLNonNullType]
        public bool IsDeliveryUnlimited { get; set; }
        [GraphQLNonNullType]
        public string ShopperID { get; set; }
        [GraphQLNonNullType]
        public string OrderNumber { get; set; }
        [GraphQLNonNullType]
        public string OrderTotal { get; set; }
        [GraphQLNonNullType]
        public string DeliveryFee { get; set; }
        [GraphQLNonNullType]
        public string DeliveryCity { get; set; }
        [GraphQLNonNullType]
        public string DeliveryMethod { get; set; }
        [GraphQLNonNullType]
        public bool IsCrowdSourced { get; set; }
        [GraphQLNonNullType]
        public string PackagingFeeLabel { get; set; }
        [GraphQLNonNullType]
        public bool HasRewards { get; set; }
        [GraphQLNonNullType]
        public string OrderDiscount { get; set; }
        [GraphQLNonNullType]
        public string Subtotal { get; set; }
        [GraphQLNonNullType]
        public string RewardsCreditsUsed { get; set; }
        [GraphQLNonNullType]
        public string FulfilmentMethod { get; set; }
        [GraphQLNonNullType]
        public bool IsEditedOrder { get; set; }
        [GraphQLNonNullType]
        public string OrderReference { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> AppliedCoupons { get; set; }
        [GraphQLNonNullType]
        public string RewardsDollarsAmount { get; set; }
        [GraphQLNonNullType]
        public string StoreCreditAmount { get; set; }
        [GraphQLNonNullType]
        public string PromoCodeCreditAmount { get; set; }
        [GraphQLNonNullType]
        public string DiscountSavingsTotal { get; set; }
        [GraphQLNonNullType]
        public string StoreCreditCode { get; set; }
        [GraphQLNonNullType]
        public string PromoCodeValue { get; set; }
    }

    [Shareable]
    public class OrderConfirmationCMOBroadcastBanner : IOrderConfirmationContentSegment
    {
        public BroadcastBanner? Banner { get; set; }
    }

    [GraphQLName("OrderConfirmationContentSegment")]
    public interface IOrderConfirmationContentSegment
    {
    }

    [Shareable]
    public class OrderConfirmationContent
    {
        [GraphQLNonNullType]
        public ICollection<IOrderConfirmationContentSegment> Content { get; set; }
        public string? ButtonTitle { get; set; }
        [GraphQLNonNullType]
        public OrderInfo OrderInfo { get; set; }
    }

    [GraphQLName("OrderInvoice")]
    public interface IOrderInvoice
    {
    }

    [Shareable]
    public class OrderInvoiceDetail : IOrderInvoice
    {
        [GraphQLNonNullType]
        public string Url { get; set; }
    }

    [Shareable]
    public class OrderInvoiceError : IOrderInvoice
    {
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public InvoiceErrorReason Reason { get; set; }
    }

    [GraphQLName("Order")]
    public interface IOrder
    {
        [GraphQLNonNullType]
        string Title { get; set; }
        [GraphQLNonNullType]
        string Subtitle { get; set; }
        OrderStatus? Status { get; set; }
        [GraphQLNonNullType]
        string Id { get; set; }
        [GraphQLNonNullType]
        string Total { get; set; }
        [GraphQLNonNullType]
        string Date { get; set; }
        [GraphQLNonNullType]
        string TimeLabel { get; set; }
        [GraphQLNonNullType]
        string TimeValue { get; set; }
    }

    [Shareable]
    public class PickUpOrder : IOrdersFeedItem, IOrder
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        public OrderStatus? Status { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Total { get; set; }
        [GraphQLNonNullType]
        public string TimeLabel { get; set; }
        [GraphQLNonNullType]
        public string TimeValue { get; set; }
        [GraphQLNonNullType]
        public string Date { get; set; }
        [GraphQLNonNullType]
        public string ActionTitle { get; set; }
        [GraphQLNonNullType]
        public string ActionPath { get; set; }
        [GraphQLNonNullType]
        public bool WithPickupService { get; set; }
        [GraphQLDeprecated(@"Check-in buttons no longer used starting from OTC v1")]
        public PickUpOrderButtonState? CheckIn15Mins { get; set; }
        [GraphQLDeprecated(@"Check-in buttons no longer used starting from OTC v1 ")]
        public PickUpOrderButtonState? CheckInNow { get; set; }
        public InsetBanner? Banner { get; set; }
    }

    [Shareable]
    public class DeliveryOrder : IOrdersFeedItem, IOrder
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        public OrderStatus? Status { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Total { get; set; }
        [GraphQLNonNullType]
        public string TimeLabel { get; set; }
        [GraphQLNonNullType]
        public string TimeValue { get; set; }
        [GraphQLNonNullType]
        public string Date { get; set; }
        [GraphQLNonNullType]
        public string Location { get; set; }
        public string? WindowTime { get; set; }
        public string? WindowDate { get; set; }
    }

    [Shareable]
    public class CompactOrder : IOrdersFeedItem, IOrder
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        public OrderStatus? Status { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Total { get; set; }
        [GraphQLNonNullType]
        public string Date { get; set; }
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
        [GraphQLNonNullType]
        public string TimeLabel { get; set; }
        [GraphQLNonNullType]
        public string TimeValue { get; set; }
    }

    [Shareable]
    public class OrdersMessage
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class OrderAnalytics : IHomeListAnalytics
    {
        [GraphQLNonNullType]
        public int WoolworthsOrderCount { get; set; }
        [GraphQLNonNullType]
        public int MarketplaceOrderCount { get; set; }
    }

    [GraphQLName("OrdersFeedItem")]
    public interface IOrdersFeedItem
    {
    }

    [Shareable]
    public class Orders
    {
        [GraphQLNonNullType]
        public int TotalItemCount { get; set; }
        public int? NextPage { get; set; }
        public ICollection<IOrdersFeedItem>? Feed { get; set; }
        public OrdersMessage? Message { get; set; }
    }

    [Shareable]
    public class EditOrderDriverInstructionsResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        public EditOrderDriverInstructionsReason? Reason { get; set; }
        public string? Message { get; set; }
    }

    [Shareable]
    public class ToggleOrderLeaveUnattendedResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        public ToggleOrderLeaveUnattendedReason? Reason { get; set; }
        public string? Message { get; set; }
    }

    [Shareable]
    public class OrderProductList
    {
        public OrderProductListFulfilmentFilter? Filter { get; set; }
        [GraphQLNonNullType]
        public string CountLabel { get; set; }
        [GraphQLNonNullType]
        public ICollection<IOrderProductListFeedItem?> Feed { get; set; }
        [GraphQLNonNullType]
        public string TotalLabel { get; set; }
        [GraphQLNonNullType]
        public string TotalValue { get; set; }
        [GraphQLNonNullType]
        public OrderPaymentDetails PaymentDetails { get; set; }
        public OrderHelp? Help { get; set; }
    }

    [GraphQLName("OrderProductListFeedItem")]
    public interface IOrderProductListFeedItem
    {
    }

    [Shareable]
    public class OrderProductListProductCategory : IOrderProductListFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class OrderProductListProduct : IOrderProductListFeedItem
    {
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLNonNullType]
        public string Name { get; set; }
        public string? ProductImage { get; set; }
        [GraphQLNonNullType]
        public string QuantityTitle { get; set; }
        [GraphQLNonNullType]
        public string QuantityValue { get; set; }
        [GraphQLNonNullType]
        public string PriceLabel { get; set; }
        [GraphQLNonNullType]
        public OrderProductListProductPriceStyle PriceStyle { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderProductListSubstitutedProduct> Substitutions { get; set; }
    }

    [Shareable]
    public class OrderProductListSubstitutedProduct
    {
        [GraphQLNonNullType]
        public string ProductLabel { get; set; }
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        public string? ProductImage { get; set; }
        [GraphQLNonNullType]
        public string ProductName { get; set; }
        [GraphQLDeprecated(@"This field will no longer be used in the refreshed UI")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string PriceLabel { get; set; }
        [GraphQLNonNullType]
        public string PriceMatchedLabel { get; set; }
        [GraphQLNonNullType]
        public bool PriceMatched { get; set; }
        [GraphQLNonNullType]
        public string QuantityTitle { get; set; }
        [GraphQLNonNullType]
        public string QuantityValue { get; set; }
        [GraphQLNonNullType]
        public bool ShowRating { get; set; }
    }

    [Shareable]
    public class OrderProductListFulfilmentStatus : IOrderProductListFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Message { get; set; }
    }

    [Shareable]
    public class OrderProductListFulfilmentFilter
    {
        [GraphQLNonNullType]
        public ICollection<OrderProductListFulfilmentFilterItem> Items { get; set; }
    }

    [Shareable]
    public class OrderProductListFulfilmentFilterItem
    {
        [GraphQLNonNullType]
        public string Key { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public bool IsApplied { get; set; }
        [GraphQLNonNullType]
        public int Count { get; set; }
    }

    [Shareable]
    public class DriverRating : IFeedItem
    {
        [GraphQLDescription(@"Survey ID - unique per survey type")]
        [GraphQLNonNullType]
        public string SurveyId { get; set; }
        public DriverRatingStarsSurvey? StarsRatingStep { get; set; }
        public DriverRatingFeedbackAndComments? FeedbackAndCommentsStep { get; set; }
        public DriverRatingThankYou? ThankYouStep { get; set; }
        [GraphQLNonNullType]
        public string OrderNumber { get; set; }
    }

    [Shareable]
    public class DriverRatingStarsSurvey
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string SubTitle { get; set; }
        [GraphQLNonNullType]
        public string StarsRatingQuestion { get; set; }
        [GraphQLNonNullType]
        public CoreInsetAlertUI InsetAlert { get; set; }
        [GraphQLNonNullType]
        public CoreButton SubmitButton { get; set; }
    }

    [Shareable]
    public class DriverRatingFeedbackAndComments
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string SubTitle { get; set; }
        [GraphQLNonNullType]
        public string FeedbackChipsQuestion { get; set; }
        [GraphQLNonNullType]
        public ICollection<Chip> FeedbackChips { get; set; }
        [GraphQLNonNullType]
        public string AdditionalCommentText { get; set; }
        [GraphQLNonNullType]
        public CoreButton DoneButton { get; set; }
    }

    [Shareable]
    public class DriverRatingThankYou
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string SubTitle { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string BadFeedbackMessage { get; set; }
        [GraphQLNonNullType]
        public string BadFeedbackQuestion { get; set; }
        [GraphQLNonNullType]
        public CoreButton BadFeedbackButton { get; set; }
        [GraphQLNonNullType]
        public string NeutralFeedbackMessage { get; set; }
        [GraphQLNonNullType]
        public string GoodFeedbackMessage { get; set; }
    }

    [Shareable]
    public class OrderSummary
    {
        [GraphQLNonNullType]
        public int OrderId { get; set; }
        [GraphQLNonNullType]
        public Feed Feed { get; set; }
        [GraphQLNonNullType]
        public CancelWarning CancelWarning { get; set; }
        [GraphQLNonNullType]
        public EditOrderWarning EditOrderWarning { get; set; }
        public OrderHelp? Help { get; set; }
        [GraphQLNonNullType]
        public OrderStatusType Status { get; set; }
        [GraphQLNonNullType]
        public OrderFulfilmentType FulfilmentMethod { get; set; }
        [GraphQLDescription(@"Progress of the order that aligns with the process stepper")]
        [GraphQLNonNullType]
        public string Progress { get; set; }
        [GraphQLDescription(@"Delivery Step")]
        [GraphQLNonNullType]
        public string ProgressDetail { get; set; }
        [GraphQLNonNullType]
        public bool ShowDelightAnimation { get; set; }
    }

    [Shareable]
    public class Feed
    {
        public int? Cursor { get; set; }
        public int? TotalItems { get; set; }
        [GraphQLNonNullType]
        public ICollection<IFeedItem> Items { get; set; }
    }

    [GraphQLDescription(@"The following types are to be deprecated from FeedItem once OTC v2 is enabled.

Moved to OrderOverview:
* OrderTime
* EditOrderButton
* InsetBanner
* OrderDetailsStatus
* Button
* OrderDetailSummary

No longer needed:
* PickupInstructions
* OrderDetails")]
    [GraphQLName("FeedItem")]
    public interface IFeedItem
    {
    }

    [Shareable]
    public class PastPickupOrderFulfilmentDetails : IFeedItem, IOrderFulfilmentSection
    {
        public bool? _ { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderDetailsItem> FulfilmentItems { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class DeliveryOrderFulfilmentDetails : IFeedItem, IOrderFulfilmentSection
    {
        public bool? _ { get; set; }
        public DeliveryInstructions? DeliveryInstructions { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderDetailsItem> FulfilmentItems { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class OrderDetailsItem
    {
        [GraphQLNonNullType]
        public string Icon { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        public OrderDetailsItemType? Type { get; set; }
    }

    [Shareable]
    public class OrderDetails : IFeedItem
    {
        [GraphQLDeprecated(@"OrderDetails no longer used by FE from 22.15 once OTC v1 is toggled on")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDeprecated(@"OrderDetails no longer used by FE from 22.15 once OTC v1 is toggled on")]
        [GraphQLNonNullType]
        public ICollection<OrderDetailsItem> Items { get; set; }
    }

    [Shareable]
    public class DeliveryInstructions : IFeedItem
    {
        [GraphQLNonNullType]
        public bool LeaveUnattended { get; set; }
        [GraphQLNonNullType]
        public string LeaveUnattendedTitle { get; set; }
        [GraphQLNonNullType]
        public string LeaveUnattendedMessage { get; set; }
        [GraphQLNonNullType]
        public bool CanToggleLeaveUnattended { get; set; }
        [GraphQLNonNullType]
        public string DriverInstructionsTitle { get; set; }
        [GraphQLNonNullType]
        public string DriverInstructions { get; set; }
        [GraphQLNonNullType]
        public bool CanEditInstructions { get; set; }
        [GraphQLNonNullType]
        public bool HideLeaveUnattended { get; set; }
    }

    [Shareable]
    public class PickupInstructions : IFeedItem
    {
        public string? MarkdownInfo { get; set; }
        public ButtonState? CheckIn15Mins { get; set; }
        public ButtonState? CheckInNow { get; set; }
        public bool? ShouldHideCheckInButtons { get; set; }
        [GraphQLNonNullType]
        public bool WithPickupService { get; set; }
        [GraphQLDeprecated(@"No longer used by FE from 22.15 once OTC v1 is toggled on")]
        public InsetBanner? Banner { get; set; }
        public InsetBanner? BannerV2 { get; set; }
        public BayNumberPreferences? BayNumberPreferences { get; set; }
    }

    [Shareable]
    public class BayNumberPreferences
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> BayNumber { get; set; }
        [GraphQLNonNullType]
        public Button ConfirmButton { get; set; }
        [GraphQLNonNullType]
        public Button BayNumberUnknownButton { get; set; }
    }

    [Shareable]
    public class OnMyWayPreferences
    {
        [GraphQLDescription(@"Title for the ETA slider modal")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Subtitle/description for the ETA slider modal")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"Selectable ETA values")]
        [GraphQLNonNullType]
        public ICollection<string> Eta { get; set; }
        [GraphQLDescription(@"Unit of time for the ETA values, such as 'min'")]
        [GraphQLNonNullType]
        public string EtaType { get; set; }
        [GraphQLDescription(@"0-based index of the default/initial eta value to be used")]
        [GraphQLNonNullType]
        public int EtaDefaultIndex { get; set; }
        [GraphQLDescription(@"Confirm ETA selection")]
        [GraphQLNonNullType]
        public Button ConfirmButton { get; set; }
    }

    [Shareable]
    public class OrderDetailsStatus : IFeedItem
    {
        [GraphQLNonNullType]
        public OrderStatusType Status { get; set; }
        [GraphQLNonNullType]
        public string Label { get; set; }
    }

    [GraphQLDescription(@"Instructs the UI to insert a horizontal divider")]
    [Shareable]
    public class OrderDetailsDivider : IFeedItem
    {
        public bool? _ { get; set; }
    }

    [Shareable]
    public class OrderTime : IFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Time { get; set; }
        [GraphQLNonNullType]
        public string Day { get; set; }
    }

    [Shareable]
    public class OrderRewardsSummary : IFeedItem
    {
        [GraphQLNonNullType]
        public string Points { get; set; }
        [GraphQLNonNullType]
        public string CardNumber { get; set; }
        [GraphQLNonNullType]
        public string FirstName { get; set; }
        [GraphQLNonNullType]
        public string LastName { get; set; }
        [GraphQLNonNullType]
        public string Email { get; set; }
    }

    [Shareable]
    public class OrderDetailsProductCard : IHorizontalListItem
    {
        [GraphQLNonNullType]
        public int Stockcode { get; set; }
        [GraphQLNonNullType]
        public string Name { get; set; }
        [GraphQLNonNullType]
        public string ImagePath { get; set; }
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }
        [GraphQLNonNullType]
        public string SalesPrice { get; set; }
        public string? PricePerUnit { get; set; }
    }

    [Shareable]
    public class OrderPaymentDetails : IFeedItem
    {
        [GraphQLNonNullType]
        public ICollection<OrderPaymentDetailsItem> Total { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderPaymentDetailsItem?> SubTotal { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderPaymentDetailsItem?> MarketSubtotal { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderPaymentDetailsItem?> Savings { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderPaymentDetailsItem> PaymentMethods { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderPaymentDetailsItem?> Discounts { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderPaymentDetailsItem?> SavingsAndRewards { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderPaymentDetailsItem?> Refunds { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderPaymentDetailsItem?> RefundTotal { get; set; }
        public string? Disclaimer { get; set; }
    }

    [Shareable]
    public class OrderPaymentDetailsItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Amount { get; set; }
        [GraphQLDescription(@"icon displayed at the left")]
        public string? Icon { get; set; }
        [GraphQLDescription(@"icon displayed next to the amount")]
        public string? AmountIcon { get; set; }
        [GraphQLDescription(@"Style of the amount text")]
        public OrderPaymentDetailsItemAmountStyle? AmountStyle { get; set; }
    }

    [Shareable]
    public class CancelWarning
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class EditOrderWarning
    {
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<EditOrderWarningItem> WarningItems { get; set; }
        [GraphQLNonNullType]
        public string AcceptLabel { get; set; }
        [GraphQLNonNullType]
        public string AcceptButtonLabel { get; set; }
        [GraphQLNonNullType]
        public string CancelButtonLabel { get; set; }
        [GraphQLNonNullType]
        public string Disclaimer { get; set; }
    }

    [Shareable]
    public class EditOrderWarningItem
    {
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [Shareable]
    public class EditOrderButton : IFeedItem
    {
        [GraphQLNonNullType]
        public string Label { get; set; }
        public string? Action { get; set; }
        public ButtonStyle? Style { get; set; }
        [GraphQLNonNullType]
        public bool Enabled { get; set; }
    }

    [Shareable]
    public class OrderDetailSummary : IFeedItem
    {
        [GraphQLNonNullType]
        public string OrderNumber { get; set; }
        [GraphQLNonNullType]
        public string OrderedDate { get; set; }
    }

    [GraphQLName("OrderFulfilmentSection")]
    public interface IOrderFulfilmentSection
    {
        bool? _ { get; set; }
    }

    [Shareable]
    public class OrderFulfilmentDetails : IFeedItem, IOrderFulfilmentSection
    {
        public bool? _ { get; set; }
        [GraphQLDeprecated(@"use new fields instead")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderDetailsItem> Items { get; set; }
        [GraphQLNonNullType]
        public ICollection<OrderDetailsItem> FulfilmentItems { get; set; }
        public DeliveryInstructions? DeliveryInstructions { get; set; }
    }

    [Shareable]
    public class OrderStoreDetails : IFeedItem
    {
        [GraphQLNonNullType]
        public string StoreName { get; set; }
        [GraphQLNonNullType]
        public string StoreAddress { get; set; }
        public string? ActionPath { get; set; }
    }

    [Shareable]
    public class OrderCollectionDetails : IFeedItem
    {
        [GraphQLNonNullType]
        public string FulfillmentLabel { get; set; }
        [GraphQLNonNullType]
        public string FulfillmentType { get; set; }
        public string? ActionTitle { get; set; }
        public OrderCollectionParkingDetails? ParkingDetails { get; set; }
    }

    [Shareable]
    public class OrderCollectionParkingDetails
    {
        public string? ParkingMapUrl { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> ParkingDirections { get; set; }
    }

    [GraphQLName("OrderOverviewSection")]
    public interface IOrderOverviewSection
    {
        Button? ChangeOrderButton { get; set; }
        Button? CancelOrderButton { get; set; }
    }

    [GraphQLName("CurrentOrderOverview")]
    public interface ICurrentOrderOverview
    {
        Button? ChangeOrderButton { get; set; }
        Button? CancelOrderButton { get; set; }
        ProgressStepper? ProgressStepper { get; set; }
        string? InstructionsMd { get; set; }
        string? HelpMd { get; set; }
        string? OrderTitle { get; set; }
        string? OrderSubtitle { get; set; }
        StepsTooltip? Tooltip { get; set; }
    }

    [Shareable]
    public class OrderOverview : IFeedItem, IOrderOverviewSection
    {
        [GraphQLDeprecated(@"use PastOrderOverview.insetBanner instead")]
        public InsetBanner? InsetBanner { get; set; }
        [GraphQLDeprecated(@"use PastOrderOverview.orderDetailsStatus instead")]
        [GraphQLNonNullType]
        public OrderDetailsStatus OrderDetailsStatus { get; set; }
        [GraphQLDeprecated(@"use PastOrderOverview.orderTime instead")]
        public OrderTime? OrderTime { get; set; }
        [GraphQLDeprecated(@"use PastOrderOverview.orderDetailSummary instead")]
        public OrderDetailSummary? OrderDetailSummary { get; set; }
        [GraphQLDeprecated(@"use PastOrderOverview.changeOrderButton instead")]
        public Button? EditOrderButton { get; set; }
        [GraphQLDeprecated(@"use PastOrderOverview.cancelOrderButton instead")]
        public Button? CancelButton { get; set; }
        [GraphQLDeprecated(@"use PastOrderOverview.changeOrderButton instead")]
        public Button? ChangeOrderButton { get; set; }
        [GraphQLDeprecated(@"use PastOrderOverview.cancelOrderButton instead")]
        public Button? CancelOrderButton { get; set; }
        [GraphQLDeprecated(@"use PastOrderOverview.viewInvoiceButton instead")]
        public Button? ViewInvoiceButton { get; set; }
    }

    [Shareable]
    public class PastOrderOverview : IFeedItem, IOrderOverviewSection
    {
        public InsetBanner? InsetBanner { get; set; }
        [GraphQLNonNullType]
        public OrderDetailsStatus OrderDetailsStatus { get; set; }
        public OrderTime? OrderTime { get; set; }
        public OrderDetailSummary? OrderDetailSummary { get; set; }
        public Button? ChangeOrderButton { get; set; }
        public Button? CancelOrderButton { get; set; }
        public Button? ViewInvoiceButton { get; set; }
        public string? InstructionsMd { get; set; }
        public string? HelpMd { get; set; }
    }

    [Shareable]
    public class CurrentPickupOrderOverview : IFeedItem, IOrderOverviewSection, ICurrentOrderOverview
    {
        [GraphQLDescription(@"ChangeOrderButton : used to the change the order")]
        public Button? ChangeOrderButton { get; set; }
        [GraphQLDescription(@"cancelOrderButton : used to the cancel the order")]
        public Button? CancelOrderButton { get; set; }
        [GraphQLDescription(@"Stepper components to indicate progress of an order")]
        public ProgressStepper? ProgressStepper { get; set; }
        [GraphQLDescription(@"Stepper component to indicate collected state of an order and it will have the same values always
This field will be used to transition from order ready for collection to intermediate collected state")]
        public ProgressStepper? ProgressStepperForCollectedState { get; set; }
        [GraphQLDescription(@"InstructionsMd to users in markdown syntax
(e.g., You can make changes to your order until 5:45pm, Friday 13 August)")]
        public string? InstructionsMd { get; set; }
        [GraphQLDescription(@"helpMd to users in markdown syntax
(e.g., Going to be late? Don't worry your order will be temperature controlled until you arrive.)")]
        public string? HelpMd { get; set; }
        [GraphQLDescription(@"Title (e.g., Collect today, Collect Monday, Collect tomorrow etc.)")]
        public string? OrderTitle { get; set; }
        [GraphQLDescription(@"Subtitle (e.g., Window Time 3:00pm - 4:00pm)")]
        public string? OrderSubtitle { get; set; }
        [GraphQLDescription(@"subtitle icon (optional): e.g. warning delay")]
        public OrderSubtitleIcon? OrderSubtitleIcon { get; set; }
        [GraphQLDescription(@"checkIn15minsButton : CTA used for I'm 15 mins away button")]
        public Button? CheckIn15MinsButton { get; set; }
        [GraphQLDescription(@"checkInOnMyWayButton : CTA used for I'm on my way button")]
        public Button? CheckInOnMyWayButton { get; set; }
        [GraphQLDescription(@"checkInNowButton : CTA used for I'm here button")]
        public Button? CheckInNowButton { get; set; }
        [GraphQLDescription(@"collectionBanner : (e.g., Unfortunately you can no longer make changes to this order)")]
        [GraphQLDeprecated(@"It is not used by Mobile App FE")]
        public InsetBanner? CollectionBanner { get; set; }
        [GraphQLDescription(@"collectionHelpMd : (e.g., Going to be late? Don't worry your order will be temperature controlled until you arrive.)")]
        [GraphQLDeprecated(@"use helpMd instead")]
        public string? CollectionHelpMd { get; set; }
        [GraphQLDescription(@"bayNumberPreferences : (Bay Number preferences, CTAs etc)")]
        public BayNumberPreferences? BayNumberPreferences { get; set; }
        [GraphQLDescription(@"onMyWayPreferences : (On my way ETA preferences, CTAs etc)")]
        public OnMyWayPreferences? OnMyWayPreferences { get; set; }
        [GraphQLDescription(@"Info modal tooltip")]
        public StepsTooltip? Tooltip { get; set; }
        [GraphQLDescription(@"Location Tracking enabled for DTB and when store is open")]
        [GraphQLNonNullType]
        public bool LocationTrackingEnabled { get; set; }
        [GraphQLDescription(@"Location Tracking Priming Page for pickup orders")]
        public LocationTrackingPrimingPage? LocationTrackingPrimingPage { get; set; }
        [GraphQLDescription(@"Banner to show information to customers")]
        public BroadcastBanner? Banner { get; set; }
        [GraphQLDescription(@"Banner to show the team member details for the handover")]
        public BroadcastBanner? HandoverBanner { get; set; }
    }

    [Shareable]
    public class CurrentDeliveryOrderOverview : IFeedItem, IOrderOverviewSection, ICurrentOrderOverview
    {
        [GraphQLDescription(@"InsetBanners: (e.g. restricted items banner)")]
        [GraphQLNonNullType]
        public ICollection<InsetBanner> InsetBanners { get; set; }
        [GraphQLDescription(@"Analytic Labels for banner shown")]
        [GraphQLNonNullType]
        public ICollection<string> BannerAnalyticLabels { get; set; }
        [GraphQLDescription(@"ChangeOrderButton : used to the change the order")]
        public Button? ChangeOrderButton { get; set; }
        [GraphQLDescription(@"cancelOrderButton : used to the cancel the order")]
        public Button? CancelOrderButton { get; set; }
        [GraphQLDescription(@"Stepper components to indicate progress of an order")]
        public ProgressStepper? ProgressStepper { get; set; }
        [GraphQLDescription(@"InstructionsMd to users in markdown syntax
(e.g., You can make changes to your order until 5:45pm, Friday 13 August)")]
        public string? InstructionsMd { get; set; }
        [GraphQLDescription(@"helpMd to users in markdown syntax
(e.g., Going to be late? Don't worry your order will be temperature controlled until you arrive.)")]
        public string? HelpMd { get; set; }
        [GraphQLDescription(@"Title: Estimated arrival")]
        public string? OrderTitle { get; set; }
        [GraphQLDescription(@"Delivery ETA: Tomorrow, 31 Nov, 2:00pm - 5:00pm")]
        public string? OrderSubtitle { get; set; }
        [GraphQLDescription(@"subtitle icon (optional): e.g. warning delay")]
        public OrderSubtitleIcon? OrderSubtitleIcon { get; set; }
        [GraphQLDescription(@"Info modal tooltip")]
        public StepsTooltip? Tooltip { get; set; }
        [GraphQLDescription(@"Live tracking map url to embed in FE")]
        public string? LiveTrackingMapUrl { get; set; }
    }

    [Shareable]
    public class OrderNumberDetails : IFeedItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string OrderNumber { get; set; }
    }

    [GraphQLDescription(@"Tooltip used in Progress Stepper")]
    [Shareable]
    public class StepsTooltip
    {
        [GraphQLDescription(@"message that describes the info modal tool tip")]
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"All steps with progress on each of them")]
        [GraphQLNonNullType]
        public ICollection<TooltipStepInfo> StepInfoList { get; set; }
    }

    [GraphQLDescription(@"Individual steps with progress")]
    [Shareable]
    public class TooltipStepInfo
    {
        [GraphQLDescription(@"Step number (i.e., 1, 2, 3 etc)")]
        [GraphQLNonNullType]
        public int Number { get; set; }
        [GraphQLDescription(@"If true, tick is displayed else (false) number is displayed in the FE")]
        [GraphQLNonNullType]
        public bool IsCompleted { get; set; }
        [GraphQLDescription(@"true: draw green line, false: draw grey line,null: no line (for last step)")]
        public bool? IsNextProgressed { get; set; }
        [GraphQLDescription(@"title for each step")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"description of each step")]
        public string? Description { get; set; }
        [GraphQLDescription(@"Step icon URL: completed, current, not started")]
        public string? StepIconUrl { get; set; }
    }

    [Shareable]
    public class CurrentPickupOrderFulfilmentDetails : IFeedItem, IOrderFulfilmentSection
    {
        public bool? _ { get; set; }
        [GraphQLNonNullType]
        public OrderStoreDetails StoreDetails { get; set; }
        [GraphQLNonNullType]
        public OrderCollectionDetails CollectionDetails { get; set; }
    }

    [Shareable]
    public class DeliveryDriverDetails : IFeedItem
    {
        [GraphQLNonNullType]
        public string DriverName { get; set; }
        [GraphQLNonNullType]
        public string DeliveryPartner { get; set; }
        public string? IconUrl { get; set; }
        public InsetBanner? InsetBanner { get; set; }
        public Button? LiveTrackingButton { get; set; }
        public DeliveryMethodsTooltip? DeliveryTooltip { get; set; }
    }

    [Shareable]
    public class CurrentPickupLocationTrackingStatus : IFeedItem
    {
        [GraphQLDescription(@"Title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Description")]
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLDescription(@"Image")]
        [GraphQLNonNullType]
        public LocationTrackingStatusImage Image { get; set; }
    }

    [Shareable]
    public class OrderProofOfDeliveryDetails : IFeedItem
    {
        public InsetBanner? InsetBanner { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? ImageUrl { get; set; }
        public string? Footnote { get; set; }
    }

    [Shareable]
    public class LocationTrackingPrimingPageContent
    {
        [GraphQLDescription(@"Header of the location tracking priming page")]
        [GraphQLNonNullType]
        public string Header { get; set; }
        [GraphQLDescription(@"Reason and steps to enable location tracking permissions")]
        [GraphQLNonNullType]
        public ICollection<LocationTrackingPrimingPageRationale> Rationales { get; set; }
        [GraphQLDescription(@"Buttons to track, skip or update location tracking permissions")]
        [GraphQLNonNullType]
        public ICollection<Button> LocationPermissionButtons { get; set; }
        [GraphQLDescription(@"Footer of the location tracking priming page")]
        [GraphQLNonNullType]
        public string Footer { get; set; }
    }

    [Shareable]
    public class LocationTrackingPrimingPageRationale
    {
        [GraphQLDescription(@"To apply background to the content or not")]
        [GraphQLNonNullType]
        public bool ApplyBackground { get; set; }
        [GraphQLDescription(@"Image name")]
        [GraphQLNonNullType]
        public LocationImage Image { get; set; }
        [GraphQLDescription(@"Rationale behind the location tracking permissions")]
        [GraphQLNonNullType]
        public string TextMd { get; set; }
    }

    [Shareable]
    public class LocationTrackingPrimingPage
    {
        [GraphQLDescription(@"Priming page when location permissions were not set")]
        [GraphQLNonNullType]
        public LocationTrackingPrimingPageContent LocationPermissionsWereNotSet { get; set; }
        [GraphQLDescription(@"Priming page when user said not to allow location tracking earlier")]
        [GraphQLNonNullType]
        public LocationTrackingPrimingPageContent DoNotAllowWasSetEarlier { get; set; }
    }

    [Shareable]
    public class MyGroceriesProductListBadge : IHorizontalListBadge
    {
        [GraphQLNonNullType]
        public MyGroceriesProductListBadgeType MyGroceriesProductListBadgeType { get; set; }
        [GraphQLNonNullType]
        public string MyGroceriesProductListBadgeLabel { get; set; }
    }

    [Shareable]
    public class DeliveryMethodsTooltip
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public ICollection<TooltipDeliveryMethodInfo> DeliveryMethodsTabs { get; set; }
    }

    [Shareable]
    public class TooltipDeliveryMethodInfo
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLNonNullType]
        public ICollection<DeliveryMethodBulletInfo> BulletInfoList { get; set; }
        public BasicCoreBroadcastBanner? DriverRatingBanner { get; set; }
    }

    [Shareable]
    public class DeliveryMethodBulletInfo
    {
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [Shareable]
    public class ProductReviewAlternativeInfoBottomSheet : IBottomSheetContent
    {
        [GraphQLDescription(@"Title of the bottom sheet")]
        [GraphQLNonNullType]
        public string BottomSheetTitle { get; set; }
        [GraphQLDescription(@"Body of the bottom sheet")]
        [GraphQLNonNullType]
        public string BottomSheetBody { get; set; }
        [GraphQLDescription(@"Null")]
        public bool? ShowOnceOnly { get; set; }
        [GraphQLDescription(@"Null")]
        public DownloadableAsset? BannerAsset { get; set; }
        [GraphQLDescription(@"Null")]
        public ContentCta? SecondaryCta { get; set; }
        [GraphQLDescription(@"Analytics for infoClick icon")]
        [GraphQLNonNullType]
        public Analytics InfoClickAnalytics { get; set; }
        public ContentCta? PrimaryCta { get; set; }
    }

    [Shareable]
    public class ProductReviewAlternativeResponse
    {
        [GraphQLDescription(@"The unavailable or restricted product")]
        [GraphQLNonNullType]
        public ProductReviewCard Product { get; set; }
        [GraphQLDescription(@"Product alternatives")]
        [GraphQLNonNullType]
        public ICollection<ProductCard> Alternatives { get; set; }
        [GraphQLDescription(@"Search hint for the search field")]
        [GraphQLNonNullType]
        public string SearchHint { get; set; }
        [GraphQLDescription(@"Title for the alternatives section")]
        public string? AlternativesTitle { get; set; }
        [GraphQLDescription(@"Error message")]
        public string? ErrorMessage { get; set; }
        [GraphQLDescription(@"Error action title")]
        public string? ErrorActionTitle { get; set; }
        [GraphQLDescription(@"Additional legal information")]
        [GraphQLNonNullType]
        public ProductReviewAlternativeInfoBottomSheet Info { get; set; }
        [GraphQLDescription(@"Analytics for alternatives page impression")]
        [GraphQLNonNullType]
        public Analytics PageImpressionAnalytics { get; set; }
    }

    [Shareable]
    public class RecipeSummaryFeature : IRecipeFeature
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Amount { get; set; }
        public string? Unit { get; set; }
        [GraphQLNonNullType]
        public string AltText { get; set; }
        [GraphQLNonNullType]
        public FeatureType FeatureType { get; set; }
    }

    [Shareable]
    public class RecipeSummaryDifficulty : IRecipeFeature
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public int Value { get; set; }
        [GraphQLNonNullType]
        public int MaxValue { get; set; }
        [GraphQLNonNullType]
        public string AltText { get; set; }
    }

    [GraphQLName("RecipeFeature")]
    public interface IRecipeFeature
    {
    }

    [Shareable]
    public class RecipeByLine : IGenericPageFeedItem
    {
        public string? Image { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
    }

    [Shareable]
    public class MethodDescription
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Content { get; set; }
    }

    [Shareable]
    public class MethodItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Content { get; set; }
        public string? Image { get; set; }
    }

    [Shareable]
    public class RecipeMethod : IGenericPageFeedItem
    {
        public string? PanelTitle { get; set; }
        public string? Caption { get; set; }
        public MethodDescription? Description { get; set; }
        [GraphQLNonNullType]
        public ICollection<MethodItem> Items { get; set; }
        public string? Disclaimer { get; set; }
    }

    [Shareable]
    public class RecipeMoreCard : IHorizontalListItem, IRecipeCard
    {
        [GraphQLNonNullType]
        public ICollection<IActionMetaData> ActionMetadata { get; set; }
    }

    [GraphQLName("RecipeCard")]
    public interface IRecipeCard
    {
    }

    [Shareable]
    public class RecipeTagList : IActionMetaData
    {
        [GraphQLNonNullType]
        public ICollection<string> Tags { get; set; }
    }

    [Shareable]
    public class RecipeNutritionTileFeature
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Value { get; set; }
    }

    [Shareable]
    public class RecipeNutritionTile
    {
        [GraphQLNonNullType]
        public string PerServeKilojoules { get; set; }
        [GraphQLNonNullType]
        public string PerServeCalories { get; set; }
        [GraphQLNonNullType]
        public int DailyIntakePercentage { get; set; }
        [GraphQLNonNullType]
        public string DailyIntakeText { get; set; }
        [GraphQLNonNullType]
        public string Disclaimer { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<RecipeNutritionTileFeature> Features { get; set; }
    }

    [Shareable]
    public class RecipeIngredientDetail
    {
        [GraphQLDescription(@"Full ingredient information eg. [amount] [unit] [name]")]
        [GraphQLNonNullType]
        public string Ingredient { get; set; }
        [GraphQLDescription(@"Optional eg. ISO, P, M")]
        public string? IngredientType { get; set; }
        public string? ProductId { get; set; }
        public string? Sponsor { get; set; }
    }

    [Shareable]
    public class RecipeUserInteraction
    {
        public bool? IsSaved { get; set; }
        public string? RecipeUrl { get; set; }
    }

    [Shareable]
    public class RecipeServes
    {
        [GraphQLNonNullType]
        public int Quantity { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public int Minimum { get; set; }
        [GraphQLNonNullType]
        public int Maximum { get; set; }
    }

    [Shareable]
    public class IngredientsSection
    {
        public RecipeServes? ServesInfo { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> Ingredients { get; set; }
    }

    [Shareable]
    public class RecipeDetail
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string RecipeId { get; set; }
        public string? RecipeUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Image { get; set; }
        public Video? Video { get; set; }
        public RecipeByLine? Byline { get; set; }
        public ICollection<IRecipeFeature>? Features { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> Ingredients { get; set; }
        [GraphQLDeprecated(@"Use `ingredientList`")]
        [GraphQLNonNullType]
        public ICollection<string> IngredientProductIds { get; set; }
        [GraphQLDeprecated(@"No longer supported")]
        [GraphQLNonNullType]
        public ICollection<RecipeIngredientDetail> IngredientList { get; set; }
        [GraphQLNonNullType]
        public IngredientsSection IngredientsSection { get; set; }
        [GraphQLNonNullType]
        public string ServeDefault { get; set; }
        [GraphQLNonNullType]
        public RecipeMethod Method { get; set; }
        public HorizontalList? LatestRecipes { get; set; }
        public RecipeNutritionTile? NutritionTile { get; set; }
        [GraphQLDeprecated(@"No longer supported")]
        public string? Disclaimer { get; set; }
        public string? SourceName { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> Tags { get; set; }
        public RecipeUserInteraction? UserInteraction { get; set; }
        [GraphQLDescription(@"Different contents from CMS to be displayed in recipe details screen")]
        public IUniversalInventory? UniversalInventory { get; set; }
        [GraphQLNonNullType]
        public ShopIngredientButton ShopIngredientButton { get; set; }
        [GraphQLDescription(@"represent cost per serve value and banner")]
        public RecipeCostPerServe? RecipeCostPerServe { get; set; }
        [GraphQLDescription(@"represents recipe page analytics")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"represents recipe page impression analytics, only available when cps is not null")]
        public Analytics? ImpressionAnalytics { get; set; }
    }

    [Shareable]
    public class RecipeCostPerServe
    {
        [GraphQLDescription(@"represents cost per serve dollar amount")]
        [GraphQLNonNullType]
        public decimal RecipeCostPerServePrice { get; set; }
        [GraphQLDescription(@"represents cost per serve broadcast banner")]
        public BasicCoreBroadcastBanner? RecipeCostPerServeBanner { get; set; }
    }

    [Shareable]
    public class ShopIngredientButton
    {
        [GraphQLNonNullType]
        public Button Button { get; set; }
        [GraphQLNonNullType]
        public bool IsStickyStyle { get; set; }
    }

    [Shareable]
    public class Video : IGenericPageFeedItem
    {
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Thumbnail { get; set; }
        [GraphQLNonNullType]
        public string Duration { get; set; }
        public string? Id { get; set; }
    }

    [Shareable]
    public class RecipeGroupTile : IHorizontalListItem
    {
        public ICollection<string>? Tags { get; set; }
        public string? Source { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Image { get; set; }
    }

    [Shareable]
    public class RecipeSource : IActionMetaData
    {
        [GraphQLNonNullType]
        public string Source { get; set; }
    }

    [Shareable]
    public class FreshMagTile : IFeedItem
    {
        [GraphQLNonNullType]
        public string AltText { get; set; }
        [GraphQLNonNullType]
        public string CoverImageUrl { get; set; }
        [GraphQLNonNullType]
        public string TextImageUrl { get; set; }
    }

    [Shareable]
    public class DualImageBanner : IFeedItem
    {
        [GraphQLNonNullType]
        public BannerTarget Target { get; set; }
        [GraphQLNonNullType]
        public string AltText { get; set; }
        [GraphQLNonNullType]
        public string LeftImageUrl { get; set; }
        [GraphQLNonNullType]
        public string RightImageUrl { get; set; }
    }

    [GraphQLName("RecipeListFeed")]
    public interface IRecipeListFeed
    {
    }

    [Shareable]
    public class RecipeList
    {
        public int? NextPage { get; set; }
        [GraphQLDeprecated(@"For 23.7 and above, Use `recipeListFeed`")]
        [GraphQLNonNullType]
        public ICollection<RecipeSummaryCard> Recipes { get; set; }
        [GraphQLDescription(@"List of display components.")]
        [GraphQLNonNullType]
        public ICollection<IRecipeListFeed?> RecipeListFeed { get; set; }
        [GraphQLNonNullType]
        public int TotalNumberOfRecipes { get; set; }
        public string? Title { get; set; }
    }

    [Shareable]
    public class RecipeSummaryCard : IHorizontalListItem, IFeedItem, IRecipeCard, IRecipeListFeed, IGridListItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Image { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
        public ICollection<string>? Tags { get; set; }
        [GraphQLNonNullType]
        public string SourceName { get; set; }
        [GraphQLNonNullType]
        public bool IsVideoAvailable { get; set; }
        [GraphQLDescription(@"represents preparation time of the recipe. e.g. 1h 2m")]
        public RecipeDuration? RecipePrepDuration { get; set; }
        [GraphQLDescription(@"represents cooking time of the recipe. e.g.  2h 30m")]
        public RecipeDuration? RecipeCookDuration { get; set; }
        [GraphQLDescription(@"represents the cost per serve of the recipe.")]
        public RecipeCostPerServe? RecipeCostPerServe { get; set; }
    }

    [Shareable]
    public class RecipeDuration
    {
        [GraphQLNonNullType]
        public string Duration { get; set; }
        [GraphQLNonNullType]
        public string AltText { get; set; }
    }

    [Shareable]
    public class Filter
    {
        [GraphQLNonNullType]
        public string HeaderKey { get; set; }
        [GraphQLNonNullType]
        public string HeaderTitle { get; set; }
        [GraphQLNonNullType]
        public bool IsApplied { get; set; }
    }

    [Shareable]
    public class SortOption
    {
        [GraphQLNonNullType]
        public string Key { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public bool IsApplied { get; set; }
    }

    [Shareable]
    public class RecipeSaveInfo
    {
        [GraphQLNonNullType]
        public bool IsSaved { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [GraphQLDescription(@"Usually home address of the customer")]
    [Shareable]
    public class Address : IAddressUnion
    {
        [GraphQLDescription(@"Address unique ID")]
        [GraphQLNonNullType]
        public int Id { get; set; }
        [GraphQLDescription(@"Readable address text")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"Is address primary address
in context of shopping mode we will essentially always have it as `true`")]
        [GraphQLNonNullType]
        public bool IsPrimary { get; set; }
        [GraphQLDescription(@"Postal Code")]
        [GraphQLNonNullType]
        public string PostalCode { get; set; }
        [GraphQLDescription(@"Address Street line 1")]
        [GraphQLNonNullType]
        public string Street1 { get; set; }
        [GraphQLDescription(@"Address Street line 2")]
        [GraphQLNonNullType]
        public string Street2 { get; set; }
        [GraphQLDescription(@"Suburb ID (not a postcode, but internal ID)")]
        [GraphQLNonNullType]
        public int SuburbId { get; set; }
        [GraphQLDescription(@"Readable suburb name")]
        [GraphQLNonNullType]
        public string SuburbName { get; set; }
        [GraphQLDescription(@"State")]
        [GraphQLNonNullType]
        public string State { get; set; }
        [GraphQLDescription(@"Id of the fulfilment store for this delivery address")]
        public int? FulfillmentStoreId { get; set; }
        [GraphQLDescription(@"Id of the express delivery store for this delivery address")]
        public int? ExpressDeliveryStoreId { get; set; }
    }

    [GraphQLDescription(@"One of available address types

Usage:
```graphql
address {
   ... on Address {
     __typename
   }
 }
```")]
    [GraphQLName("AddressUnion")]
    public interface IAddressUnion
    {
    }

    [GraphQLDescription(@"Pricing information with exact value")]
    [Shareable]
    public class Price : IShoppingModeVariantPrice
    {
        [GraphQLDescription(@"Printable price text")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"Raw numeric exact price")]
        [GraphQLNonNullType]
        public int Value { get; set; }
        [GraphQLDescription(@"Price suffix (e.g `*`)")]
        public string? Suffix { get; set; }
    }

    [GraphQLDescription(@"Pricing information with [min, max] range")]
    [Shareable]
    public class PriceRange : IShoppingModeVariantPrice
    {
        [GraphQLDescription(@"Printable price text")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"Raw numeric min price")]
        [GraphQLNonNullType]
        public int Min { get; set; }
        [GraphQLDescription(@"Raw numeric max price")]
        [GraphQLNonNullType]
        public int Max { get; set; }
        [GraphQLDescription(@"Price suffix (e.g `*`)")]
        public string? Suffix { get; set; }
    }

    [GraphQLDescription(@"Can Attach to any component. This needs to work together with
$supportedLinks and $supportedActions query parameters passed by app.")]
    [Shareable]
    [GraphQLName("Action")]
    public class ActionData
    {
        [GraphQLDescription(@"Type of the action. e.g. ""LINK"", ""APPLOCAL""")]
        [GraphQLNonNullType]
        public ActionType Type { get; set; }
        [GraphQLDescription(@"If type is LINK, the action needs to be an url, deeplink etc.
If type is APPLOCAL, the action is a custom identifier maps
  to a custom function on FE. These constant local actions perform
  consistent and same thing anywhere in the app.
  * openBottomSheet?id=bottomSheet1")]
        [GraphQLNonNullType]
        public string Action { get; set; }
        [GraphQLDescription(@"Unique identifier to assist FE to identify the action")]
        public string? Id { get; set; }
        [GraphQLDescription(@"Optional Analytics fields to be used on FE for actions")]
        public Analytics? Analytics { get; set; }
    }

    [GraphQLDescription(@"A card that executes the deepLink upon tapping
Card's data including the hosting of image are fully managed in AEM & Target")]
    [Shareable]
    public class ActionableCard : IHomeFeed, IProductDetailsFeedItem, IProductListFeed, IUniversalInventory, IUniversalInventoryNextBestAction, ICatalogueLandingItem, IOrderConfirmationContentSegment, IRecipeListFeed, IGenericPageFeedItem
    {
        [GraphQLDescription(@"A full URL to the image asset")]
        [GraphQLNonNullType]
        public string Image { get; set; }
        [GraphQLDescription(@"Accessibility alternate text for image")]
        [GraphQLNonNullType]
        public string AltText { get; set; }
        [GraphQLDescription(@"The size of the card.
e.g. SMALL, MEDIUM, LARGE")]
        [GraphQLNonNullType]
        public CardHeight CardHeight { get; set; }
        [GraphQLDescription(@"The deepLink to action if the card is tapped")]
        [GraphQLNonNullType]
        public string Link { get; set; }
        [GraphQLDescription(@"Common BFF custom flag to allow independent chain resolvers.
Having item with _excluded:true, means it should not be used in FE")]
        public bool? Excluded { get; set; }
        [GraphQLDescription(@"Dynamic data to tealium. Defined as scalar - the plan is to
populate this analytics data from the source (AEM form) when
the content/card is being authored

NOTE: This field won't be used for Content Page / AEM authored pages")]
        public object? Analytics { get; set; }
        [GraphQLDescription(@"Analytics fields to be used for impression events:
* tealiumEvent - banner_impression
* eventAction - impression
* + all other fields")]
        public Analytics? ActionableCardImpressionAnalytics { get; set; }
        [GraphQLDescription(@"Analytics fields to be used for click events:
* tealiumEvent - banner_click
* eventAction - click
* + all other fields")]
        public Analytics? ActionableCardClickAnalytics { get; set; }
    }

    [GraphQLDescription(@"We can attach this to any type.
e.g. action level analytics(click event), component level analytics(impression)")]
    [Shareable]
    public class Analytics
    {
        [GraphQLDescription(@"app.Section
example: Other")]
        public string? AppSection { get; set; }
        [GraphQLDescription(@"screen.Name
example: eComm campaign screen")]
        public string? ScreenName { get; set; }
        [GraphQLDescription(@"screen.Type
example: campaign")]
        public string? ScreenType { get; set; }
        [GraphQLDescription(@"event.Action
example: impression")]
        public string? EventAction { get; set; }
        [GraphQLDescription(@"event.Category
example: marketing landing page")]
        public string? EventCategory { get; set; }
        [GraphQLDescription(@"event.Label")]
        public string? EventLabel { get; set; }
        [GraphQLDescription(@"event.Value")]
        public string? EventValue { get; set; }
        [GraphQLDescription(@"event.Description")]
        public string? EventDescription { get; set; }
        [GraphQLDescription(@"tealium_event")]
        public string? TealiumEvent { get; set; }
        [GraphQLDescription(@"Any additional analytics fields to be passed as-is")]
        public ICollection<AnalyticsExtraContent>? ExtraContent { get; set; }
    }

    [GraphQLDescription(@"Provides extra analytics content that can be passed as-is to Analytics server.
Note that the client should first take `value`, if `null`, use `values`.")]
    [Shareable]
    public class AnalyticsExtraContent
    {
        [GraphQLDescription(@"The key to be passed as-is (e.g. acs.StitchID)")]
        [GraphQLNonNullType]
        public string Key { get; set; }
        [GraphQLDescription(@"Optional value, Nullable so the implementation can be explicit")]
        public string? Value { get; set; }
        [GraphQLDescription(@"Optional array value, Nullable so the implementation can be explicit")]
        public ICollection<string>? Values { get; set; }
    }

    [GraphQLDescription(@"                         /-----------------------------------------------------------------------------------------\
                        |/------------------------------------------------------------------------------------------\|-------
                        ||                                                                                          ||       \
                        ||                                                                                          ||        \
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                           /----      -----      -----      -----     --\                 ||         |
                        ||                           |                                             |                ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                           |                                             |                ||         |  Image Panel
                        ||                           |                    Image                    |                ||         |
                        ||                           |                                             |                ||         |
                        ||                           |                                             |                ||         |
                        ||                           |                                             |                ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                        ||                                                                                          ||         |
                 -------||            ____                                                                          ||         |
               /        ||         ≤-      -≤                                                                       ||         |
              /         ||       j≤˝        ˚≤p                                                                     ||         |
              |         ||       ≤            ≤      |                                             |                ||         |
              |         ||      |˝            ˚|     |                                             |                ||         |
    Graphic   |         ||      ≤              ≤     |                                             |                ||         |
              |         ||     j|              |p    |                                             |                ||         /
    Block     |         ||     |                |                                                                   ||       /
              |         ||-----≤                ≤-------------------------------------------------------------------||-------
              |         ||     |p              j|                                                                   ||
              |         ||      |              |                                                                    ||
              |         ||      ≤              ≤                                                                    ||
              |         ||      ˚|            |˝                                                                    ||
               \        ||       ≤p          j≤                                                                     ||
                \       ||        -≤        ≤-                                                                      ||
                 >------||        ˚≤-p  j-≤˝                                                                        ||
                /       ||           ----                                                                           ||
               /        ||                                                                                          ||
              |         ||                                                                                          ||
              |         ||       Headline                                                                           ||
              |         ||                                                                                          ||
              |         ||                                                                                          ||
    Text      |         ||                                                                                          ||
              |         ||       Body copy                                                                          ||
    Block     |         ||                                                                                          ||
              |         ||                                                                                          ||
              |         ||                                                                                          ||
               \        ||       Terms and Conditions                                                               ||
                \       ||                                                                                          ||
                 \------||                                                                                          ||
                        |\------------------------------------------------------------------------------------------/|
                         \------------------------------------------------------------------------------------------/
.")]
    [Shareable]
    public class HeroBanner : ICarouselItem
    {
        [GraphQLDescription(@"Unique ID for the banner")]
        [GraphQLNonNullType]
        public string HeroBannerId { get; set; }
        [GraphQLDescription(@"In hex (e.g. #123456), background colour to use")]
        [GraphQLNonNullType]
        public string HeroBannerBackgroundColour { get; set; }
        [GraphQLDescription(@"In hex (e.g. #123456), optional text colour to use")]
        public string? HeroBannerTextColour { get; set; }
        [GraphQLDescription(@"1 or 3 images to show in the Image Panel")]
        [GraphQLNonNullType]
        public ICollection<ImageWithAlt> HeroBannerImages { get; set; }
        [GraphQLDescription(@"Up to 2 images to show in the Graphic Block")]
        public ICollection<ImageWithAlt>? HeroBannerGraphics { get; set; }
        [GraphQLDescription(@"Everyday brands logo (e.g ""Everyday Extra"" or ""Everyday Insurance"")")]
        public ImageWithAlt? HeroBannerBrandsLogo { get; set; }
        [GraphQLDescription(@"The title (aka Headline)")]
        [GraphQLNonNullType]
        public string HeroBannerTitle { get; set; }
        [GraphQLDescription(@"Size of title (LARGE or SMALL)")]
        [GraphQLNonNullType]
        public HeroBannerTitleSize HeroBannerTitleSize { get; set; }
        [GraphQLDescription(@"Optional body text")]
        public IHeroBannerBody? HeroBannerBody { get; set; }
        [GraphQLDescription(@"""Action"" for tap events")]
        [GraphQLNonNullType]
        public ActionData HeroBannerAction { get; set; }
        [GraphQLDescription(@"Optional T&Cs text, with optional link")]
        public HeroBannerTermsAndConditions? HeroBannerTermsAndConditions { get; set; }
        [GraphQLDescription(@"Dynamic Analytics fields to be used for all component events:
* eventCategory - hero_carousel
* eventLabel - heroBannerTitle
* eventDescription - icmpid (Internal campaign id)
* eventValue - Numeric position of slide in carousel")]
        [GraphQLNonNullType]
        public Analytics HeroBannerAnalytics { get; set; }
        [GraphQLDescription(@"Analytics fields to be used for impression events:
* tealiumEvent - banner_impression or acs_content_impression
* eventAction - click")]
        [GraphQLNonNullType]
        public Analytics HeroBannerImpressionAnalytics { get; set; }
    }

    [GraphQLName("CarouselItem")]
    public interface ICarouselItem
    {
    }

    [Shareable]
    public class Carousel : IHomeFeed, IGenericPageFeedItem
    {
        [GraphQLNonNullType]
        public ICollection<ICarouselItem> CarouselItems { get; set; }
    }

    [Shareable]
    public class HeroBannerPromoBody : IHeroBannerBody
    {
        [GraphQLDescription(@"e.g. Use code")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"e.g. XYZ124")]
        [GraphQLNonNullType]
        public string Code { get; set; }
    }

    [Shareable]
    public class HeroBannerBodyText : IHeroBannerBody
    {
        [GraphQLDescription(@"e.g. Simply spend ...")]
        [GraphQLNonNullType]
        public string Text { get; set; }
    }

    [Shareable]
    public class HeroBannerTermsAndConditions
    {
        [GraphQLDescription(@"e.g. Terms and Conditions apply")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"Optional url to open as webview")]
        public ActionData? Action { get; set; }
    }

    [GraphQLName("HeroBannerBody")]
    public interface IHeroBannerBody
    {
    }

    [GraphQLDescription(@"Represents a new layer to be displayed on top of the main
page. This has child components that can be displayed in the
scrollable part of the this component.")]
    [Shareable]
    public class StaticBottomSheet : IGenericPageBottomSheetItem
    {
        [GraphQLNonNullType]
        public string Id { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<IStaticBottomSheetFeedItem?> StaticBottomSheetItems { get; set; }
    }

    [GraphQLName("StaticBottomSheetFeedItem")]
    public interface IStaticBottomSheetFeedItem
    {
    }

    [GraphQLDescription(@"An actionable content card with 3:2 Image, title, and description")]
    [GraphQLName("ContentCardBase")]
    public interface IContentCardBase
    {
        [GraphQLDescription(@"Content card Id for AEM driven components")]
        string? ContentCardId { get; set; }
        [GraphQLDescription(@"The URL of the 3:2 image displayed in the card. Must be a valid URL and is non-nullable.")]
        [GraphQLNonNullType]
        string ContentCardImageUrl { get; set; }
        [GraphQLDescription(@"If provided, this title will be displayed below the image.")]
        string? ContentCardTitle { get; set; }
        [GraphQLDescription(@"If provided, this description will be displayed below the title.")]
        string? ContentCardDescription { get; set; }
        [GraphQLDescription(@"If provided, the whole card will perform the attached action when tapped")]
        ActionData? ContentCardAction { get; set; }
        [GraphQLDescription(@"If provided, the content card has a video in it")]
        bool? ContentCardIsVideoAvailable { get; set; }
        [GraphQLDescription(@"If provided, it indicates the content card size: largeSquare -> large, square & landscape -> small")]
        ContentCardSize? ContentCardSize { get; set; }
    }

    [GraphQLDescription(@"An actionable item in HorizontalList with 3:2 Image, title, and description")]
    [Shareable]
    public class ContentCard : IHorizontalListItem, IContentCardBase
    {
        [GraphQLDescription(@"Content card Id for AEM driven components")]
        public string? ContentCardId { get; set; }
        [GraphQLDescription(@"The URL of the 3:2 image displayed in the card. Must be a valid URL and is non-nullable.")]
        [GraphQLNonNullType]
        public string ContentCardImageUrl { get; set; }
        [GraphQLDescription(@"If provided, this title will be displayed below the image.")]
        public string? ContentCardTitle { get; set; }
        [GraphQLDescription(@"If provided, this description will be displayed below the title.")]
        public string? ContentCardDescription { get; set; }
        [GraphQLDescription(@"If sponsored card, return the ""Sponsored"" text to show under the description")]
        public string? ContentCardSponsoredText { get; set; }
        [GraphQLDescription(@"If provided, the whole card will perform the attached action when tapped")]
        public ActionData? ContentCardAction { get; set; }
        [GraphQLDescription(@"If provided, the content card footer will be displayed")]
        public ContentCardFooter? ContentCardFooter { get; set; }
        [GraphQLDescription(@"If provided, the badge image with alt text will be displayed")]
        public ImageWithAlt? ContentCardBrandImage { get; set; }
        [GraphQLDescription(@"If provided, the content card has a video in it")]
        public bool? ContentCardIsVideoAvailable { get; set; }
        [GraphQLDescription(@"If provided, it indicates the content card size: largeSquare -> large, square & landscape -> small")]
        public ContentCardSize? ContentCardSize { get; set; }
        [GraphQLDescription(@"Base Analytics fields which will be used by HorizontalList.
* extraContent (key & value) - Used to send offer details to Tealium")]
        public Analytics? ContentCardAnalytics { get; set; }
    }

    [GraphQLDescription(@"An footer section with text and logo")]
    [Shareable]
    public class ContentCardFooter
    {
        [GraphQLDescription(@"If provided, it indicates the footer style")]
        [GraphQLNonNullType]
        public FooterStyle Style { get; set; }
        [GraphQLDescription(@"If provided, the text will be displayed")]
        public string? Text { get; set; }
        [GraphQLDescription(@"If provided, the logo with alt text will be displayed")]
        public ImageWithAlt? Logo { get; set; }
    }

    [GraphQLDescription(@"An actionable full width item with 3:2 Image, title, and description")]
    [Shareable]
    public class FullWidthContentCard : IVerticalListItem, IGenericPageFeedItem, IContentCardBase
    {
        [GraphQLDescription(@"Content card Id for AEM driven components")]
        public string? ContentCardId { get; set; }
        [GraphQLDescription(@"The URL of the 3:2 image displayed in the card. Must be a valid URL and is non-nullable.")]
        [GraphQLNonNullType]
        public string ContentCardImageUrl { get; set; }
        [GraphQLDescription(@"If provided, this title will be displayed below the image.")]
        public string? ContentCardTitle { get; set; }
        [GraphQLDescription(@"If provided, this description will be displayed below the title.")]
        public string? ContentCardDescription { get; set; }
        [GraphQLDescription(@"If provided, the whole card will perform the attached action when tapped")]
        public ActionData? ContentCardAction { get; set; }
        [GraphQLDescription(@"If provided, the content card has a video in it")]
        public bool? ContentCardIsVideoAvailable { get; set; }
        [GraphQLDescription(@"If provided, it indicates the content card size: largeSquare -> large, square & landscape -> small")]
        public ContentCardSize? ContentCardSize { get; set; }
    }

    [GraphQLDescription(@"Core Broadcast Banner UI Component")]
    [Shareable]
    public class CoreBroadcastBannerUI
    {
        [GraphQLDescription(@"The main title text displayed on the banner (required).")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"An optional subtitle text that appears below the title.")]
        public string? Subtitle { get; set; }
        [GraphQLDescription(@"Specifies the style of the banner")]
        [GraphQLNonNullType]
        public CoreBroadcastBannerStyle Style { get; set; }
        [GraphQLDescription(@"Icon asset associated with the banner")]
        [GraphQLNonNullType]
        public IIconAsset Icon { get; set; }
    }

    [GraphQLDescription(@"Basic Broadcast Banner Component with UI, action, and analytics.")]
    [Shareable]
    public class BasicCoreBroadcastBanner : IBundlesFeedItem, IGenericPageFeedItem
    {
        [GraphQLDescription(@"UI components of the broadcast banner, such as title, subtitle, and style.")]
        [GraphQLNonNullType]
        public CoreBroadcastBannerUI BroadcastBannerUI { get; set; }
        [GraphQLDescription(@"An optional action associated with the banner")]
        public ActionData? BroadcastBannerAction { get; set; }
        [GraphQLDescription(@"An optional label for the action, providing a call-to-action text.")]
        public string? BroadcastBannerActionLabel { get; set; }
        [GraphQLDescription(@"Analytics data to track impressions and interactions with the banner.")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"Unique ID used in FE when user dismiss the banner to ensure it's never displayed again
(Required when broadcastBannerDismissible is true)")]
        public string? BroadcastBannerId { get; set; }
        [GraphQLDescription(@"Display ""X"" to dismiss banner when true")]
        [GraphQLNonNullType]
        public bool BroadcastBannerDismissible { get; set; }
        [GraphQLDescription(@"Analytics data to track when user clicks the dismiss button of the banner")]
        public Analytics? BroadcastBannerDismissAnalytics { get; set; }
    }

    [Shareable]
    public class CoreButton
    {
        [GraphQLDescription(@"represents button variant")]
        [GraphQLNonNullType]
        public CoreButtonStyle CoreButtonStyle { get; set; }
        [GraphQLDescription(@"represents button label. Free text to act as body/title text for button.")]
        [GraphQLNonNullType]
        public string CoreButtonLabel { get; set; }
        [GraphQLDescription(@"represents button leading icon")]
        public CoreIcon? CoreButtonLeadingIcon { get; set; }
        [GraphQLDescription(@"represents button trailing icon")]
        public CoreIcon? CoreButtonTrailingIcon { get; set; }
        [GraphQLDescription(@"represents button action, Options: login , olive-chat , side-cart , null")]
        [GraphQLNonNullType]
        public ActionData CoreButtonAction { get; set; }
        [GraphQLDescription(@"indicates whether button is enabled, default is true")]
        [GraphQLNonNullType]
        public bool CoreButtonEnabled { get; set; }
    }

    [GraphQLDescription(@"a section for buttons to be arranged for full width layouts like feeds, bottomsheets, etc")]
    [Shareable]
    public class ButtonSection : IGenericPageFeedItem
    {
        [GraphQLNonNullType]
        public CoreButton ButtonSectionButton { get; set; }
    }

    [GraphQLDescription(@"Icon hosted in app code as part of Core Icon set")]
    [Shareable]
    public class CoreIcon : IIconAsset
    {
        [GraphQLDescription(@"Icon name per Core Design System")]
        [GraphQLNonNullType]
        public string CoreIconName { get; set; }
    }

    [Shareable]
    public class CoreInsetAlertUI
    {
        public string? Title { get; set; }
        public string? Description { get; set; }
        [GraphQLNonNullType]
        public CoreAlertStyle Style { get; set; }
    }

    [Shareable]
    public class BasicInsetAlert : IBoostEdrOfferResponse, IMoreFeedItem, IGenericPageFeedItem
    {
        [GraphQLNonNullType]
        public CoreInsetAlertUI InsetAlertUI { get; set; }
        public ActionData? InsetAlertAction { get; set; }
        public string? InsetAlertActionLabel { get; set; }
        public Analytics? ImpressionAnalytics { get; set; }
    }

    [GraphQLDescription(@"Core DS Row Component (UI Only)")]
    [Shareable]
    public class CoreRowUI : IProductDetailsCoreRowDetails
    {
        [GraphQLDescription(@"Icon to be displayed in front of label")]
        public IIconAsset? LeadingAsset { get; set; }
        [GraphQLDescription(@"Optional description under the `label`")]
        public string? Description { get; set; }
        [GraphQLDescription(@"Mandatory label")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Optional text to display over the `label`")]
        public string? OverlineText { get; set; }
        [GraphQLDescription(@"Optional icon to be displayed at the end (towards right side) of `label`")]
        public IIconAsset? TrailingAsset { get; set; }
        [GraphQLDescription(@"Optional text to be displayed at the end (towards right side) of `label`")]
        public string? TrailingText { get; set; }
    }

    [GraphQLDescription(@"Container for BasicCoreRow")]
    [Shareable]
    public class BasicCoreRowList : IGenericPageFeedItem
    {
        public string? BasicCoreRowListSectionTitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<BasicCoreRow> BasicCoreRowListItems { get; set; }
        [GraphQLDescription(@"Dynamic Analytics fields to be used for all component events:
* eventCategory - e.g. branded_shop
* eventLabel - <label>
* extraContent - <custom field(s) with array of values from the row items>")]
        public Analytics? BasicCoreRowListAnalytics { get; set; }
        [GraphQLDescription(@"Analytics fields to be used for impression events:
* tealiumEvent - e.g. bsotd_impression
* eventAction - e.g. bsotd_impression")]
        public Analytics? BasicCoreRowListImpressionAnalytics { get; set; }
    }

    [GraphQLDescription(@"Business logic for CoreRowUI.
It implements some of the Core DS Row features and should be extended with additional features as required.
There might be specific use-cases which goes beyond BasicCoreRow, then a new type might be considered.")]
    [Shareable]
    public class BasicCoreRow : IProductDetailsCoreRowDetails
    {
        [GraphQLDescription(@"Row UI")]
        [GraphQLNonNullType]
        public CoreRowUI Row { get; set; }
        [GraphQLDescription(@"Action is required because on Android there's no indication if a row is tappable or not.
By making it required it ensure a consistent behaviour and enhance the UX.")]
        [GraphQLNonNullType]
        public ActionData Action { get; set; }
    }

    [GraphQLDescription(@"Core DS Radio Row Component (UI Only)")]
    [Shareable]
    public class CoreRadioRowUI
    {
        [GraphQLDescription(@"Optional description under the `label`")]
        public string? Description { get; set; }
        [GraphQLDescription(@"Mandatory label")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Current selected state. One and only one should always be selected")]
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
    }

    [Shareable]
    public class CoreTagUI
    {
        [GraphQLDescription(@"Mandatory text (e.g. ""SAVE $2.00"")")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Theme to use for the Core Tag")]
        [GraphQLNonNullType]
        public CoreColorTheme CoreColorTheme { get; set; }
        [GraphQLDescription(@"Border is primary foreground colour")]
        [GraphQLNonNullType]
        public bool HasBorder { get; set; }
    }

    [GraphQLDescription(@"Icon hosted externally")]
    [Shareable]
    public class HostedIcon : IIconAsset
    {
        [GraphQLDescription(@"Image URL")]
        [GraphQLNonNullType]
        public string Url { get; set; }
    }

    [GraphQLName("IconAsset")]
    public interface IIconAsset
    {
    }

    [GraphQLName("CustomMessageFeed")]
    public interface ICustomMessageFeed
    {
    }

    [Shareable]
    public class PopupMessage : ICustomMessageFeed
    {
        public string? MessageTitle { get; set; }
        public string? MessageDescription { get; set; }
        public string? MessageCtaLabel { get; set; }
    }

    [GraphQLDescription(@"@deprecated(reason: No longer used. Replaced by FullScreenMessage)")]
    [Shareable]
    public class EmptyScreenMessage : ICustomMessageFeed
    {
        public string? MessageTitle { get; set; }
        public string? MessageDescription { get; set; }
        public string? MessageCtaLabel { get; set; }
        public string? MessageCtaUrl { get; set; }
        public string? MessageImageUrl { get; set; }
    }

    [Shareable]
    public class FullScreenMessage : ICustomMessageFeed
    {
        public string? MessageTitle { get; set; }
        public string? MessageDescription { get; set; }
        [GraphQLDeprecated(@"No longer used. Replaced by messageAsset")]
        public string? MessageImageUrl { get; set; }
        public DownloadableAsset? MessageAsset { get; set; }
        [GraphQLNonNullType]
        public ICollection<Button> MessageButtons { get; set; }
    }

    [GraphQLDescription(@"represents editorial banner on generic page, pls refer to https://woolworthsdigital.atlassian.net/browse/LOL-5818")]
    [Shareable]
    public class EditorialBanner : IEditorialCarouselItem, IGenericPageFeedItem
    {
        [GraphQLDescription(@"Unique ID for the banner")]
        [GraphQLNonNullType]
        public string EditorialBannerId { get; set; }
        [GraphQLDescription(@"In hex (e.g. #123456), background colour to use
Currently supported colours:
  White #FFFFFF
  Green #178841
  Dark Green #0D5127
  Zing #CAEB6D
  Charcoal #3A474E
  Light Green #E8F3EC
  Light Zing #F4FBE2
  Light Charcoal #F5F6F6
  Light Yellow #FFFBE5
  Light Red #FDE8E9
  Light Blue #EDF5FA")]
        [GraphQLNonNullType]
        public string EditorialBannerBackgroundColour { get; set; }
        [GraphQLDescription(@"represents the banner image, mapped from AEM bannerImageMobileCropUrl field")]
        public ImageWithAlt? EditorialBannerImage { get; set; }
        [GraphQLDescription(@"represents the banner title, mapped from AEM title")]
        public string? EditorialBannerTitle { get; set; }
        [GraphQLDescription(@"represents the banner description, mapped from AEM subTitle")]
        public string? EditorialBannerSubtitle { get; set; }
        [GraphQLDescription(@"action when banner is tapped, mapped from AEM ctaUrl")]
        public ActionData? EditorialBannerAction { get; set; }
        [GraphQLDescription(@"represents footer style, e.g. BYLINE")]
        public EditorialBannerFooter? EditorialBannerFooter { get; set; }
        [GraphQLDescription(@"represents banner image formate, default format: FULL_WIDTH")]
        [GraphQLNonNullType]
        public BannerImageFormat EditorialBannerImageFormat { get; set; }
        [GraphQLDescription(@"Dynamic Analytics fields to be used for all component events")]
        public Analytics? EditorialBannerAnalytics { get; set; }
        [GraphQLDescription(@"Analytics fields to be used for impression events:
* tealiumEvent - banner_impression or acs_content_impression
* eventAction - click")]
        public Analytics? EditorialBannerImpressionAnalytics { get; set; }
    }

    [Shareable]
    public class EditorialBannerFooter
    {
        [GraphQLNonNullType]
        public FooterStyle Style { get; set; }
        [GraphQLDescription(@"represents the footer text, mapped from AEM bylineText field")]
        public string? Text { get; set; }
        [GraphQLDescription(@"represents the footer logo, mapped from AEM icon field")]
        public ImageWithAlt? Logo { get; set; }
    }

    [GraphQLName("EditorialCarouselItem")]
    public interface IEditorialCarouselItem
    {
    }

    [Shareable]
    public class EditorialCarousel : IGenericPageFeedItem
    {
        [GraphQLNonNullType]
        public ICollection<IEditorialCarouselItem> EditorialCarouselItems { get; set; }
    }

    [Shareable]
    public class EdrOfferBanner : IUniversalInventoryNextBestAction
    {
        [GraphQLDescription(@"If offerapi v1: coupons[0].id, v2: offerId")]
        [GraphQLNonNullType]
        public string OfferId { get; set; }
        public string? OfferType { get; set; }
        [GraphQLNonNullType]
        public string LinkedEdrHashCrn { get; set; }
        public string? BannerTitle { get; set; }
        public string? BannerDescription { get; set; }
        public string? BannerIconUrl { get; set; }
        public ActionData? BannerButtonAction { get; set; }
        public TextWithAlt? BannerButtonLabel { get; set; }
        [GraphQLDescription(@"Banner tap action to launch bottomSheet / screen")]
        public ActionData? BannerAction { get; set; }
        public Analytics? BannerAnalytics { get; set; }
        public Analytics? BannerImpressionAnalytics { get; set; }
    }

    [GraphQLDescription(@"Represents the generic page's top/above
  the scrollable area.")]
    [GraphQLName("GenericPageHeader")]
    public interface IGenericPageHeader
    {
        [GraphQLDescription(@"represents page title")]
        [GraphQLNonNullType]
        string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"represents hero image url
optional field, usually only one hero image in a page")]
        string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        Video? Video { get; set; }
    }

    [GraphQLDescription(@"Represents the generic page content")]
    [GraphQLName("GenericPage")]
    public interface IGenericPage
    {
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        IEnumerable<IGenericPageFeedItem?> Items { get; set; }
        [GraphQLDescription(@"List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. opemBottomSheet?id=sheet1")]
        ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        int? NextPageNumber { get; set; }
    }

    [GraphQLDescription(@"Union of different ui components that will
display in app. Order of components is fully controlled in
backend by BFF with help of upstream services.

Carousel is a generic component, but only HeroBanner is currently supported which is home page specific.
Added here so it can easily be used in Content Playbook and extended in the future.")]
    [GraphQLName("GenericPageFeedItem")]
    public interface IGenericPageFeedItem
    {
    }

    [GraphQLDescription(@"Union of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. openBottomSheet?id=sheet1")]
    [GraphQLName("GenericPageBottomSheetItem")]
    public interface IGenericPageBottomSheetItem
    {
    }

    [GraphQLDescription(@"GridList is a collection of items that can be displayed in a grid format on FE.
It supports pagination and displays two items in a row by default.")]
    [Shareable]
    public class GridList : IGenericPageFeedItem
    {
        [GraphQLDescription(@"The type of the grid list.")]
        [GraphQLNonNullType]
        public ICollection<IGridListItem> GridListItems { get; set; }
        [GraphQLDescription(@"The total number of items in the entire paginated grid collection.")]
        public int? GridListItemCount { get; set; }
        [GraphQLDescription(@"Analytics for the grid list.")]
        public Analytics? GridListAnalytics { get; set; }
        [GraphQLDescription(@"Impression analytics for the grid list.")]
        public Analytics? GridListImpressionAnalytics { get; set; }
    }

    [GraphQLName("GridListItem")]
    public interface IGridListItem
    {
    }

    [GraphQLDescription(@"A type representing an image card with a full-width display.")]
    [Shareable]
    public class FullWidthImageCard : IGenericPageFeedItem
    {
        [GraphQLDescription(@"Image card Id for AEM driven components")]
        public string? ImageCardId { get; set; }
        [GraphQLDescription(@"The URL of the 1:1 image displayed in the card. Must be a valid URL and is non-nullable.")]
        [GraphQLNonNullType]
        public string ImageCardImageUrl { get; set; }
        [GraphQLDescription(@"The accessibility label for imageCardImageUrl.")]
        [GraphQLNonNullType]
        public string ImageCardImageAltText { get; set; }
        [GraphQLDescription(@"If provided, this title will be displayed below the image.")]
        public string? ImageCardTitle { get; set; }
    }

    [GraphQLDescription(@"It is the generic type designed for providing the information or the warning messages at varies screens in the app.")]
    [Shareable]
    public class InsetBanner : ICheckoutSegmentContent, IHomeFeed, IProductDetailsFeedItem, IProductListFeed, ICartProductFeed, ICataloguePromotionDetailsItem, IDeliveryUnlimitedSubscribeConfirmationFeedItem, IDeliveryUnlimitedSubscribePlanTypeFeedItem, IOrdersFeedItem, IFeedItem, IGenericPageFeedItem, IFulfilmentWindowPromotionalBanner
    {
        [GraphQLDescription(@"Represents the type of the inset banner. e.g. ""INFO""")]
        [GraphQLNonNullType]
        public InsetBannerDisplayType DisplayType { get; set; }
        [GraphQLDescription(@"Provides the message to be displayed in the banner.")]
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"Provides the icon to be displayed in the banner.")]
        public string? IconUrl { get; set; }
        [GraphQLDescription(@"Drives the title of the banner.")]
        public string? Title { get; set; }
        [GraphQLDescription(@"Drives the action with in the banner.")]
        public InsetBannerAction? Action { get; set; }
        [GraphQLDescription(@"Common BFF custom flag to allow independent chain resolvers.
Having item with _excluded:true, means it should not be used in FE")]
        public bool? Excluded { get; set; }
        [GraphQLDescription(@"Banner analytics")]
        public Analytics? Analytics { get; set; }
    }

    [Shareable]
    public class InsetBannerAction
    {
        [GraphQLDescription(@"Drives the placement/position of the action.")]
        [GraphQLNonNullType]
        public InsetBannerActionPlacement Placement { get; set; }
        [GraphQLDescription(@"Drives the type of the action. e.g. ""LINK""")]
        [GraphQLNonNullType]
        public InsetBannerActionType Type { get; set; }
        [GraphQLDescription(@"Drives the text to be displayed in the action. e.g. ""Allow""")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Provides the url to be redirected to, by click on the action link.")]
        public string? Url { get; set; }
    }

    [GraphQLDescription(@"Represents one of many link section in a page.")]
    [Shareable]
    public class Link : IGenericPageFeedItem
    {
        [GraphQLDescription(@"Link component id")]
        public string? LinkId { get; set; }
        [GraphQLDescription(@"Generic way of defining the action of a component.")]
        [GraphQLNonNullType]
        public ActionData LinkAction { get; set; }
        [GraphQLDescription(@"Tappable text to display")]
        [GraphQLNonNullType]
        public TextWithAlt LinkTextWithAlt { get; set; }
    }

    [GraphQLDescription(@"A sellable advertisement showing an image
with texts of the merchandise")]
    [Shareable]
    public class MerchCard : IProductListFeed
    {
        [GraphQLDescription(@"The large image of the merchandise to use on Grid View Tile Layout")]
        [GraphQLNonNullType]
        public ImageWithAlt MerchCardGridImageWithAlt { get; set; }
        [GraphQLDescription(@"The smaller image of the merchandise to use on List view")]
        [GraphQLNonNullType]
        public ImageWithAlt MerchCardListImageWithAlt { get; set; }
        [GraphQLDescription(@"The text displayed in bold right below the image")]
        [GraphQLNonNullType]
        public string MerchCardTitle { get; set; }
        [GraphQLDescription(@"The text displayed in regular font below the title")]
        public string? MerchCardDescription { get; set; }
        [GraphQLDescription(@"The clickable button that may take to different screen")]
        public Button? MerchCardButton { get; set; }
        [GraphQLDescription(@"The action when the whole card is tapped")]
        public ActionData? MerchCardAction { get; set; }
        [GraphQLDescription(@"Common analytics payload for merchCard")]
        public Analytics? MerchCardAnalytics { get; set; }
        [GraphQLDescription(@"Additional Analytics Payload
for Impression event")]
        public Analytics? MerchCardImpressionAnalytics { get; set; }
    }

    [GraphQLDescription(@"A sellable advertisement showing an image
with texts of the merchandise for the horizontal list layout
Currently used just for NZ")]
    [Shareable]
    public class MerchCardFullImage : IHorizontalListItem
    {
        [GraphQLDescription(@"The large image of the merchandise covering the full tile to use on the horizontal list Layout")]
        [GraphQLNonNullType]
        public ImageWithAlt MerchCardFullImageBackgroundImageWithAlt { get; set; }
        [GraphQLDescription(@"The text displayed in bold right below the image")]
        public string? MerchCardFullImageTitle { get; set; }
        [GraphQLDescription(@"The text displayed in regular font below the title")]
        public string? MerchCardFullImageDescription { get; set; }
        [GraphQLDescription(@"The clickable button that may take to different screen")]
        public Button? MerchCardFullImageButton { get; set; }
        [GraphQLDescription(@"The action when the whole card is tapped")]
        public ActionData? MerchCardFullImageAction { get; set; }
    }

    [GraphQLDescription(@"An actionable item in HorizontalList with Circular Image and title")]
    [Shareable]
    public class NavRoundel : IHorizontalListItem
    {
        [GraphQLDescription(@"Nav roundel component id")]
        public string? NavRoundelId { get; set; }
        [GraphQLDescription(@"The URL of the 1:1 image displayed in the card. Must be a valid URL and is non-nullable.")]
        [GraphQLNonNullType]
        public string NavRoundelImageUrl { get; set; }
        [GraphQLDescription(@"If provided, this title will be displayed below the image.")]
        public string? NavRoundelTitle { get; set; }
        [GraphQLDescription(@"If provided, the whole roundel will perform the attached action when tapped")]
        public ActionData? NavRoundelAction { get; set; }
    }

    [GraphQLDescription(@"Page cover component is used to surface branding and lifestyle images on key landing pages
refer to https://woolworthsdigital.atlassian.net/wiki/spaces/WoolworthsX/pages/26258408435/Page+Cover+component")]
    [Shareable]
    public class PageCover : IGenericPageFeedItem
    {
        [GraphQLDescription(@"Represents the format of the page cover component")]
        [GraphQLNonNullType]
        public PageCoverContentFormat PageCoverContentFormat { get; set; }
        [GraphQLDescription(@"Represents alignment of title, caption and logos")]
        [GraphQLNonNullType]
        public PageCoverContentAlignment PageCoverContentAlignment { get; set; }
        [GraphQLDescription(@"Represents the page cover background color, title and body copy color.")]
        [GraphQLNonNullType]
        public CoreColorTheme PageCoverContentTheme { get; set; }
        [GraphQLDescription(@"Represents the primary image")]
        public ImageWithAlt? PageCoverPrimaryImage { get; set; }
        [GraphQLDescription(@"Represents image position")]
        public PageCoverImagePosition? PageCoverPrimaryImagePosition { get; set; }
        [GraphQLDescription(@"Represents logo images")]
        public ICollection<ImageWithAlt>? PageCoverLogos { get; set; }
        [GraphQLDescription(@"Represents the title and subtitle")]
        public string? PageCoverTitle { get; set; }
        [GraphQLDescription(@"Represents the title text size")]
        public PageCoverTitleTextSize? PageCoverTitleSize { get; set; }
        [GraphQLDescription(@"Represents the subtitle")]
        public string? PageCoverSubTitle { get; set; }
    }

    [Shareable]
    public class CoreColorTheme
    {
        [GraphQLNonNullType]
        public CompatibleColor Background { get; set; }
        [GraphQLNonNullType]
        public CoreForegroundColors Foreground { get; set; }
    }

    [Shareable]
    public class CoreForegroundColors
    {
        [GraphQLNonNullType]
        public CompatibleColor Primary { get; set; }
        [GraphQLNonNullType]
        public CompatibleColor Secondary { get; set; }
        [GraphQLNonNullType]
        public CompatibleColor Highlight { get; set; }
    }

    [Shareable]
    public class CompatibleColor
    {
        [GraphQLNonNullType]
        public string LightHexCode { get; set; }
    }

    [Shareable]
    public class Pill : IHorizontalListItem
    {
        [GraphQLNonNullType]
        public string PillText { get; set; }
        [GraphQLNonNullType]
        public ActionData PillAction { get; set; }
    }

    [Shareable]
    public class ProductSection : IGenericPageFeedItem, ITabItemFeed
    {
        [GraphQLDescription(@"An optional product section id")]
        public string? ProductSectionId { get; set; }
        [GraphQLDescription(@"An optional standalone link to display at the bottom
of the product section. ie. This can have a deepLink
allowing the user to view all products.")]
        public Link? ProductSectionLink { get; set; }
        [GraphQLDescription(@"Sticky header when the full productSection is
longer than the device")]
        public string? ProductSectionTotal { get; set; }
        [GraphQLDescription(@"List of different content to be rendered in the ProductSection")]
        [GraphQLNonNullType]
        public ICollection<IProductSectionFeedItem?> ProductSectionFeed { get; set; }
    }

    [GraphQLName("ProductSectionFeedItem")]
    public interface IProductSectionFeedItem
    {
    }

    [GraphQLName("PromotionContent")]
    public interface IPromotionContent
    {
    }

    [Shareable]
    public class PromotionMarkdownContent : IPromotionContent
    {
        [GraphQLDescription(@"eg: Terms & Conditions")]
        [GraphQLNonNullType]
        public string PromotionMarkdownTitle { get; set; }
        [GraphQLDescription(@"Markdown text")]
        [GraphQLNonNullType]
        public string PromotionMarkdownText { get; set; }
    }

    [GraphQLDescription(@"Can be used to display an inset banner and on click display a content page
eg: Everyday Market shipping promotion, and on click display terms and conditions page")]
    [Shareable]
    public class PromotionBanner : IMarketplacePersonalisedSegment, IProductDetailsFeedItem, IShippingMessageBanner
    {
        [GraphQLDescription(@"Banner details")]
        [GraphQLNonNullType]
        public InsetBanner Banner { get; set; }
        [GraphQLDescription(@"Content to be displayed on clicking the banner")]
        public IPromotionContent? PromotionContent { get; set; }
    }

    [GraphQLDescription(@"Represents a universal search nav card, more fields can be added base on the needs. E.g. placeholder, etc.")]
    [Shareable]
    public class SearchNavCard : IGenericPageFeedItem
    {
        [GraphQLDescription(@"represents the context of the search nav card, FE can use this to determine which bff query to call")]
        public ContextType? SearchNavCardContext { get; set; }
        [GraphQLDescription(@"represents the text to be displayed on the search nav card")]
        public string? SearchNavCardPlaceholderText { get; set; }
        [GraphQLDescription(@"represents the action to be taken when the search nav card is clicked")]
        [GraphQLNonNullType]
        public ActionData SearchNavCardAction { get; set; }
    }

    [GraphQLDescription(@"Represents the whole Tab component")]
    [Shareable]
    public class TabSection : IGenericPageFeedItem
    {
        [GraphQLDescription(@"Tab section id")]
        public string? TabSectionId { get; set; }
        [GraphQLDescription(@"List of tab items that a tab contains")]
        [GraphQLNonNullType]
        public ICollection<TabItem> TabSectionItems { get; set; }
    }

    [GraphQLDescription(@"Represent the single member of the TabSection")]
    [Shareable]
    public class TabItem
    {
        [GraphQLDescription(@"Tab item id")]
        public string? TabItemId { get; set; }
        [GraphQLDescription(@"The text to appear on top of the TabSection Component.
This text appear along with all the other TabItems of the TabSection")]
        [GraphQLNonNullType]
        public string TabItemTitle { get; set; }
        [GraphQLDescription(@"This is the Panel to display when the tab item is selected.
Contains different components")]
        [GraphQLNonNullType]
        public ICollection<ITabItemFeed?> TabItemFeed { get; set; }
    }

    [GraphQLName("TabItemFeed")]
    public interface ITabItemFeed
    {
    }

    [GraphQLDescription(@"Represents one of many title section in a page.
the titleSectionType value is used by FE to style the text")]
    [Shareable]
    public class TitleSection : IGenericPageFeedItem
    {
        public string? TitleSectionId { get; set; }
        [GraphQLNonNullType]
        public TitleSectionTypes TitleSectionType { get; set; }
        [GraphQLNonNullType]
        public string TitleSectionText { get; set; }
    }

    [GraphQLDescription(@"Holder of all the event specific analytics
for VideoAd Component")]
    [Shareable]
    public class VideoAdEventAnalytics
    {
        [GraphQLDescription(@"Additional Analytics Payload
for Impression event")]
        public Analytics? Impression { get; set; }
        [GraphQLDescription(@"Additional Analytics Payload
for Video Complete event")]
        public Analytics? VideoComplete { get; set; }
        [GraphQLDescription(@"Additional Analytics Payload
for Video's First Auto Start event")]
        public Analytics? VideoAutoStart { get; set; }
        [GraphQLDescription(@"Additional Analytics Payload
for Video Manually Paused event")]
        public Analytics? VideoPause { get; set; }
        [GraphQLDescription(@"Additional Analytics Payload
for Video Manually Played event")]
        public Analytics? VideoPlay { get; set; }
        [GraphQLDescription(@"Additional Analytics Payload
for Video Load Error")]
        public Analytics? VideoErrorImpression { get; set; }
    }

    [GraphQLDescription(@"The bottom sheet component specific for 
stand alone VideoAdUnit component.")]
    [Shareable]
    public class VideoAdBottomSheet
    {
        [GraphQLDescription(@"The markdown formatted string to be rendered")]
        [GraphQLNonNullType]
        public string ContentMarkdown { get; set; }
        [GraphQLDescription(@"The title to be used on top of the bottomsheet")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"The text to display to the button that will open up the bottomsheet")]
        public string? ButtonText { get; set; }
        [GraphQLDescription(@"The accessibility text to be read for the button")]
        [GraphQLNonNullType]
        public string AccessibilityText { get; set; }
        [GraphQLDescription(@"Additional Analytics Payload
for BottomSheet Impression event")]
        public Analytics? ImpressionAnalytics { get; set; }
    }

    [GraphQLDescription(@"The video component that user may play / pause.")]
    [Shareable]
    public class VideoAd
    {
        [GraphQLDescription(@"The url source to download the video")]
        [GraphQLNonNullType]
        public string Url { get; set; }
        [GraphQLDescription(@"The image to display when the url is not streamable/downloadable.")]
        public ImageWithAlt? FallbackImage { get; set; }
        [GraphQLDescription(@"The ad duration to be displayed as overlay")]
        [GraphQLNonNullType]
        public int Duration { get; set; }
        [GraphQLDescription(@"The accessibility transcript of the video")]
        public VideoAdBottomSheet? Transcript { get; set; }
        [GraphQLDescription(@"The terms and condition of the advertisement")]
        public VideoAdBottomSheet? TermsAndConditions { get; set; }
        [GraphQLDescription(@"Common analytics for VideoAd
Any analytics fields provided here will be for
every events to be tracked by FE")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Holds all the event specific
Analytics payload")]
        public VideoAdEventAnalytics? EventAnalytics { get; set; }
    }

    [GraphQLDescription(@"The carousel component the user can do transaction")]
    [Shareable]
    public class VideoAdUnitCarousel
    {
        [GraphQLNonNullType]
        public ICollection<IHorizontalListItem> Items { get; set; }
    }

    [GraphQLDescription(@"A sellable advertisement showing a video 
with product to purchase or add to list")]
    [Shareable]
    public class VideoAdUnit : IProductListFeed, IGenericPageFeedItem
    {
        [GraphQLDescription(@"The video component that user may play / pause.")]
        [GraphQLNonNullType]
        public VideoAd VideoAdUnitVideoAd { get; set; }
        [GraphQLDescription(@"The product card that is related to the video. With this, the user may add to cart, list a product that the related to the video.")]
        public ProductCard? VideoAdUnitProductCard { get; set; }
        [GraphQLDescription(@"The product carousel that is related to the video. With this, the user may add to cart, list a product that the related to the video.")]
        public VideoAdUnitCarousel? VideoAdUnitCarousel { get; set; }
        [GraphQLDescription(@"The link component at the bottom of the carousel")]
        public Link? VideoAdUnitBottomLink { get; set; }
    }

    [GraphQLDescription(@"Represents the specials hub home page")]
    [Shareable]
    public class SpecialsHomePage : IGenericPage
    {
        [GraphQLDescription(@"Inherited from GenericPage.
List of different bottomSheet components. To be displayed
on demand, when a component of the page has actionLink
related to bottom sheet ie. opemBottomSheet?id=sheet1")]
        public ICollection<IGenericPageBottomSheetItem?>? BottomSheets { get; set; }
        [GraphQLDescription(@"Page level analytics, generally:
* appSection
* screenName

Any analytics fields provided here will be persisted
for all subsequent analytics calls within the screen")]
        public Analytics? Analytics { get; set; }
        [GraphQLDescription(@"Page level Screen / Page View analytics, generally:
* tealiumEvent - *_screen

Any analytics fields provided here will only be
part of the tealium_event_type ""view"" event")]
        public Analytics? ImpressionAnalytics { get; set; }
        [GraphQLDescription(@"next page number to be used for pagination, FE use this to send to bff to get the next page
when nextPageNumber is null, it means there is no more page to be fetched")]
        public int? NextPageNumber { get; set; }
        [GraphQLDescription(@"Different metadata that may be displayed on top/above
the scrollable area.")]
        public IGenericPageHeader? Header { get; set; }
        [GraphQLDescription(@"List of different ui components. To be displayed in
the main scrollable area of the Page")]
        [GraphQLNonNullType]
        public IEnumerable<IGenericPageFeedItem?> Items { get; set; }
    }

    [Shareable]
    public class SpecialsHomePageHeader : IGenericPageHeader
    {
        [GraphQLDescription(@"Inherited from GenericPage.
Represents text to display on top bar")]
        [GraphQLNonNullType]
        public string PageTitle { get; set; }
        [GraphQLDescription(@"When true, the page title will be shown in large size under the top row on load.
Scrolling down will transform the title into small size in the top row.")]
        public bool? LargePageTitle { get; set; }
        [GraphQLDescription(@"implement from generic type, represents hero image url
optional field, usually only one hero image in a page")]
        public string? HeroImage { get; set; }
        [GraphQLDescription(@"represents hero image type
If null, the hero image will be treated as ASPECT_FILL")]
        public GenericPageHeroImageType? HeroImageType { get; set; }
        [GraphQLDescription(@"represents the video when hero image obj has a video url in it")]
        public Video? Video { get; set; }
    }

    [Shareable]
    public class OfferCard : IHorizontalListItem
    {
        [GraphQLDescription(@"Base Analytics fields which will be used by HorizontalList.
* extraContent (key & value) - Used to send offer details to Tealium")]
        public Analytics? OfferCardAnalytics { get; set; }
        [GraphQLDescription(@"Offer tile main image URL, expected 4:3 ratio")]
        [GraphQLNonNullType]
        public string OfferCardImageUrl { get; set; }
        [GraphQLDescription(@"Offer tile title")]
        [GraphQLNonNullType]
        public string OfferCardTitle { get; set; }
        [GraphQLDescription(@"Offer tile description")]
        public string? OfferCardDescription { get; set; }
        [GraphQLDescription(@"Offer tile action")]
        public ActionData? OfferCardAction { get; set; }
        [GraphQLDescription(@"Offer tile deeplink
can support app local later if required; i.e. com.woolworths.shop://local/openBottomSheet?id=bottomSheet1")]
        [GraphQLDeprecated(@"Use offerCardAction")]
        public string? OfferCardDeepLink { get; set; }
        [GraphQLDescription(@"Offer tile badge image URL with text")]
        public ImageWithAlt? OfferCardBadgeImage { get; set; }
        [GraphQLDescription(@"Offer tile text colour")]
        [GraphQLNonNullType]
        public OfferCardTextColor OfferCardTextColor { get; set; }
        [GraphQLDescription(@"Offer tile text background colour
hex RGB color, e.g. #000000")]
        [GraphQLNonNullType]
        public string OfferCardTextBackgroundColor { get; set; }
        [GraphQLDescription(@"Offer tile price information")]
        public OfferCardPriceInfo? OfferCardPriceInfo { get; set; }
        [GraphQLDescription(@"Offer tile price variant")]
        public OfferCardVariants? OfferCardVariant { get; set; }
    }

    [Shareable]
    public class OfferCardPriceInfo
    {
        [GraphQLDescription(@"The dollar part of the price")]
        public string? OfferCardPriceInfoPriceDollars { get; set; }
        [GraphQLDescription(@"The cent part of the price")]
        public string? OfferCardPriceInfoPriceCents { get; set; }
        [GraphQLDescription(@"The first line of prefix text for the price information
e.g. ANY 2")]
        public string? OfferCardPriceInfoPrefix1 { get; set; }
        [GraphQLDescription(@"The second line of prefix text for the price information
e.g. FOR")]
        public string? OfferCardPriceInfoPrefix2 { get; set; }
        [GraphQLDescription(@"The suffix for the price information
e.g. ea")]
        public string? OfferCardPriceInfoSuffix { get; set; }
    }

    [Shareable]
    public class PromotionCard : IHorizontalListItem
    {
        [GraphQLNonNullType]
        public ProductCard PromotionCardProduct { get; set; }
        [GraphQLDescription(@"Promotion card offer id")]
        public string? PromotionCardOfferId { get; set; }
    }

    [Shareable]
    public class CheckoutCollectionAddressEmpty : ICheckoutSegmentContent
    {
        [GraphQLDescription(@"eg: Deliver To or Pickup from")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"eg: Additional text")]
        [GraphQLNonNullType]
        public string DisplayName { get; set; }
        [GraphQLDescription(@"text displayed on the button")]
        [GraphQLNonNullType]
        public string ButtonText { get; set; }
    }

    [Shareable]
    public class CheckoutCollectionAddressDelivery : ICheckoutSegmentContent, ICheckoutCollectionAddress
    {
        [GraphQLDescription(@"eg: Deliver To or Pickup from")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"address id")]
        [GraphQLNonNullType]
        public int AddressId { get; set; }
        [GraphQLDescription(@"postcode")]
        [GraphQLNonNullType]
        public string Postcode { get; set; }
        [GraphQLDescription(@"street1")]
        [GraphQLNonNullType]
        public string Street1 { get; set; }
        [GraphQLDescription(@"street2")]
        [GraphQLNonNullType]
        public string Street2 { get; set; }
        [GraphQLDescription(@"suburbId")]
        [GraphQLNonNullType]
        public int SuburbId { get; set; }
        [GraphQLDescription(@"street2")]
        [GraphQLNonNullType]
        public string SuburbName { get; set; }
        [GraphQLDescription(@"Delivery or Pickup")]
        [GraphQLNonNullType]
        public CollectionModeId ModeId { get; set; }
        [GraphQLDescription(@"name string")]
        [GraphQLNonNullType]
        public string DisplayName { get; set; }
        [GraphQLDescription(@"logo")]
        [GraphQLDeprecated(@"Use `addressImageUrl` instead from Iris 22.5 onwards")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"new image")]
        public string? AddressImageUrl { get; set; }
        [GraphQLDescription(@"text displayed on the button")]
        [GraphQLNonNullType]
        public string ButtonText { get; set; }
        [GraphQLDescription(@"Store Id that delivers products for delivery now customers")]
        public int? ExpressDeliveryStoreId { get; set; }
    }

    [Shareable]
    public class CheckoutCollectionAddressPickup : ICheckoutCollectionAddress
    {
        [GraphQLDescription(@"eg: Deliver To or Pickup from")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"address id")]
        [GraphQLNonNullType]
        public int AddressId { get; set; }
        [GraphQLDescription(@"store id")]
        [GraphQLNonNullType]
        public int StoreId { get; set; }
        [GraphQLDescription(@"Delivery or Pickup")]
        [GraphQLNonNullType]
        public CollectionModeId ModeId { get; set; }
        [GraphQLDescription(@"address string")]
        [GraphQLNonNullType]
        public string Text { get; set; }
        [GraphQLDescription(@"name string")]
        [GraphQLNonNullType]
        public string DisplayName { get; set; }
        [GraphQLDescription(@"logo")]
        [GraphQLDeprecated(@"Use `addressImageUrl` instead from Iris 22.5 onwards")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"new image")]
        public string? AddressImageUrl { get; set; }
        [GraphQLDescription(@"label")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"text displayed on the button")]
        [GraphQLNonNullType]
        public string ButtonText { get; set; }
    }

    [Shareable]
    public class CheckoutCollectionMethodOption
    {
        [GraphQLDescription(@"Set when modeId is Delivery or DeliveryNow and user has a Primary Address")]
        public int? AddressId { get; set; }
        [GraphQLDescription(@"Delivery or Pickup")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Delivery or Pickup")]
        [GraphQLNonNullType]
        public CollectionModeId ModeId { get; set; }
        [GraphQLDescription(@"if the collection method is selected or not")]
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
    }

    [GraphQLName("CheckoutCollectionAddress")]
    public interface ICheckoutCollectionAddress
    {
    }

    [Shareable]
    public class CheckoutMarketPickupBottomSheet : IBottomSheetContent
    {
        [GraphQLNonNullType]
        public string BottomSheetTitle { get; set; }
        [GraphQLNonNullType]
        public string BottomSheetBody { get; set; }
        public bool? ShowOnceOnly { get; set; }
        public DownloadableAsset? BannerAsset { get; set; }
        public ContentCta? PrimaryCta { get; set; }
        public ContentCta? SecondaryCta { get; set; }
    }

    [GraphQLDescription(@"Union type in details page to select a collection method eg: delivery/pickup")]
    [Shareable]
    public class CheckoutCollectionMethod : ICheckoutSegmentContent
    {
        [GraphQLDescription(@"Text to be displayed to the user eg: select a collection method")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"collection options")]
        [GraphQLNonNullType]
        public ICollection<CheckoutCollectionMethodOption> Options { get; set; }
        [GraphQLDescription(@"address details")]
        [GraphQLNonNullType]
        public ICheckoutCollectionAddress Address { get; set; }
        [GraphQLDescription(@"Fields used to ""sync"" shopping mode with App")]
        [GraphQLNonNullType]
        public ShoppingModeDetails ShoppingModeDetails { get; set; }
        [GraphQLDescription(@"Bottomsheet to indicate of switching to pickup with EM items")]
        public CheckoutMarketPickupBottomSheet? MarketPickupSheet { get; set; }
        [GraphQLDescription(@"Inset banner to indicate DTBNow/Delivery Now orders will jump up the queue")]
        public InsetBanner? InsetBanner { get; set; }
    }

    [Shareable]
    public class CheckoutMarketFulfilmentAddress : ICheckoutSegmentContent
    {
        [GraphQLDescription(@"Label: Ship to")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Address text")]
        [GraphQLNonNullType]
        public string DisplayName { get; set; }
        [GraphQLDescription(@"Determine whether address is selected for EDM or not required")]
        [GraphQLNonNullType]
        public MarketFulfilmentAddressStatus AddressStatus { get; set; }
        [GraphQLDescription(@"Add/Edit address button title in pickup mode, null for delivery mode")]
        public string? AddressButtonTitle { get; set; }
        [GraphQLDescription(@"Indicates whether update primary address or EM alt address")]
        [GraphQLNonNullType]
        public AddressType AddressType { get; set; }
        [GraphQLDescription(@"Grocery collection mode, used for client synchronisation")]
        [GraphQLDeprecated(@"Use `addressData.modeId` for collection mode synchronisation")]
        [GraphQLNonNullType]
        public CollectionModeId ModeId { get; set; }
        [GraphQLDescription(@"Delivery mode data used for client synchronise in EM only scenario")]
        public ICheckoutCollectionAddress? AddressData { get; set; }
        [GraphQLDescription(@"Fields used to ""sync"" shopping mode with App")]
        [GraphQLNonNullType]
        public ShoppingModeDetails ShoppingModeDetails { get; set; }
    }

    [GraphQLDescription(@"user preference")]
    [Shareable]
    public class CheckoutDeliveryPreferenceToggle : ICheckoutSegmentContent
    {
        [GraphQLNonNullType]
        public CheckoutDeliveryPreferenceId PreferenceId { get; set; }
        [GraphQLNonNullType]
        public bool IsEnabled { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLNonNullType]
        public bool Value { get; set; }
        public InlineMessage? InlineMessage { get; set; }
    }

    [Shareable]
    public class CheckoutDeliveryPreferenceText : ICheckoutSegmentContent
    {
        [GraphQLNonNullType]
        public CheckoutDeliveryPreferenceId PreferenceId { get; set; }
        [GraphQLNonNullType]
        public bool IsEnabled { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? DescriptionText { get; set; }
        public string? PlaceholderText { get; set; }
        public string? Text { get; set; }
        public InputTextLimit? InputLimit { get; set; }
        [GraphQLDescription(@"text displayed on the button")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        public InlineMessage? InlineMessage { get; set; }
    }

    [GraphQLDescription(@"text input to allow maxLength and offset
consumer to control input limit")]
    [Shareable]
    public class InputTextLimit
    {
        [GraphQLNonNullType]
        public int MaxLength { get; set; }
        [GraphQLNonNullType]
        public int WarningOffset { get; set; }
    }

    [Shareable]
    public class CheckoutFulfilmentWindowSlotBadge
    {
        [GraphQLDescription(@"eg: Status")]
        [GraphQLDeprecated(@"Use style instead")]
        [GraphQLNonNullType]
        public CheckoutBadgeType Type { get; set; }
        [GraphQLDescription(@"eg: Closing Soon")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"eg: PLAIN, PRIMARY, PRIMARY_SOLID")]
        [GraphQLNonNullType]
        public CheckoutBadgeStyle Style { get; set; }
    }

    [Shareable]
    public class FulfilmentWindowSlotSelectionOptionsState
    {
        [GraphQLNonNullType]
        public ICollection<FulfilmentWindowSlotSelectionOptionId> EnabledOptions { get; set; }
        public FulfilmentWindowSlotSelectionOptionId? SelectedOption { get; set; }
        [GraphQLNonNullType]
        public bool IsLastWindow { get; set; }
    }

    [Shareable]
    public class CheckoutFulfilmentWindowSlot
    {
        [GraphQLDescription(@"time window as a string eg: 12pm - 1pm")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"time duration eg: 1hr window")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"startTime string")]
        [GraphQLNonNullType]
        public string StartTime { get; set; }
        [GraphQLDescription(@"unique identifier of this slot")]
        [GraphQLNonNullType]
        public int Id { get; set; }
        [GraphQLDescription(@"if the slot if available or closed")]
        [GraphQLNonNullType]
        public bool IsAvailable { get; set; }
        [GraphQLDescription(@"if this is selected")]
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLDescription(@"if is partner driver")]
        [GraphQLNonNullType]
        public bool IsPartnerDriver { get; set; }
        [GraphQLDescription(@"price eg: $19.00")]
        [GraphQLNonNullType]
        public string SectionTitle { get; set; }
        [GraphQLDescription(@"badges eg: Closing Soon")]
        [GraphQLNonNullType]
        public ICollection<CheckoutFulfilmentWindowSlotBadge> Badges { get; set; }
        [GraphQLDescription(@"Contextual information about the slot")]
        public FulfilmentWindowSlotSelectionInfo? SelectionInfo { get; set; }
        [GraphQLDescription(@"Contextual information about the slot state. Currently only used by the NZ app")]
        public FulfilmentWindowSlotSelectionOptionsState? SelectionOptionsState { get; set; }
    }

    [Shareable]
    public class CheckoutFulfilmentWindowGroupMessage
    {
        [GraphQLDescription(@"No windows currently offered")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"details")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
    }

    [Shareable]
    public class CheckoutFulfilmentWindowGroup
    {
        [GraphQLDescription(@"time group eg: morning")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"if any of the slots under this timegroup is selected")]
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLDescription(@"time group image")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"if slots are not available")]
        public CheckoutFulfilmentWindowGroupMessage? Message { get; set; }
        [GraphQLDescription(@"times starting 5am - 12pm")]
        public string? Subtitle { get; set; }
        [GraphQLDescription(@"all timeslots in this timegroup")]
        [GraphQLNonNullType]
        public ICollection<CheckoutFulfilmentWindowSlot> Slots { get; set; }
    }

    [Shareable]
    public class CheckoutDeliveryNowWindow
    {
        [GraphQLDescription(@"window id")]
        [GraphQLNonNullType]
        public int Id { get; set; }
        [GraphQLDescription(@"startTime string")]
        [GraphQLNonNullType]
        public string StartTime { get; set; }
        [GraphQLDescription(@"Delivery Now")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"eg: In approx 1hr and 10 minutes")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"eg: 50 item limit")]
        public string? SecondarySubtitle { get; set; }
        [GraphQLDescription(@"price eg: $19.00")]
        [GraphQLNonNullType]
        public string SectionTitle { get; set; }
        [GraphQLDescription(@"image")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"learn more about")]
        [GraphQLNonNullType]
        public string MessageTitle { get; set; }
        [GraphQLDescription(@"delivery now")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        [GraphQLDescription(@"additional delivery now info")]
        [GraphQLNonNullType]
        public InfoSection Info { get; set; }
        [GraphQLDescription(@"is DN selected")]
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLDescription(@"DeliveryNow tile is enabled when slots are availble
DeliveryNow tile is disabled when slots are exhausted or outside of operating hours for DTBNow")]
        [GraphQLNonNullType]
        public bool IsEnabled { get; set; }
        [GraphQLDescription(@"Show badge as ""At full capacity, check back soon"" when slots are exhaused for DeliveryNow
Show badge as ""Available from <start time> - <end time>"" when it was outside of DeliveryNow operating hours
Do not show badge when window slots are available")]
        public Badge? Badge { get; set; }
        [GraphQLDescription(@"Contextual information about the slot")]
        public FulfilmentWindowSlotSelectionInfo? SelectionInfo { get; set; }
    }

    [Shareable]
    public class CheckoutDirectToBootNowWindow
    {
        [GraphQLDescription(@"window id")]
        [GraphQLNonNullType]
        public int Id { get; set; }
        [GraphQLDescription(@"startTime string")]
        [GraphQLNonNullType]
        public string StartTime { get; set; }
        [GraphQLDescription(@"Direct To Boot Now")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"eg: within 60mins")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"eg: 50 item limit")]
        public string? SecondarySubtitle { get; set; }
        [GraphQLDescription(@"price eg: $19.00")]
        [GraphQLNonNullType]
        public string SectionTitle { get; set; }
        [GraphQLDescription(@"image")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLDescription(@"is DTBNow selected")]
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLDescription(@"DTBNow tile is enabled when slots are availble
DTBNow tile is disabled when slots are exhausted or outside of operating hours for DTBNow")]
        [GraphQLNonNullType]
        public bool IsEnabled { get; set; }
        [GraphQLDescription(@"Show badge as ""At full capacity, check back soon"" when slots are exhaused for DTBNow
Show badge as ""Available from <start time> - <end time>"" when it was outside of DTBNow operating hours
Do not show badge when window slots are available")]
        public Badge? Badge { get; set; }
        [GraphQLDescription(@"Show badges like NEW when DTBNow feature is new to a given user")]
        public Badge? TileBadge { get; set; }
        [GraphQLDescription(@"Contextual information about the slot")]
        public FulfilmentWindowSlotSelectionInfo? SelectionInfo { get; set; }
    }

    [Shareable]
    public class CheckoutFulfilmentWindow
    {
        [GraphQLDescription(@"eg: Today or Tomorrow")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"09 Jul")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"if the windows in this date are available")]
        [GraphQLNonNullType]
        public bool IsAvailable { get; set; }
        [GraphQLDescription(@"if this is selected")]
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLDescription(@"eg: From $19.00")]
        [GraphQLNonNullType]
        public string Footer { get; set; }
        [GraphQLDescription(@"eg: Select time")]
        [GraphQLNonNullType]
        public string SectionTitle { get; set; }
        [GraphQLDescription(@"optional clickable text to reveal more information about the fulfilment (e.g. delivery or pickup) options. Currently only supported by NZ app.")]
        public ExtraInfoButton? ExtraInfoButton { get; set; }
        [GraphQLDescription(@"optional extra information about the available fulfilment (e.g. delivery or pickup) options. Currently only supported by NZ app.")]
        public FulfilmentExtraInfo? ExtraInfo { get; set; }
        [GraphQLDescription(@"optional delivery now window")]
        public CheckoutDeliveryNowWindow? DeliveryNow { get; set; }
        [GraphQLDescription(@"optional delivery now window to show all the time with enabled/disabled state if store supports")]
        public CheckoutDeliveryNowWindow? DeliveryNowV2 { get; set; }
        [GraphQLDescription(@"delivery now status Open/Closed/Exhausted ... etc")]
        [GraphQLNonNullType]
        public DeliveryNowStatus DeliveryNowStatus { get; set; }
        [GraphQLDescription(@"optional direct to boot now")]
        public CheckoutDirectToBootNowWindow? DirectToBootNow { get; set; }
        [GraphQLDescription(@"optional direct to boot now to be shown all the time with enabled/disabled state if store supports")]
        public CheckoutDirectToBootNowWindow? DirectToBootNowV2 { get; set; }
        [GraphQLDescription(@"direct to boot now status Open/Closed/Exhausted ... etc")]
        [GraphQLNonNullType]
        public DirectToBootNowStatus DirectToBootNowStatus { get; set; }
        [GraphQLDescription(@"timeslot groups")]
        [GraphQLNonNullType]
        public ICollection<CheckoutFulfilmentWindowGroup> Groups { get; set; }
        [GraphQLDescription(@"green window banner")]
        [GraphQLDeprecated(@"Use `banner` instead")]
        public GreenWindowBanner? GreenWindowBanner { get; set; }
        [GraphQLDescription(@"Promotional banner")]
        public IFulfilmentWindowPromotionalBanner? Banner { get; set; }
    }

    [GraphQLName("FulfilmentWindowPromotionalBanner")]
    public interface IFulfilmentWindowPromotionalBanner
    {
    }

    [Shareable]
    public class GreenWindowBanner
    {
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class FulfilmentWindowsFooter
    {
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
    }

    [Shareable]
    public class FulfilmentWindowSlotSelectionInfo
    {
        public string? DescriptionMd { get; set; }
        [GraphQLNonNullType]
        public FulfilmentWindowsFooterIcon IconType { get; set; }
    }

    [Shareable]
    public class FulfilmentExtraInfo
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<IFulfilmentExtraInfoContent> Content { get; set; }
    }

    [GraphQLName("FulfilmentExtraInfoContent")]
    public interface IFulfilmentExtraInfoContent
    {
    }

    [Shareable]
    public class FulfilmentFeesInfoSection : IFulfilmentExtraInfoContent
    {
        public string? Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<FulfilmentFeeItem> Items { get; set; }
    }

    [Shareable]
    public class FulfilmentFeeItem
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Subtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<FulfilmentFeePriceInfo> Prices { get; set; }
    }

    [Shareable]
    public class FulfilmentFeePriceInfo
    {
        [GraphQLNonNullType]
        public string Amount { get; set; }
        public string? Description { get; set; }
    }

    [Shareable]
    public class FulfilmentInfoRowAccordion : IFulfilmentExtraInfoContent
    {
        [GraphQLNonNullType]
        public CoreRowUI RowUI { get; set; }
        [GraphQLNonNullType]
        public bool IsExpanded { get; set; }
        [GraphQLNonNullType]
        public bool HasTopSeparator { get; set; }
        public IFulfilmentInfoRowAccordionExpandedContent? ExpandedContent { get; set; }
        public Analytics? OpenActionAnalytics { get; set; }
        public Analytics? CloseActionAnalytics { get; set; }
    }

    [GraphQLName("FulfilmentInfoRowAccordionExpandedContent")]
    public interface IFulfilmentInfoRowAccordionExpandedContent
    {
    }

    [Shareable]
    public class FulfilmentWindowSelectionOptionsInfo
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<FulfilmentWindowSlotSelectionOption> SelectionOptions { get; set; }
    }

    [Shareable]
    public class FulfilmentWindowSlotSelectionOption
    {
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLNonNullType]
        public FulfilmentWindowSlotSelectionOptionId SelectionOptionId { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<Badge> Tags { get; set; }
        [GraphQLNonNullType]
        public Badge DisabledBadge { get; set; }
        [GraphQLNonNullType]
        public string DisabledTitle { get; set; }
        [GraphQLNonNullType]
        public string DisabledDescription { get; set; }
    }

    [GraphQLDescription(@"A label and clickable text to reveal more information about the fulfilment (e.g. pickup or delivery) options")]
    [Shareable]
    public class ExtraInfoButton
    {
        [GraphQLDescription(@"eg: Learn more")]
        [GraphQLNonNullType]
        public string MessageTitle { get; set; }
        [GraphQLDescription(@"eg: about our delivery options")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
    }

    [Shareable]
    public class CheckoutFulfilmentWindows : ICheckoutSegmentContent
    {
        [GraphQLDescription(@"select delivery date")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"select a delivery window")]
        [GraphQLNonNullType]
        public string Header { get; set; }
        [GraphQLDescription(@"(expiry notice) We’ll reserve your selection...")]
        public InsetBanner? Subheader { get; set; }
        [GraphQLDescription(@"select date")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"all fulfilment windows")]
        [GraphQLNonNullType]
        public ICollection<CheckoutFulfilmentWindow> Options { get; set; }
        public FulfilmentWindowsFooter? Footer { get; set; }
        [GraphQLDescription(@"displays the delivery and pickup fees information. Currently only supported by NZ app")]
        public FulfilmentExtraInfo? FeesInfo { get; set; }
        [GraphQLDescription(@"displays the fulfilment options window. Currently only used by NZ app")]
        public FulfilmentWindowSelectionOptionsInfo? SelectionOptionsInfo { get; set; }
    }

    [Shareable]
    public class CheckoutFulfilmentWindowsEmptyState : ICheckoutSegmentContent
    {
        [GraphQLDescription(@"select delivery date")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Error messages to be displayed")]
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [GraphQLDescription(@"Union type in details page Once the user selects a timewindow")]
    [Shareable]
    public class CheckoutFulfilmentWindowsSelectedState : ICheckoutSegmentContent
    {
        [GraphQLDescription(@"Select delivery date")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Tomorrow, 09 Sep")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"time window as a string eg: 12pm - 1pm")]
        [GraphQLNonNullType]
        public string TimeWindow { get; set; }
        [GraphQLDescription(@"price eg: $19.00")]
        [GraphQLNonNullType]
        public string Price { get; set; }
        [GraphQLDescription(@"Change")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        [GraphQLDescription(@"all fulfilment windows")]
        [GraphQLNonNullType]
        public CheckoutFulfilmentWindows Windows { get; set; }
        [GraphQLDescription(@"in case of any errors")]
        public InlineMessage? InlineMessage { get; set; }
    }

    [Shareable]
    public class CheckoutPackagingOptionInfo
    {
        [GraphQLDescription(@"eg: learn more about")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"eg: Paper bags")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        [GraphQLDescription(@"eg: Paper bags")]
        [GraphQLNonNullType]
        public string MessageTitle { get; set; }
        [GraphQLDescription(@"description")]
        [GraphQLNonNullType]
        public string Description { get; set; }
    }

    [Shareable]
    public class CheckoutPackagingOption
    {
        [GraphQLDescription(@"packaging option identifier")]
        [GraphQLNonNullType]
        public int Id { get; set; }
        [GraphQLDescription(@"if the option is selected or not")]
        [GraphQLNonNullType]
        public bool IsSelected { get; set; }
        [GraphQLDescription(@"eg: Reusable bags")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"eg: $1.5")]
        [GraphQLNonNullType]
        public string Price { get; set; }
        [GraphQLDescription(@"eg: per order")]
        public string? Description { get; set; }
        [GraphQLDescription(@"image url of the type")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
    }

    [Shareable]
    public class CheckoutPackagingMethod : ICheckoutSegmentContent
    {
        [GraphQLDescription(@"string for displaying the section eg: How would you like your groceries packaged?")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"package options")]
        [GraphQLNonNullType]
        public ICollection<CheckoutPackagingOption> Options { get; set; }
    }

    [GraphQLDescription(@"Type in details page to return product sections info - can be used in cart/checkout")]
    [Shareable]
    public class CheckoutSectionHeader : ICheckoutSegmentContent
    {
        [GraphQLDescription(@"Section title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"image")]
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
    }

    [Shareable]
    public class CheckoutPayOption
    {
        public bool? Selected { get; set; }
        public string? Title { get; set; }
        public string? ImageUrl { get; set; }
    }

    [Shareable]
    public class CheckoutPay
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? Header { get; set; }
        [GraphQLNonNullType]
        public ICollection<CheckoutPayOption> Options { get; set; }
    }

    [Shareable]
    public class CheckoutProductCampaigns : ICheckoutSegmentContent
    {
        [GraphQLNonNullType]
        public ICollection<CheckoutProductCampaignItem> Campaigns { get; set; }
    }

    [Shareable]
    public class CheckoutProductCampaignItem
    {
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public int Id { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public bool IsOptedIn { get; set; }
        [GraphQLNonNullType]
        public CheckoutInfoDialog CampaignInfo { get; set; }
    }

    [Shareable]
    public class MarketSellerGroup
    {
        [GraphQLNonNullType]
        public string SellerName { get; set; }
        [GraphQLNonNullType]
        public string DispatchNote { get; set; }
        [GraphQLNonNullType]
        public ICollection<MarketProductRow> Products { get; set; }
    }

    [Shareable]
    public class CheckoutMarketProducts : ICheckoutSegmentContent
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? DescriptionText { get; set; }
        [GraphQLNonNullType]
        public ICollection<MarketSellerGroup> SellerGroups { get; set; }
    }

    [Shareable]
    public class MarketProductRow : IProductRow
    {
        [GraphQLDescription(@"eg: Toaster")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLDescription(@"eg: $6.98")]
        [GraphQLNonNullType]
        public string UnitPrice { get; set; }
        [GraphQLDescription(@"eg: Total")]
        [GraphQLNonNullType]
        public string TotalTitle { get; set; }
        [GraphQLDescription(@"eg: $13.96")]
        [GraphQLNonNullType]
        public string TotalPrice { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string BrandName { get; set; }
        [GraphQLNonNullType]
        public CheckoutInfoDialog RemoveInfo { get; set; }
        [GraphQLDescription(@"Additional fields on cart product(initially used for analytics)")]
        public CartProductInfo? CartProductInfo { get; set; }
        [GraphQLDescription(@"Freight Group Id")]
        [GraphQLNonNullType]
        public string FreightGroupId { get; set; }
    }

    [Shareable]
    public class CheckoutProducts : ICheckoutSegmentContent
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        public string? DescriptionText { get; set; }
        public CheckoutSubstitution? Substitution { get; set; }
        public CheckoutSubstitutionPreferences? SubstitutionPreferences { get; set; }
        [GraphQLNonNullType]
        public bool UseSubstitutionPreference { get; set; }
        [GraphQLNonNullType]
        public ICollection<CheckoutProductRow> Products { get; set; }
        public BroadcastBanner? SubstitutionPreferenceOnboardingBanner { get; set; }
    }

    [GraphQLName("ProductRow")]
    public interface IProductRow
    {
        [GraphQLNonNullType]
        string Title { get; set; }
        [GraphQLNonNullType]
        string ProductId { get; set; }
        [GraphQLNonNullType]
        decimal Quantity { get; set; }
        [GraphQLNonNullType]
        string ImageUrl { get; set; }
        CartProductInfo? CartProductInfo { get; set; }
    }

    [Shareable]
    public class CheckoutProductRow : IProductRow
    {
        [GraphQLDescription(@"eg: Products(2)")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public decimal Quantity { get; set; }
        [GraphQLNonNullType]
        public string ProductId { get; set; }
        [GraphQLDescription(@"eg: $6.98")]
        [GraphQLNonNullType]
        public string UnitPrice { get; set; }
        [GraphQLDescription(@"eg: Total")]
        [GraphQLNonNullType]
        public string TotalTitle { get; set; }
        [GraphQLDescription(@"eg: $13.96")]
        [GraphQLNonNullType]
        public string TotalPrice { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public CheckoutProductInstruction Instruction { get; set; }
        [GraphQLDescription(@"rewards info")]
        public CheckoutProductRewards? Rewards { get; set; }
        [GraphQLDescription(@"disclaimer")]
        [GraphQLDeprecated(@"use messages instead")]
        public string? Disclaimer { get; set; }
        [GraphQLNonNullType]
        public bool AllowSubstitution { get; set; }
        [GraphQLNonNullType]
        public CheckoutInfoDialog RemoveInfo { get; set; }
        [GraphQLNonNullType]
        public ICollection<string> Messages { get; set; }
        [GraphQLDescription(@"indicates if we show substitution toggle to customer")]
        [GraphQLNonNullType]
        public bool ShowSubstitution { get; set; }
        [GraphQLDescription(@"Additional fields on cart product(initially used for analytics)")]
        public CartProductInfo? CartProductInfo { get; set; }
        [GraphQLDescription(@"Hold the substitution preferences from smart subs.")]
        public CheckoutProductSubstitutionPreference? SubstitutionPreference { get; set; }
    }

    [Shareable]
    public class CheckoutProductRewards
    {
        [GraphQLDescription(@"eg: +5 points")]
        [GraphQLNonNullType]
        public string Points { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
    }

    [Shareable]
    public class CheckoutProductInstruction
    {
        [GraphQLDescription(@"User entered text - null if no user input")]
        public string? Text { get; set; }
        [GraphQLDescription(@"Text to be displayed when empty instructions eg: Add Instructions")]
        [GraphQLNonNullType]
        public string Label { get; set; }
        [GraphQLDescription(@"Instructions text box title eg: Add Instructions")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"eg: Ripe tomatoes please")]
        public string? PlaceholderText { get; set; }
        [GraphQLDescription(@"eg: Save")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        public InputTextLimit? InputLimit { get; set; }
    }

    [Shareable]
    public class CheckoutSubstitution
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public CheckoutInfoDialog Info { get; set; }
        [GraphQLDescription(@"Selected option title")]
        [GraphQLNonNullType]
        public string SelectedOptionTitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<CheckoutSubstitutionOption?> Options { get; set; }
    }

    [Shareable]
    public class CheckoutSubstitutionOption
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Id { get; set; }
    }

    [Shareable]
    public class CheckoutInfoDialog
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        public string? SecondaryButtonTitle { get; set; }
    }

    [Shareable]
    public class PromoDiscountItem
    {
        [GraphQLDescription(@"Promo code name. 5PERCENT etc")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"-$5.0")]
        [GraphQLNonNullType]
        public string Price { get; set; }
    }

    [Shareable]
    public class PromoDiscount
    {
        [GraphQLNonNullType]
        public ICollection<PromoDiscountItem> DiscountItems { get; set; }
        [GraphQLDescription(@"Remove")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
    }

    [Shareable]
    public class CheckoutPromotionCode : ICheckoutSegmentContent
    {
        [GraphQLDescription(@"Promo code")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Enter Promo Code")]
        public string? PlaceholderText { get; set; }
        [GraphQLDescription(@"Apply")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        [GraphQLDescription(@"Applied discount")]
        public PromoDiscount? Discounts { get; set; }
    }

    [Shareable]
    public class CheckoutSummaryBillingAddress : ICheckoutSegmentContent
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string AddressText { get; set; }
    }

    [Shareable]
    public class CheckoutSummaryBillingAddressEmpty : ICheckoutSegmentContent
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string DisplayName { get; set; }
        [GraphQLNonNullType]
        public string ButtonText { get; set; }
    }

    [Shareable]
    public class CheckoutOrderMarketSellerInfo
    {
        [GraphQLNonNullType]
        public string SellerName { get; set; }
        [GraphQLNonNullType]
        public string DispatchNote { get; set; }
    }

    [Shareable]
    public class CheckoutOrderGroceryAddress : ICheckoutOrderAddressSegment
    {
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string AddressText { get; set; }
        [GraphQLNonNullType]
        public string FulfilmentWindow { get; set; }
    }

    [Shareable]
    public class CheckoutOrderMarketAddress : ICheckoutOrderAddressSegment
    {
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string AddressText { get; set; }
        [GraphQLNonNullType]
        public ICollection<CheckoutOrderMarketSellerInfo> SellerInfo { get; set; }
    }

    [GraphQLName("CheckoutOrderAddressSegment")]
    public interface ICheckoutOrderAddressSegment
    {
    }

    [Shareable]
    public class CheckoutOrderAddresses : ICheckoutSegmentContent, IOrderConfirmationContentSegment
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICheckoutOrderAddressSegment> AddressSections { get; set; }
        public InsetBanner? InsetBanner { get; set; }
    }

    [GraphQLDescription(@"Checkout Rewards and Discounts segment
Replaces CheckoutSummaryRewards and CheckoutSummaryRewardsUnregistered")]
    [Shareable]
    public class CheckoutRewardsAndDiscounts : ICheckoutSegmentContent
    {
        [GraphQLDescription(@"Rewards and discounts title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"List of rewards and discounts")]
        [GraphQLNonNullType]
        public ICollection<ICheckoutRewardsAndDiscountsTile> RewardsAndDiscounts { get; set; }
        [GraphQLDescription(@"Analytics for rewards and discounts")]
        [GraphQLNonNullType]
        public ICollection<Analytics> ImpressionAnalytics { get; set; }
    }

    [GraphQLName("CheckoutRewardsAndDiscountsTile")]
    public interface ICheckoutRewardsAndDiscountsTile
    {
    }

    [GraphQLDescription(@"Deprecating new type CheckoutRewards")]
    [Shareable]
    public class CheckoutSummaryRewardsUnregistered : ICheckoutSegmentContent
    {
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
    }

    [Shareable]
    public class CheckoutSummaryRewardsRegisteredRedeemable : ICheckoutSummaryRewardsSegment
    {
        [GraphQLNonNullType]
        public string RedeemText { get; set; }
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        [GraphQLNonNullType]
        public bool IsRedeemed { get; set; }
        public CheckoutInfoDialog? RedeemInfo { get; set; }
    }

    [Shareable]
    public class CheckoutSummaryRewardsRegistered : ICheckoutSummaryRewardsSegment
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public string ImageUrl { get; set; }
    }

    [GraphQLName("CheckoutSummaryRewardsSegment")]
    public interface ICheckoutSummaryRewardsSegment
    {
    }

    [GraphQLDescription(@"Deprecating new type CheckoutRewards")]
    [Shareable]
    public class CheckoutSummaryRewards : ICheckoutSegmentContent
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public ICollection<ICheckoutSummaryRewardsSegment> RewardsSections { get; set; }
    }

    [Shareable]
    public class EditOrderStatus
    {
        [GraphQLNonNullType]
        public EditOrderMode Mode { get; set; }
        public EditOrderDetails? Details { get; set; }
        public EditOrderMessage? Message { get; set; }
    }

    [Shareable]
    public class EditOrderMessage
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
    }

    [Shareable]
    public class EditOrderDetails
    {
        [GraphQLNonNullType]
        public string OrderId { get; set; }
        [GraphQLNonNullType]
        public EditOrderBanner Banner { get; set; }
    }

    [Shareable]
    public class EditOrderConfirmation
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class EditOrderBanner
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        [GraphQLNonNullType]
        public EditOrderConfirmation Confirmation { get; set; }
    }

    [Shareable]
    public class SetEditOrderStatusResponse
    {
        [GraphQLNonNullType]
        public bool Success { get; set; }
        public EditOrderReason? Reason { get; set; }
        public string? Message { get; set; }
        [GraphQLNonNullType]
        public EditOrderMode CurrentMode { get; set; }
    }

    [Shareable]
    public class OrderHelp
    {
        [GraphQLNonNullType]
        public ICollection<OrderHelpItem> Items { get; set; }
        public ICollection<OrderHelpItem>? HelpItems { get; set; }
        public string? HelpTitle { get; set; }
        public string? ImageUrl { get; set; }
        public OrderHelpContactTimes? ContactTimes { get; set; }
        [GraphQLDeprecated(@"Use OrderHelp.items.title instead")]
        public string? Title { get; set; }
        [GraphQLDeprecated(@"Use OrderHelp.items.subtitle instead")]
        [GraphQLNonNullType]
        public string ChatTitle { get; set; }
        [GraphQLDeprecated(@"Use OrderHelp.items.url instead")]
        [GraphQLNonNullType]
        public string ChatUrl { get; set; }
        [GraphQLDeprecated(@"Use OrderHelp.items.subtitle instead")]
        [GraphQLNonNullType]
        public string FaqTitle { get; set; }
        [GraphQLDeprecated(@"Use OrderHelp.items.url instead")]
        [GraphQLNonNullType]
        public string FaqUrl { get; set; }
    }

    [Shareable]
    public class OrderHelpItem
    {
        [GraphQLNonNullType]
        public string IconUrl { get; set; }
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        public string? Url { get; set; }
        [GraphQLNonNullType]
        public OrderHelpItemType ItemType { get; set; }
    }

    [Shareable]
    public class OrderHelpContactTimes
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string SubTitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<ContactItem> ContactItems { get; set; }
    }

    [Shareable]
    public class ContactItem
    {
        [GraphQLNonNullType]
        public string Day { get; set; }
        [GraphQLNonNullType]
        public string Time { get; set; }
    }

    [Shareable]
    public class CheckoutCredit : ICheckoutRewardsAndDiscountsTile
    {
        [GraphQLDescription(@"Checkout store credit title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Checkout credit description, e.g. Available credit: $10.30")]
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLDescription(@"Shows credit applied icon when true")]
        [GraphQLNonNullType]
        public bool AppliedIcon { get; set; }
        [GraphQLDescription(@"modal detail")]
        [GraphQLNonNullType]
        public ICheckoutCreditDetail Detail { get; set; }
        [GraphQLDescription(@"tile click analytics")]
        public Analytics? ActionClickAnalytics { get; set; }
    }

    [GraphQLName("CheckoutCreditDetail")]
    public interface ICheckoutCreditDetail
    {
    }

    [Shareable]
    public class CheckoutCreditEmpty : ICheckoutCreditDetail
    {
        [GraphQLDescription(@"empty state title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"empty state message")]
        [GraphQLNonNullType]
        public string Message { get; set; }
    }

    [Shareable]
    public class CheckoutCreditItems : ICheckoutCreditDetail
    {
        [GraphQLDescription(@"Available balance")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"$20.00")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLNonNullType]
        public ICollection<CheckoutCreditItem> Items { get; set; }
    }

    [Shareable]
    public class CheckoutCreditItem
    {
        [GraphQLDescription(@"$xx.xx Store credit")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"store credit code")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"Expires on DD/MM/YY")]
        [GraphQLNonNullType]
        public string PrimaryLabel { get; set; }
        [GraphQLDescription(@"Issued on DD/MM/YY")]
        [GraphQLNonNullType]
        public string SecondaryLabel { get; set; }
        [GraphQLDescription(@"Indicate if the credit is already applied")]
        [GraphQLNonNullType]
        public bool IsApplied { get; set; }
        [GraphQLDescription(@"the actual code for apply or remove")]
        [GraphQLNonNullType]
        public string Code { get; set; }
        [GraphQLDescription(@"$xx.xx formatted amount this store credit have")]
        [GraphQLNonNullType]
        public string Amount { get; set; }
    }

    [Shareable]
    public class CheckoutCreditUnavailable : ICheckoutCreditDetail
    {
        [GraphQLDescription(@"unavailable state title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"unavailable state message")]
        [GraphQLNonNullType]
        public string Message { get; set; }
        [GraphQLDescription(@"unvailable state retry button title")]
        [GraphQLNonNullType]
        public string RetryButtonTitle { get; set; }
    }

    [Shareable]
    public class CheckoutPromoCode : ICheckoutRewardsAndDiscountsTile
    {
        [GraphQLDescription(@"Checkout promo code title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Checkout promo code description. blank if no applied promo codes")]
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLDescription(@"Shows applied icon when true")]
        [GraphQLNonNullType]
        public bool AppliedIcon { get; set; }
        [GraphQLDescription(@"tile click analytics")]
        public Analytics? ActionClickAnalytics { get; set; }
        [GraphQLDescription(@"Promo code modal")]
        [GraphQLNonNullType]
        public CheckoutPromoCodeDetail Detail { get; set; }
    }

    [Shareable]
    public class CheckoutPromoCodeDetail
    {
        [GraphQLDescription(@"placeholder text, Enter promo code")]
        public string? PlaceholderText { get; set; }
        [GraphQLDescription(@"Apply")]
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        [GraphQLDescription(@"List of applied promo codes and available promotions(in future)")]
        [GraphQLNonNullType]
        public ICollection<ICheckoutPromotionItem> PromoCodes { get; set; }
    }

    [GraphQLName("CheckoutPromotionItem")]
    public interface ICheckoutPromotionItem
    {
    }

    [Shareable]
    public class CheckoutPromoCodeItem : ICheckoutPromotionItem
    {
        [GraphQLDescription(@"Promo code")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"optional subtitle, empty string if nothing")]
        [GraphQLNonNullType]
        public string Subtitle { get; set; }
        [GraphQLDescription(@"T&Cs apply")]
        [GraphQLNonNullType]
        public string PrimaryLabel { get; set; }
        [GraphQLDescription(@"Expires on DD/MM/YY")]
        [GraphQLNonNullType]
        public string SecondaryLabel { get; set; }
        [GraphQLDescription(@"Indicate if the promo code is already applied")]
        [GraphQLNonNullType]
        public bool IsApplied { get; set; }
        [GraphQLDescription(@"the actual code for apply or remove")]
        [GraphQLNonNullType]
        public string Code { get; set; }
    }

    [Shareable]
    public class CheckoutRewards : ICheckoutRewardsAndDiscountsTile
    {
        [GraphQLDescription(@"Checkout rewards title")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Checkout rewards description, e.g. Available: $10")]
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLDescription(@"Shows rewards redeem icon when true")]
        [GraphQLNonNullType]
        public bool RedeemedIcon { get; set; }
        [GraphQLDescription(@"Checkout rewards action")]
        public ICheckoutRewardsAction? RewardsAction { get; set; }
        [GraphQLDescription(@"tile click analytics")]
        public Analytics? ActionClickAnalytics { get; set; }
    }

    [GraphQLDescription(@"Checkout rewards action")]
    [GraphQLName("CheckoutRewardsAction")]
    public interface ICheckoutRewardsAction
    {
    }

    [GraphQLDescription(@"Checkout rewards redeem let's the user redeem his rewards")]
    [Shareable]
    public class CheckoutRewardsRedeem : ICheckoutRewardsAction
    {
        [GraphQLDescription(@"Information for selecting amount to redeem")]
        [GraphQLNonNullType]
        public CheckoutRewardsRedeemInfo RewardsRedeemInfo { get; set; }
        [GraphQLDescription(@"Rewards Dollars")]
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLDescription(@"Available $0.00")]
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLDescription(@"redeem bottom sheet impression")]
        public Analytics? ImpressionAnalytics { get; set; }
    }

    [GraphQLDescription(@"Checkout rewards info provides information about the users rewards")]
    [Shareable]
    public class CheckoutRewardsInfo : ICheckoutRewardsAction
    {
        [GraphQLNonNullType]
        public string Title { get; set; }
        [GraphQLNonNullType]
        public string Description { get; set; }
        [GraphQLNonNullType]
        public string ButtonTitle { get; set; }
        public Analytics? ImpressionAnalytics { get; set; }
        public Analytics? ButtonClickAnalytics { get; set; }
    }

    [GraphQLDescription(@"Checkout rewards link provides a link to the rewards page for the user to sign up")]
    [Shareable]
    public class CheckoutRewardsLink : ICheckoutRewardsAction
    {
        public bool? _ { get; set; }
    }

    [Shareable]
    public class CheckoutRewardsRedeemInfo
    {
        [GraphQLDescription(@"Minimum amount in cents that can be redeemed e.g. 1000 for $10")]
        [GraphQLNonNullType]
        public int Minimum { get; set; }
        [GraphQLDescription(@"Maximum amount in cents that is available")]
        [GraphQLNonNullType]
        public int Maximum { get; set; }
        [GraphQLDescription(@"Maximum amount in cents that is redeemable")]
        [GraphQLNonNullType]
        public int MaximumRedeemable { get; set; }
        [GraphQLDescription(@"Increment in cents e.g. 1000 for $10")]
        [GraphQLNonNullType]
        public int Increment { get; set; }
        [GraphQLDescription(@"Current amount in cents to initialize the quantity selector
When not redeemed, 0
when we amount is already redeemed, it's the amount used")]
        [GraphQLNonNullType]
        public int Current { get; set; }
        [GraphQLDescription(@"banner when selected amount exceed redeemable amount")]
        public InsetBanner? UnRedeemableBanner { get; set; }
    }
    
    public static class Extensions
    {
        public static IRequestExecutorBuilder AddEnums(this IRequestExecutorBuilder builder)    {
            return builder.AddEnumType<AdBannerNativeSize>()
.AddEnumType<RtlBoostState>()
.AddEnumType<RtlOfferStatus>()
.AddEnumType<AlternativeProductsMode>()
.AddEnumType<AlternativeProductsType>()
.AddEnumType<AppOS>()
.AddEnumType<UpgradeType>()
.AddEnumType<DeliveryWindowStatus>()
.AddEnumType<DeliveryNowStatus>()
.AddEnumType<DeliveryNowTitle>()
.AddEnumType<DeliveryNowState>()
.AddEnumType<DirectToBootNowStatus>()
.AddEnumType<ParagraphTextItemType>()
.AddEnumType<FooterActionType>()
.AddEnumType<AlertIndicatorType>()
.AddEnumType<CatalogueCardType>()
.AddEnumType<CardHeight>()
.AddEnumType<OrderStatus>()
.AddEnumType<HomeFulfilmentWindowContainerOrientation>()
.AddEnumType<HomeFulfilmentWindowTileStyle>()
.AddEnumType<MarketplaceLandingPageName>()
.AddEnumType<ShoppingModeSelectorOptionState>()
.AddEnumType<CheckInType>()
.AddEnumType<FormattedBannerStyle>()
.AddEnumType<CouponBannerColorTheme>()
.AddEnumType<BarcodeType>()
.AddEnumType<RoundelImagePriority>()
.AddEnumType<AisleSide>()
.AddEnumType<InStoreLocationType>()
.AddEnumType<Mode>()
.AddEnumType<PurchaseRestriction>()
.AddEnumType<ProductPromotionTypes>()
.AddEnumType<RewardsOfferStatus>()
.AddEnumType<ListSectionHeaderTypes>()
.AddEnumType<MemberPricingType>()
.AddEnumType<ProductListChannelType>()
.AddEnumType<ProductListFacetType>()
.AddEnumType<CategoriesType>()
.AddEnumType<ProductCategoryTileSize>()
.AddEnumType<ProductReviewSource>()
.AddEnumType<ProductReviewGroupType>()
.AddEnumType<ProductReviewAlternativeType>()
.AddEnumType<RatingsReviewSortType>()
.AddEnumType<BadgeType>()
.AddEnumType<BroadcastBannerType>()
.AddEnumType<ButtonStyle>()
.AddEnumType<TagStyle>()
.AddEnumType<DownloadableAssetType>()
.AddEnumType<DownloadableAssetFit>()
.AddEnumType<CardSize>()
.AddEnumType<MoreCardStyle>()
.AddEnumType<ProgressStepType>()
.AddEnumType<TooltipType>()
.AddEnumType<SpacerType>()
.AddEnumType<ShoppingModeId>()
.AddEnumType<ShoppingModeState>()
.AddEnumType<ShoppingModeType>()
.AddEnumType<ShoppingModeVariantState>()
.AddEnumType<SurveyQuestionType>()
.AddEnumType<CartBannerType>()
.AddEnumType<BundleType>()
.AddEnumType<UpdateCartProductQuantityFailedReason>()
.AddEnumType<CartProductQuantityAction>()
.AddEnumType<CatalogueBrowsePageType>()
.AddEnumType<CatalogueHomeCardTrackingValidity>()
.AddEnumType<CheckoutMessageType>()
.AddEnumType<CheckoutPackagingType>()
.AddEnumType<CheckoutInputType>()
.AddEnumType<CollectionModeId>()
.AddEnumType<CheckoutBadgeType>()
.AddEnumType<CheckoutBadgeStyle>()
.AddEnumType<CheckoutSummaryValueType>()
.AddEnumType<CheckoutDeliveryPreferenceId>()
.AddEnumType<CheckoutProgressId>()
.AddEnumType<FlowType>()
.AddEnumType<PaymentType>()
.AddEnumType<ApplyPromoCodeBannerType>()
.AddEnumType<SubstitutionState>()
.AddEnumType<MoreDeliveryUnlimitedStatus>()
.AddEnumType<CancelOrderReason>()
.AddEnumType<InvoiceErrorReason>()
.AddEnumType<PickUpOrderButtonState>()
.AddEnumType<OrderType>()
.AddEnumType<EditOrderDriverInstructionsReason>()
.AddEnumType<ToggleOrderLeaveUnattendedReason>()
.AddEnumType<OrderProductListProductPriceStyle>()
.AddEnumType<OrderDetailsItemType>()
.AddEnumType<OrderStatusType>()
.AddEnumType<ButtonState>()
.AddEnumType<OrderPaymentDetailsItemAmountStyle>()
.AddEnumType<OrderFulfilmentType>()
.AddEnumType<OrderSubtitleIcon>()
.AddEnumType<LocationTrackingStatusImage>()
.AddEnumType<PickupLocationComponent>()
.AddEnumType<LocationImage>()
.AddEnumType<MyGroceriesProductListBadgeType>()
.AddEnumType<FeatureType>()
.AddEnumType<BannerTarget>()
.AddEnumType<ActionType>()
.AddEnumType<HeroBannerTitleSize>()
.AddEnumType<ContentCardSize>()
.AddEnumType<FooterStyle>()
.AddEnumType<CoreBroadcastBannerStyle>()
.AddEnumType<CoreButtonStyle>()
.AddEnumType<CoreAlertStyle>()
.AddEnumType<BannerImageFormat>()
.AddEnumType<GenericPageHeroImageType>()
.AddEnumType<InsetBannerDisplayType>()
.AddEnumType<InsetBannerActionPlacement>()
.AddEnumType<InsetBannerActionType>()
.AddEnumType<PageCoverTitleTextSize>()
.AddEnumType<PageCoverContentFormat>()
.AddEnumType<PageCoverContentAlignment>()
.AddEnumType<PageCoverImagePosition>()
.AddEnumType<ContextType>()
.AddEnumType<TitleSectionTypes>()
.AddEnumType<OfferCardVariants>()
.AddEnumType<OfferCardTextColor>()
.AddEnumType<MarketFulfilmentAddressStatus>()
.AddEnumType<AddressType>()
.AddEnumType<FulfilmentWindowSlotSelectionOptionId>()
.AddEnumType<FulfilmentWindowsFooterIcon>()
.AddEnumType<EditOrderMode>()
.AddEnumType<EditOrderReason>()
.AddEnumType<OrderHelpItemType>()
;
        }
        public static IRequestExecutorBuilder AddUnionTypes(this IRequestExecutorBuilder builder)    {
            return builder.AddUnionType<IBoostEdrOfferResponse>()
.AddUnionType<IAlternativeProductsSections>()
.AddUnionType<IAppConfigAlert>()
.AddUnionType<IBundles>()
.AddUnionType<IBundleCTA>()
.AddUnionType<IBundlesFeedItem>()
.AddUnionType<IBundlePricing>()
.AddUnionType<IBundleItem>()
.AddUnionType<IChangeMyOrderDetailsSectionItems>()
.AddUnionType<ICheckoutSegmentContent>()
.AddUnionType<ICheckoutSegmentMessage>()
.AddUnionType<IDynamicPageFeedItem>()
.AddUnionType<IDynamicPageBottomSheetTypes>()
.AddUnionType<IDynamicPageBottomSheetFeedItems>()
.AddUnionType<INodeContent>()
.AddUnionType<IFoodTrackerPage>()
.AddUnionType<IFoodTrackerContentItem>()
.AddUnionType<IFoodTrackerAction>()
.AddUnionType<IHomeDeliveryNowBannerUnion>()
.AddUnionType<IHomeHeaderItems>()
.AddUnionType<IHomeFeed>()
.AddUnionType<IHomeListAnalytics>()
.AddUnionType<IListDetailsTotalSectionSubItem>()
.AddUnionType<IMarketplacePersonalisedSegment>()
.AddUnionType<IMarketplaceSections>()
.AddUnionType<IShoppingModeSelectorSection>()
.AddUnionType<IShoppingModeSelectorOptionFulfilmentSection>()
.AddUnionType<ISetShoppingModeResponse>()
.AddUnionType<IShoppingModeSelectorResponse>()
.AddUnionType<IModeSelectorV1AddressDetails>()
.AddUnionType<IMoreFeedItem>()
.AddUnionType<IMyAccountFeedItem>()
.AddUnionType<IPreferenceItem>()
.AddUnionType<IProductDetailsFeedItem>()
.AddUnionType<IProductDetailsRowAccordionExpandedContent>()
.AddUnionType<IProductDetailsRowUILinkContent>()
.AddUnionType<IProductDetailsCoreRowDetails>()
.AddUnionType<IProductListFeed>()
.AddUnionType<IProductListAnalytics>()
.AddUnionType<IProductListZeroResultItem>()
.AddUnionType<IProductListItemAdBanner>()
.AddUnionType<IProductReviewFeedItem>()
.AddUnionType<IProductReviewResult>()
.AddUnionType<IUpdateSubstitutionPreferencesResponse>()
.AddUnionType<IRatingsAndReviewsReviewItemSections>()
.AddUnionType<IRatingsAndReviewsRatingDistribution>()
.AddUnionType<IRatingsAndReviewsPreviewSections>()
.AddUnionType<IWriteReviewFormSections>()
.AddUnionType<IWriteReviewFormReviewItem>()
.AddUnionType<IReceiptDetailsItem>()
.AddUnionType<IReceiptFeedItem>()
.AddUnionType<IHorizontalListBadge>()
.AddUnionType<IActionMetaData>()
.AddUnionType<IHorizontalListItem>()
.AddUnionType<IUniversalInventory>()
.AddUnionType<IUniversalInventoryNextBestAction>()
.AddUnionType<IVerticalListItem>()
.AddUnionType<IShoppingModeUnion>()
.AddUnionType<IShoppingModeVariantFulfilmentWindowSection>()
.AddUnionType<IShoppingModeVariantUnion>()
.AddUnionType<IShoppingModeVariantPrice>()
.AddUnionType<ICartProductFeed>()
.AddUnionType<ICartSection>()
.AddUnionType<IShippingMessageBanner>()
.AddUnionType<ICatalogueBrowsePageItem>()
.AddUnionType<ICatalogueBrowseCategoryPageItem>()
.AddUnionType<ICatalogueBrowsePromotionPageItem>()
.AddUnionType<ICatalogueHomeItem>()
.AddUnionType<ICatalogueLandingItem>()
.AddUnionType<ICatalogueListingItem>()
.AddUnionType<ICataloguePromotionDetailsItem>()
.AddUnionType<ICataloguePromotionGroupItem>()
.AddUnionType<ICataloguePromotionListingItem>()
.AddUnionType<IIdVerificationCompleteResponse>()
.AddUnionType<ICheckoutSegmentError>()
.AddUnionType<IPaymentInstrumentsResponse>()
.AddUnionType<IGiftCardItem>()
.AddUnionType<IPaymentMethodItem>()
.AddUnionType<IPlaceOrderButton>()
.AddUnionType<IUnlinkCreditCardResponse>()
.AddUnionType<IWpayPaymentResponse>()
.AddUnionType<IApplyPromoCodeResult>()
.AddUnionType<IDeliveryUnlimitedSubscribeConfirmationFeedItem>()
.AddUnionType<IDeliveryUnlimitedSubscribePlanTypeFeedItem>()
.AddUnionType<IFreshMagHomeItem>()
.AddUnionType<IOrderConfirmationContentSegment>()
.AddUnionType<IOrderInvoice>()
.AddUnionType<IOrdersFeedItem>()
.AddUnionType<IOrderProductListFeedItem>()
.AddUnionType<IFeedItem>()
.AddUnionType<IRecipeFeature>()
.AddUnionType<IRecipeCard>()
.AddUnionType<IRecipeListFeed>()
.AddUnionType<IAddressUnion>()
.AddUnionType<ICarouselItem>()
.AddUnionType<IHeroBannerBody>()
.AddUnionType<IStaticBottomSheetFeedItem>()
.AddUnionType<IIconAsset>()
.AddUnionType<ICustomMessageFeed>()
.AddUnionType<IEditorialCarouselItem>()
.AddUnionType<IGenericPageFeedItem>()
.AddUnionType<IGenericPageBottomSheetItem>()
.AddUnionType<IGridListItem>()
.AddUnionType<IProductSectionFeedItem>()
.AddUnionType<IPromotionContent>()
.AddUnionType<ITabItemFeed>()
.AddUnionType<ICheckoutCollectionAddress>()
.AddUnionType<IFulfilmentWindowPromotionalBanner>()
.AddUnionType<IFulfilmentExtraInfoContent>()
.AddUnionType<IFulfilmentInfoRowAccordionExpandedContent>()
.AddUnionType<ICheckoutOrderAddressSegment>()
.AddUnionType<ICheckoutRewardsAndDiscountsTile>()
.AddUnionType<ICheckoutSummaryRewardsSegment>()
.AddUnionType<ICheckoutCreditDetail>()
.AddUnionType<ICheckoutPromotionItem>()
.AddUnionType<ICheckoutRewardsAction>()
;
        }
        public static IRequestExecutorBuilder AddInterfaceTypes(this IRequestExecutorBuilder builder)    {
            return builder.AddInterfaceType<ICampaignCardBase>(o => o.Name("CampaignCardBase"))
.AddInterfaceType<IBaseNode>(o => o.Name("BaseNode"))
.AddInterfaceType<IFulfilmentWindowState>(o => o.Name("FulfilmentWindowState"))
.AddInterfaceType<IListDetailsTotalSectionItemBase>(o => o.Name("ListDetailsTotalSectionItemBase"))
.AddInterfaceType<IListDetailsTotalSectionSubItemBase>(o => o.Name("ListDetailsTotalSectionSubItemBase"))
.AddInterfaceType<IMarketplaceItem>(o => o.Name("MarketplaceItem"))
.AddInterfaceType<IMarketplaceSectionItem>(o => o.Name("MarketplaceSectionItem"))
.AddInterfaceType<IBottomSheetContent>(o => o.Name("BottomSheetContent"))
.AddInterfaceType<IHorizontalListBase>(o => o.Name("HorizontalListBase"))
.AddInterfaceType<ILinkCardBase>(o => o.Name("LinkCardBase"))
.AddInterfaceType<ITextArea>(o => o.Name("TextArea"))
.AddInterfaceType<ITextField>(o => o.Name("TextField"))
.AddInterfaceType<ICatalogueHomeCard>(o => o.Name("CatalogueHomeCard"))
.AddInterfaceType<ICatalogueLandingCard>(o => o.Name("CatalogueLandingCard"))
.AddInterfaceType<ICheckoutReviewProductRow>(o => o.Name("CheckoutReviewProductRow"))
.AddInterfaceType<IOrder>(o => o.Name("Order"))
.AddInterfaceType<IOrderFulfilmentSection>(o => o.Name("OrderFulfilmentSection"))
.AddInterfaceType<IOrderOverviewSection>(o => o.Name("OrderOverviewSection"))
.AddInterfaceType<ICurrentOrderOverview>(o => o.Name("CurrentOrderOverview"))
.AddInterfaceType<IContentCardBase>(o => o.Name("ContentCardBase"))
.AddInterfaceType<IGenericPageHeader>(o => o.Name("GenericPageHeader"))
.AddInterfaceType<IGenericPage>(o => o.Name("GenericPage"))
.AddInterfaceType<IProductRow>(o => o.Name("ProductRow"))
;
        }
        public static IRequestExecutorBuilder AddStandardTypes(this IRequestExecutorBuilder builder)    {
            return builder.AddType<Query>()
.AddType<Mutation>()
.AddType<AddressItem>()
.AddType<PickupStore>()
.AddType<PickUpType>()
.AddType<GoogleAdBannerCard>()
.AddType<GoogleAdForecastingAnalytics>()
.AddType<AdobeAdBannerCard>()
.AddType<AdTealiumAnalytics>()
.AddType<AdobeTargetAnalytics>()
.AddType<ProductListAds>()
.AddType<UniversalInventoryContainer>()
.AddType<EdrOffer>()
.AddType<AEMContentPage>()
.AddType<AEMContentPageHeader>()
.AddType<GetAlternativeProductsResponse>()
.AddType<AlternativeProductsTargetProductSection>()
.AddType<AlternativeProductsInsetBannerSection>()
.AddType<AlternativeProductsProductCountSection>()
.AddType<AlternativeProductsDisclaimer>()
.AddType<AlternativeProductsTypeTag>()
.AddType<AlternativeProductsProductsHeader>()
.AddType<AlternativeProductsProductSection>()
.AddType<AlternativeProductsNoResultSection>()
.AddType<AlternativeProductsCtaSection>()
.AddType<ApigeeResponse>()
.AddType<ApigeeHash>()
.AddType<AppConfig>()
.AddType<AppConfigSoftAlert>()
.AddType<AppConfigForcedAlert>()
.AddType<ArticlePage>()
.AddType<ArticlePageHeader>()
.AddType<BrandedShopPage>()
.AddType<BrandedShopPageHeader>()
.AddType<BundlesLandingPage>()
.AddType<BundlesLandingErrorPage>()
.AddType<BundlesHeader>()
.AddType<BundleSortOptions>()
.AddType<BundleSortOption>()
.AddType<BundleQuantityStepper>()
.AddType<Bundle>()
.AddType<BundleTitleTag>()
.AddType<BundleDetails>()
.AddType<BundleStandardPricing>()
.AddType<BundleComparisonPrice>()
.AddType<BundleComparisonPricing>()
.AddType<BundleProductCard>()
.AddType<StackedProductCards>()
.AddType<BuyAgainProductList>()
.AddType<BuyAgainHeader>()
.AddType<BuyAgainFooter>()
.AddType<BuyAgainFilterStatus>()
.AddType<ChangeMyOrderSummary>()
.AddType<ChangeMyOrderDetailsSection>()
.AddType<FulfilmentMethod>()
.AddType<ChangeMyOrderDeliveryInstructions>()
.AddType<FulfilmentTimeSlot>()
.AddType<ActionTile>()
.AddType<CartActions>()
.AddType<PaymentSummarySection>()
.AddType<FooterCTASection>()
.AddType<CheckoutContent>()
.AddType<ContentPlaybookPage>()
.AddType<ContentPlaybookPageHeader>()
.AddType<HomeListDeliveryNow>()
.AddType<HomeDeliveryNowBanner>()
.AddType<DeliveryNowWindow>()
.AddType<DeliveryNowModeMutationResponse>()
.AddType<DeliveryUnlimitedSubscribeFooter>()
.AddType<DeliveryUnlimitedSubscribe>()
.AddType<DynamicPage>()
.AddType<DynamicPageHeaderSection>()
.AddType<DynamicPageBottomSheet>()
.AddType<ContentList>()
.AddType<ContentListItem>()
.AddType<DynamicPageAction>()
.AddType<CampaignCopy>()
.AddType<CampaignTermsAndConditions>()
.AddType<DynamicPageFooterSection>()
.AddType<CampaignCardCarousel>()
.AddType<CampaignCardList>()
.AddType<CampaignCard>()
.AddType<FullWidthCampaignCard>()
.AddType<CategoryTileList>()
.AddType<CategoryTile>()
.AddType<FoodTrackerContentFeed>()
.AddType<IconListItem>()
.AddType<ParagraphTextItem>()
.AddType<FoodTrackerFooterCard>()
.AddType<FoodTrackerWebView>()
.AddType<FoodTrackerConsent>()
.AddType<FoodTrackerConsentStatus>()
.AddType<ClearFulfilmentWindowStateResultSuccess>()
.AddType<SetFulfilmentWindowResultSuccess>()
.AddType<GuidesPage>()
.AddType<GuidesPageHeader>()
.AddType<QueryParameters>()
.AddType<PromoCard>()
.AddType<RegistrationCard>()
.AddType<RewardsSummaryCard>()
.AddType<AddRewardsCard>()
.AddType<AlertIndicator>()
.AddType<RewardsBalanceCard>()
.AddType<CatalogueCard>()
.AddType<OverlayAnimation>()
.AddType<QuickLinkList>()
.AddType<QuickLinkCard>()
.AddType<RecipesCard>()
.AddType<WebCard>()
.AddType<WebViewCard>()
.AddType<ProductPromoCard>()
.AddType<FulfilmentStatusBanner>()
.AddType<OrderCard>()
.AddType<OrderCardList>()
.AddType<MarketplaceCard>()
.AddType<HomeFulfilmentWindowContainer>()
.AddType<HomeFulfilmentWindowBanner>()
.AddType<HomeDeliveryNowBottomBanner>()
.AddType<InStoreDetailsCard>()
.AddType<HomeModeSelectorContainer>()
.AddType<HomeFulfilmentWindowTileAnalytics>()
.AddType<HomeFulfilmentWindowTile>()
.AddType<HomeOnlineShoppingModeVariantTileAnalytics>()
.AddType<HomeOnlineShoppingModeVariantTile>()
.AddType<MyShoppingLists>()
.AddType<UnreadChatbotMsg>()
.AddType<HomeList>()
.AddType<HomePage>()
.AddType<HomePageHeader>()
.AddType<LastChatbotMsg>()
.AddType<EditListResponse>()
.AddType<ProductListItem>()
.AddType<FreeTextListItem>()
.AddType<List>()
.AddType<ListItemDeleted>()
.AddType<ItemsToBeSynced>()
.AddType<SyncListItemsResponse>()
.AddType<ListResponse>()
.AddType<CreateListResponse>()
.AddType<ListsToBeSynced>()
.AddType<SyncListsResponse>()
.AddType<MapGuestListToOwner>()
.AddType<ListDetailsTotalSummary>()
.AddType<ListDetailsTotalSectionHeader>()
.AddType<ListDetailsPotentialSavings>()
.AddType<ListDetailsRewardsSummary>()
.AddType<ListDetailsTotal>()
.AddType<ListDetailsTotalDisclaimer>()
.AddType<ListDetailsTotalOverview>()
.AddType<ListDetailsProductAction>()
.AddType<ListDetailsResponse>()
.AddType<InfoSectionItem>()
.AddType<InfoSectionFooter>()
.AddType<InfoSection>()
.AddType<Marketplace>()
.AddType<MarketplacePageTab>()
.AddType<MarketplaceEducationBottomSheet>()
.AddType<CategoryItem>()
.AddType<BrandItem>()
.AddType<SellerItem>()
.AddType<Sellers>()
.AddType<Brands>()
.AddType<Categories>()
.AddType<MarketplaceHorizontalList>()
.AddType<MarketplacePersonalised>()
.AddType<MenuPage>()
.AddType<MenuPageHeader>()
.AddType<MenuVersion>()
.AddType<ShoppingModeSelector>()
.AddType<ShoppingModeSelectorHeader>()
.AddType<ShoppingModeSelectorHeaderButton>()
.AddType<ShoppingModeSelectorStoreFeaturesSection>()
.AddType<ShoppingModeSelectorStoreDetail>()
.AddType<ShoppingModeSelectorStoreDetailsSection>()
.AddType<ShoppingModeSelectorAddressInfoSection>()
.AddType<ShoppingModeSelectorAddressInfo>()
.AddType<ShoppingModeSelectorOptionsSection>()
.AddType<ShoppingModeSelectorOption>()
.AddType<ShoppingModeSelectorErrorResponse>()
.AddType<ShoppingModeSelectorRedirectResponse>()
.AddType<ModeSelectorV1AddressDetailsDelivery>()
.AddType<ModeSelectorV1AddressDetailsPickup>()
.AddType<More>()
.AddType<MoreName>()
.AddType<MoreScanAndGo>()
.AddType<MoreFindAStore>()
.AddType<MoreRewards>()
.AddType<MoreOrders>()
.AddType<MoreNotifications>()
.AddType<MoreLink>()
.AddType<MoreChat>()
.AddType<MoreLogin>()
.AddType<MoreLogout>()
.AddType<MoreDeleteAccount>()
.AddType<MoreLinkRewardsBanner>()
.AddType<MoreEReceipts>()
.AddType<MoreReceiptPreferences>()
.AddType<MoreOnlineShopping>()
.AddType<MoreExplainingValue>()
.AddType<MoreFoodTracker>()
.AddType<AccountDetailsPage>()
.AddType<MyAccountPersonalDetails>()
.AddType<MyAccountBusinessDetails>()
.AddType<MyAccountContactDetails>()
.AddType<MyAccountPreferences>()
.AddType<MyAccountFooter>()
.AddType<NCCta>()
.AddType<NCMessage>()
.AddType<PickupCheckInResponse>()
.AddType<PickupOrderLocationUpdateResponse>()
.AddType<PreferenceAnalytics>()
.AddType<PreferenceText>()
.AddType<PreviewImageItem>()
.AddType<PreviewContent>()
.AddType<PreferenceToggle>()
.AddType<PreferenceToggleGroup>()
.AddType<Preferences>()
.AddType<ProductNutritionInfo>()
.AddType<ProductDisclaimer>()
.AddType<ProductImage>()
.AddType<FormattedFrame>()
.AddType<ImageContent>()
.AddType<ProductOriginAndHealthInfo>()
.AddType<FormattedContent>()
.AddType<FormattedBanner>()
.AddType<HealthierLink>()
.AddType<HealthierLinkedInfo>()
.AddType<HealthierOption>()
.AddType<HealthierHorizontalList>()
.AddType<CouponBannerTermsAndConditions>()
.AddType<CouponBanner>()
.AddType<ProductDetailsMarketplace>()
.AddType<ProductRatingsAndReviewsSummary>()
.AddType<ProductRatingsAndReviewsSummaryCta>()
.AddType<ProductDetails>()
.AddType<ProductDetailsPage>()
.AddType<ProductDetailsPageHeader>()
.AddType<ProductDetailsPageFooter>()
.AddType<RoundelImage>()
.AddType<ProductDetailsImages>()
.AddType<ProductDetailsProductPanel>()
.AddType<ProductDetailsRowAccordion>()
.AddType<ProductDetailsRowAccordionProductListData>()
.AddType<ProductDetailsRatingsAndReviewsPreview>()
.AddType<ProductDetailsRowLink>()
.AddType<ProductDetailsCoreRow>()
.AddType<ProductDetailsCouponBannerData>()
.AddType<ProductFilterSwitch>()
.AddType<FilterMenuItem>()
.AddType<ProductFilter>()
.AddType<ProductSortOption>()
.AddType<ProductCard>()
.AddType<ProductCategoryItem>()
.AddType<ProductVarieties>()
.AddType<ProductPromotionInfo>()
.AddType<RewardsOfferInfo>()
.AddType<RewardsOfferAnalytics>()
.AddType<ProductShoppingList>()
.AddType<InStoreAvailabilityInfo>()
.AddType<InfoSheet>()
.AddType<ProductTrolley>()
.AddType<ProductInStoreDetails>()
.AddType<InStoreLocationDisplayInfo>()
.AddType<InStoreLocationDetails>()
.AddType<InStoreLocationInfo>()
.AddType<ProductInlineLabel>()
.AddType<ProductsInList>()
.AddType<DietaryDisclaimer>()
.AddType<DietaryInfo>()
.AddType<IngredientAnalytics>()
.AddType<IngredientCard>()
.AddType<ListSectionHeader>()
.AddType<ProductList>()
.AddType<ProductListZeroResult>()
.AddType<ZeroResultProductCategories>()
.AddType<ProductListMarketplace>()
.AddType<Chip>()
.AddType<MultiBuyPriceInfo>()
.AddType<MemberPriceInfo>()
.AddType<CategoryAndEventsPage>()
.AddType<CategoryAndEventsPageHeader>()
.AddType<CategoryMenuItem>()
.AddType<MarketplaceCategoriesInfo>()
.AddType<ProductCategories>()
.AddType<SpecialMenuItem>()
.AddType<SpecialCategories>()
.AddType<ProductCategoryTile>()
.AddType<BoostTagProductOffersResponse>()
.AddType<BoostOfferResponse>()
.AddType<ProductReviewResponse>()
.AddType<ProductReviewGroup>()
.AddType<ProductReviewAlternative>()
.AddType<ProductReviewCard>()
.AddType<ProductReviewError>()
.AddType<UpdateProductReviewProductQuantitiesError>()
.AddType<ProductReviewEmpty>()
.AddType<SubstitutionPreferenceFooter>()
.AddType<SubstitutionPreferenceResponse>()
.AddType<CheaperSubstitutesSection>()
.AddType<ProductSubstitutesSection>()
.AddType<ProductSubstitute>()
.AddType<ProductToBeSubstituteSection>()
.AddType<SubstitutionPreferenceOptionsSection>()
.AddType<SubstitutionPreferenceOption>()
.AddType<UpdateSubstitutionPreferencesSuccessResponse>()
.AddType<PastshopEvent>()
.AddType<PastshopList>()
.AddType<PurchaseHistoryEvent>()
.AddType<PurchaseHistoryList>()
.AddType<RatingsAndReviewsRatingsDetails>()
.AddType<RatingsAndReviewsReviewItem>()
.AddType<RatingsAndReviewsReviewDetails>()
.AddType<RatingsAndReviewsReviewItemRating>()
.AddType<RatingsAndReviewsReviewItemReviewTitle>()
.AddType<RatingsAndReviewsReviewItemRecommendation>()
.AddType<RatingsAndReviewsReviewItemInfo>()
.AddType<RatingsAndReviewsReviewItemBody>()
.AddType<RatingsAndReviewsRatingDistributionWriteReview>()
.AddType<RatingsAndReviewsRatingDistributionOverview>()
.AddType<RatingsAndReviewsRatingDistributionDetails>()
.AddType<RatingsDistributionItem>()
.AddType<RatingsAndReviewsDetailsResponse>()
.AddType<RatingsAndReviewsPageInfo>()
.AddType<RatingsAndReviewsPreviewResponse>()
.AddType<RatingsAndReviewsPreviewCta>()
.AddType<RatingsAndReviewsPreviewHeader>()
.AddType<SubmitProductReviewResponse>()
.AddType<SubmitProductResponseError>()
.AddType<WriteReviewFormResponse>()
.AddType<WriteReviewFormReview>()
.AddType<WriteReviewFormTargetProduct>()
.AddType<WriteReviewFormDivider>()
.AddType<WriteReviewFormReviewItemTitle>()
.AddType<WriteReviewFormRatings>()
.AddType<WriteReviewFormReviewTitle>()
.AddType<WriteReviewFormReviewBody>()
.AddType<WriteReviewFormNameField>()
.AddType<WriteReviewFormTermsConditions>()
.AddType<WriteReviewFormSubmitButton>()
.AddType<ReceiptDetailsHeader>()
.AddType<ReceiptDetailsTotal>()
.AddType<ReceiptDetailsLineItem>()
.AddType<ReceiptDetailsSavings>()
.AddType<ReceiptDetailsBarcode>()
.AddType<ReceiptDetailsCouponSection>()
.AddType<ReceiptDetailsCoupon>()
.AddType<ReceiptDetailsFooter>()
.AddType<ReceiptDetailsSummary>()
.AddType<ReceiptDetailsInfo>()
.AddType<ReceiptDetailsItems>()
.AddType<ReceiptDetailsPaymentInfo>()
.AddType<ReceiptDetailsPayment>()
.AddType<ReceiptDetailsPayments>()
.AddType<ReceiptAnalytics>()
.AddType<ReceiptDownload>()
.AddType<ReceiptDetails>()
.AddType<ReceiptListPageInfo>()
.AddType<ReceiptFeedGroupHeader>()
.AddType<ReceiptItem>()
.AddType<ReceiptsList>()
.AddType<Badge>()
.AddType<IconTextBanner>()
.AddType<ContentCta>()
.AddType<DismissBottomSheetResultSuccess>()
.AddType<BroadcastBanner>()
.AddType<Button>()
.AddType<TagLabel>()
.AddType<ButtonAnalytics>()
.AddType<ChatEntryCard>()
.AddType<DividerCard>()
.AddType<DownloadableAsset>()
.AddType<Footer>()
.AddType<HorizontalList>()
.AddType<RecipeHorizontalList>()
.AddType<OrderHorizontalList>()
.AddType<ProductHorizontalList>()
.AddType<QuickLinkHorizontalList>()
.AddType<BoosterHorizontalList>()
.AddType<ImageWithAlt>()
.AddType<ImageTextBanner>()
.AddType<InlineMessage>()
.AddType<MoreCard>()
.AddType<ProgressStepper>()
.AddType<ShoppingModeDetails>()
.AddType<Spacer>()
.AddType<TextWithAlt>()
.AddType<TextWithLink>()
.AddType<VerticalListAction>()
.AddType<VerticalList>()
.AddType<Shopper>()
.AddType<ShoppingModeMutationResponse>()
.AddType<ShoppingModes>()
.AddType<ShoppingMode>()
.AddType<ShoppingModeVariantFulfilmentWindowState>()
.AddType<ShoppingModeVariant>()
.AddType<ShoppingModeVariantBadge>()
.AddType<ShoppingModeVariantCondition>()
.AddType<WebLink>()
.AddType<WebLinkCookie>()
.AddType<WebLinkHeader>()
.AddType<StoreProductAvailability>()
.AddType<StoreProductAvailabilityList>()
.AddType<StoreAddress>()
.AddType<StoreIcon>()
.AddType<TradingHour>()
.AddType<GeoInfo>()
.AddType<StoreDetailCard>()
.AddType<StoreList>()
.AddType<SuburbList>()
.AddType<SuburbDetailCard>()
.AddType<SubscriptionInfo>()
.AddType<SubscriptionAnalyticsData>()
.AddType<SubscriptionsInfo>()
.AddType<SuggestedListItem>()
.AddType<SuggestedLists>()
.AddType<VocSurvey>()
.AddType<CheckoutSurvey>()
.AddType<Question>()
.AddType<TrafficDriverItem>()
.AddType<TrafficDriver>()
.AddType<VideoPage>()
.AddType<VideoPageHeader>()
.AddType<VoiceSearchResult>()
.AddType<WXIDDetails>()
.AddType<CartResponse>()
.AddType<CartProductCard>()
.AddType<CartProductQuantityInfo>()
.AddType<CartProductSection>()
.AddType<CartAvailableProductSection>()
.AddType<CartProductCategory>()
.AddType<CartPromotionSection>()
.AddType<CartHeader>()
.AddType<SavingsOnCart>()
.AddType<CartRewardsInfo>()
.AddType<CartPromotionInfo>()
.AddType<CartPromotionsToolTipMessage>()
.AddType<CartFooter>()
.AddType<CartBanner>()
.AddType<MemberPricePromotionInfo>()
.AddType<MultiBuyPromotionInfo>()
.AddType<BundlePromotionInfo>()
.AddType<CartProductInfo>()
.AddType<CartAlert>()
.AddType<CartProductQuantity>()
.AddType<MarketSellerCard>()
.AddType<CartMarketProductSection>()
.AddType<MarketplaceProductInfo>()
.AddType<MarketplaceCartTracker>()
.AddType<CartInfoResponse>()
.AddType<CartInfoProductQuantity>()
.AddType<CartProductQuantitiesUpdatedResponse>()
.AddType<CartProductQuantityUpdated>()
.AddType<ErrorUpdateCartProductQuantity>()
.AddType<CatalogueBrowse>()
.AddType<CatalogueBrowseCategoryPage>()
.AddType<CatalogueBrowsePromotionPage>()
.AddType<CatalogueBrowseCategoryPageHeader>()
.AddType<CatalogueBrowseCategoryPageButton>()
.AddType<CatalogueBrowsePromotionPageHeader>()
.AddType<CatalogueBrowsePromotionPageButton>()
.AddType<CatalogueHome>()
.AddType<CatalogueHomeSpecialsCard>()
.AddType<CatalogueHomeChangeStore>()
.AddType<CatalogueHomeTermsAndConditions>()
.AddType<CatalogueHomeTerm>()
.AddType<CatalogueHomeCatalogueCard>()
.AddType<CatalogueHomeCardSneakPeek>()
.AddType<CatalogueHomeCardTracking>()
.AddType<CatalogueLanding>()
.AddType<CatalogueLandingHeader>()
.AddType<CatalogueLandingCategoryCard>()
.AddType<CatalogueLandingPrimaryContentCard>()
.AddType<CatalogueListing>()
.AddType<CatalogueListingHeader>()
.AddType<CatalogueListingHeroProductCard>()
.AddType<PromotionDetailsHeader>()
.AddType<TermsAndConditions>()
.AddType<CataloguePromotionDetails>()
.AddType<CataloguePromotionListing>()
.AddType<CataloguePromotionGroup>()
.AddType<ProductHeroCard>()
.AddType<CataloguePromotionListingHeader>()
.AddType<IdVerificationCompleteFail>()
.AddType<IdVerificationCompleteSuccess>()
.AddType<IdVerificationInitResponse>()
.AddType<IdVerificationBottomSheet>()
.AddType<ApplyCheckoutCreditResponse>()
.AddType<RemoveCheckoutCreditResponse>()
.AddType<AlertMessage>()
.AddType<SnackBar>()
.AddType<LegacyError>()
.AddType<HasHaveYouForgotten>()
.AddType<CheckoutOrderTotalDetailsRow>()
.AddType<CheckoutOrderTotalDetailsRowMessage>()
.AddType<CheckoutOrderTotalDetailsSummaryRow>()
.AddType<CheckoutRefundInfoBottomSheet>()
.AddType<CheckoutOrderTotalDetails>()
.AddType<PaymentInstrumentResponseSuccess>()
.AddType<PaymentInstrumentResponseValidationFailure>()
.AddType<GiftCardSection>()
.AddType<AddGiftCard>()
.AddType<LinkedGiftCard>()
.AddType<UnlinkedGiftCard>()
.AddType<PaymentMethodSection>()
.AddType<AddCreditCard>()
.AddType<LinkedCreditCard>()
.AddType<UnlinkedCreditCard>()
.AddType<ExpiredCreditCard>()
.AddType<AddPayPal>()
.AddType<AddPayPalAlert>()
.AddType<LinkedPayPal>()
.AddType<GooglePay>()
.AddType<ApplePay>()
.AddType<PaymentInstrumentTotalDetails>()
.AddType<PlaceOrderButtonDefault>()
.AddType<PlaceOrderButtonApplePay>()
.AddType<PlaceOrderButtonGooglePay>()
.AddType<AddCreditCardResponse>()
.AddType<LinkPayPalResponse>()
.AddType<LinkCreditCardResponse>()
.AddType<AddGiftCardResponse>()
.AddType<UnlinkCreditCardSuccess>()
.AddType<UnlinkCreditCardValidationFailure>()
.AddType<UnlinkCreditCardFailure>()
.AddType<UnlinkGiftCardResponse>()
.AddType<UnlinkPayPalResponse>()
.AddType<WpayPaymentSuccess>()
.AddType<WpayPaymentFailure>()
.AddType<CheckoutProductInfo>()
.AddType<CheckoutSegmentProgress>()
.AddType<ApplyPromoCodeFail>()
.AddType<ApplyPromoCodeSuccess>()
.AddType<ApplyPromoCodeReplaceConfirmation>()
.AddType<ApplyPromoCodeAdditionalInfo>()
.AddType<ApplyCheckoutPromoCodeResponse>()
.AddType<RemoveCheckoutPromoCodeResponse>()
.AddType<CheckoutReviewProductsList>()
.AddType<CheckoutReviewSupplyLimitGroups>()
.AddType<CheckoutReviewProduct>()
.AddType<CheckoutReviewProductSupplyLimit>()
.AddType<CheckoutReviewProductContent>()
.AddType<CheckoutSubstitutionPreferences>()
.AddType<CheckoutProductSubstitutionPreference>()
.AddType<CheckoutOrderSummary>()
.AddType<CheckoutTermsConditions>()
.AddType<DeliveryUnlimitedSubscribeConfirmation>()
.AddType<DeliveryUnlimitedSubscribeConfirmationLineItem>()
.AddType<DeliveryUnlimitedSubscribeConfirmationAnalytics>()
.AddType<DeliveryUnlimitedSubscribeFeature>()
.AddType<DeliveryUnlimitedSubscribeLink>()
.AddType<DeliveryUnlimitedPayment>()
.AddType<DeliveryUnlimitedSubscribePayment>()
.AddType<DeliveryUnlimitedIconItem>()
.AddType<DeliveryUnlimitedSubscribeTerms>()
.AddType<DeliveryUnlimitedSubscribeTermsItem>()
.AddType<DeliveryUnlimitedSubscribePlans>()
.AddType<DeliveryUnlimitedSubscribePlanType>()
.AddType<DeliveryUnlimitedSubscribeFeatureLink>()
.AddType<DeliveryUnlimitedSubscribePlan>()
.AddType<DeliveryUnlimitedSubscribeSubmissionResponse>()
.AddType<DeliveryUnlimitedSubscribeSummary>()
.AddType<DeliveryUnlimitedSubscribeDisclaimer>()
.AddType<DeliveryUnlimitedSubscribeTermsMarkdown>()
.AddType<FreshMagHome>()
.AddType<FreshMagSummary>()
.AddType<MoreCiscoWiFi>()
.AddType<DeleteAccountMutationResponse>()
.AddType<DeleteAccountTnCResponse>()
.AddType<MoreDeliveryUnlimited>()
.AddType<MoreActivateRewardsCard>()
.AddType<MoreRewardsCard>()
.AddType<CancelOrderResponse>()
.AddType<OrderConfirmationBannerImage>()
.AddType<OrderConfirmationHeader>()
.AddType<OrderConfirmationFooterText>()
.AddType<OrderInfo>()
.AddType<OrderConfirmationCMOBroadcastBanner>()
.AddType<OrderConfirmationContent>()
.AddType<OrderInvoiceDetail>()
.AddType<OrderInvoiceError>()
.AddType<PickUpOrder>()
.AddType<DeliveryOrder>()
.AddType<CompactOrder>()
.AddType<OrdersMessage>()
.AddType<OrderAnalytics>()
.AddType<Orders>()
.AddType<EditOrderDriverInstructionsResponse>()
.AddType<ToggleOrderLeaveUnattendedResponse>()
.AddType<OrderProductList>()
.AddType<OrderProductListProductCategory>()
.AddType<OrderProductListProduct>()
.AddType<OrderProductListSubstitutedProduct>()
.AddType<OrderProductListFulfilmentStatus>()
.AddType<OrderProductListFulfilmentFilter>()
.AddType<OrderProductListFulfilmentFilterItem>()
.AddType<DriverRating>()
.AddType<DriverRatingStarsSurvey>()
.AddType<DriverRatingFeedbackAndComments>()
.AddType<DriverRatingThankYou>()
.AddType<OrderSummary>()
.AddType<Feed>()
.AddType<PastPickupOrderFulfilmentDetails>()
.AddType<DeliveryOrderFulfilmentDetails>()
.AddType<OrderDetailsItem>()
.AddType<OrderDetails>()
.AddType<DeliveryInstructions>()
.AddType<PickupInstructions>()
.AddType<BayNumberPreferences>()
.AddType<OnMyWayPreferences>()
.AddType<OrderDetailsStatus>()
.AddType<OrderDetailsDivider>()
.AddType<OrderTime>()
.AddType<OrderRewardsSummary>()
.AddType<OrderDetailsProductCard>()
.AddType<OrderPaymentDetails>()
.AddType<OrderPaymentDetailsItem>()
.AddType<CancelWarning>()
.AddType<EditOrderWarning>()
.AddType<EditOrderWarningItem>()
.AddType<EditOrderButton>()
.AddType<OrderDetailSummary>()
.AddType<OrderFulfilmentDetails>()
.AddType<OrderStoreDetails>()
.AddType<OrderCollectionDetails>()
.AddType<OrderCollectionParkingDetails>()
.AddType<OrderOverview>()
.AddType<PastOrderOverview>()
.AddType<CurrentPickupOrderOverview>()
.AddType<CurrentDeliveryOrderOverview>()
.AddType<OrderNumberDetails>()
.AddType<StepsTooltip>()
.AddType<TooltipStepInfo>()
.AddType<CurrentPickupOrderFulfilmentDetails>()
.AddType<DeliveryDriverDetails>()
.AddType<CurrentPickupLocationTrackingStatus>()
.AddType<OrderProofOfDeliveryDetails>()
.AddType<LocationTrackingPrimingPageContent>()
.AddType<LocationTrackingPrimingPageRationale>()
.AddType<LocationTrackingPrimingPage>()
.AddType<MyGroceriesProductListBadge>()
.AddType<DeliveryMethodsTooltip>()
.AddType<TooltipDeliveryMethodInfo>()
.AddType<DeliveryMethodBulletInfo>()
.AddType<ProductReviewAlternativeInfoBottomSheet>()
.AddType<ProductReviewAlternativeResponse>()
.AddType<RecipeSummaryFeature>()
.AddType<RecipeSummaryDifficulty>()
.AddType<RecipeByLine>()
.AddType<MethodDescription>()
.AddType<MethodItem>()
.AddType<RecipeMethod>()
.AddType<RecipeMoreCard>()
.AddType<RecipeTagList>()
.AddType<RecipeNutritionTileFeature>()
.AddType<RecipeNutritionTile>()
.AddType<RecipeIngredientDetail>()
.AddType<RecipeUserInteraction>()
.AddType<RecipeServes>()
.AddType<IngredientsSection>()
.AddType<RecipeDetail>()
.AddType<RecipeCostPerServe>()
.AddType<ShopIngredientButton>()
.AddType<Video>()
.AddType<RecipeGroupTile>()
.AddType<RecipeSource>()
.AddType<FreshMagTile>()
.AddType<DualImageBanner>()
.AddType<RecipeList>()
.AddType<RecipeSummaryCard>()
.AddType<RecipeDuration>()
.AddType<Filter>()
.AddType<SortOption>()
.AddType<RecipeSaveInfo>()
.AddType<Address>()
.AddType<Price>()
.AddType<PriceRange>()
.AddType<ActionData>()
.AddType<ActionableCard>()
.AddType<Analytics>()
.AddType<AnalyticsExtraContent>()
.AddType<HeroBanner>()
.AddType<Carousel>()
.AddType<HeroBannerPromoBody>()
.AddType<HeroBannerBodyText>()
.AddType<HeroBannerTermsAndConditions>()
.AddType<StaticBottomSheet>()
.AddType<ContentCard>()
.AddType<ContentCardFooter>()
.AddType<FullWidthContentCard>()
.AddType<CoreBroadcastBannerUI>()
.AddType<BasicCoreBroadcastBanner>()
.AddType<CoreButton>()
.AddType<ButtonSection>()
.AddType<CoreIcon>()
.AddType<CoreInsetAlertUI>()
.AddType<BasicInsetAlert>()
.AddType<CoreRowUI>()
.AddType<BasicCoreRowList>()
.AddType<BasicCoreRow>()
.AddType<CoreRadioRowUI>()
.AddType<CoreTagUI>()
.AddType<HostedIcon>()
.AddType<PopupMessage>()
.AddType<EmptyScreenMessage>()
.AddType<FullScreenMessage>()
.AddType<EditorialBanner>()
.AddType<EditorialBannerFooter>()
.AddType<EditorialCarousel>()
.AddType<EdrOfferBanner>()
.AddType<GridList>()
.AddType<FullWidthImageCard>()
.AddType<InsetBanner>()
.AddType<InsetBannerAction>()
.AddType<Link>()
.AddType<MerchCard>()
.AddType<MerchCardFullImage>()
.AddType<NavRoundel>()
.AddType<PageCover>()
.AddType<CoreColorTheme>()
.AddType<CoreForegroundColors>()
.AddType<CompatibleColor>()
.AddType<Pill>()
.AddType<ProductSection>()
.AddType<PromotionMarkdownContent>()
.AddType<PromotionBanner>()
.AddType<SearchNavCard>()
.AddType<TabSection>()
.AddType<TabItem>()
.AddType<TitleSection>()
.AddType<VideoAdEventAnalytics>()
.AddType<VideoAdBottomSheet>()
.AddType<VideoAd>()
.AddType<VideoAdUnitCarousel>()
.AddType<VideoAdUnit>()
.AddType<SpecialsHomePage>()
.AddType<SpecialsHomePageHeader>()
.AddType<OfferCard>()
.AddType<OfferCardPriceInfo>()
.AddType<PromotionCard>()
.AddType<CheckoutCollectionAddressEmpty>()
.AddType<CheckoutCollectionAddressDelivery>()
.AddType<CheckoutCollectionAddressPickup>()
.AddType<CheckoutCollectionMethodOption>()
.AddType<CheckoutMarketPickupBottomSheet>()
.AddType<CheckoutCollectionMethod>()
.AddType<CheckoutMarketFulfilmentAddress>()
.AddType<CheckoutDeliveryPreferenceToggle>()
.AddType<CheckoutDeliveryPreferenceText>()
.AddType<InputTextLimit>()
.AddType<CheckoutFulfilmentWindowSlotBadge>()
.AddType<FulfilmentWindowSlotSelectionOptionsState>()
.AddType<CheckoutFulfilmentWindowSlot>()
.AddType<CheckoutFulfilmentWindowGroupMessage>()
.AddType<CheckoutFulfilmentWindowGroup>()
.AddType<CheckoutDeliveryNowWindow>()
.AddType<CheckoutDirectToBootNowWindow>()
.AddType<CheckoutFulfilmentWindow>()
.AddType<GreenWindowBanner>()
.AddType<FulfilmentWindowsFooter>()
.AddType<FulfilmentWindowSlotSelectionInfo>()
.AddType<FulfilmentExtraInfo>()
.AddType<FulfilmentFeesInfoSection>()
.AddType<FulfilmentFeeItem>()
.AddType<FulfilmentFeePriceInfo>()
.AddType<FulfilmentInfoRowAccordion>()
.AddType<FulfilmentWindowSelectionOptionsInfo>()
.AddType<FulfilmentWindowSlotSelectionOption>()
.AddType<ExtraInfoButton>()
.AddType<CheckoutFulfilmentWindows>()
.AddType<CheckoutFulfilmentWindowsEmptyState>()
.AddType<CheckoutFulfilmentWindowsSelectedState>()
.AddType<CheckoutPackagingOptionInfo>()
.AddType<CheckoutPackagingOption>()
.AddType<CheckoutPackagingMethod>()
.AddType<CheckoutSectionHeader>()
.AddType<CheckoutPayOption>()
.AddType<CheckoutPay>()
.AddType<CheckoutProductCampaigns>()
.AddType<CheckoutProductCampaignItem>()
.AddType<MarketSellerGroup>()
.AddType<CheckoutMarketProducts>()
.AddType<MarketProductRow>()
.AddType<CheckoutProducts>()
.AddType<CheckoutProductRow>()
.AddType<CheckoutProductRewards>()
.AddType<CheckoutProductInstruction>()
.AddType<CheckoutSubstitution>()
.AddType<CheckoutSubstitutionOption>()
.AddType<CheckoutInfoDialog>()
.AddType<PromoDiscountItem>()
.AddType<PromoDiscount>()
.AddType<CheckoutPromotionCode>()
.AddType<CheckoutSummaryBillingAddress>()
.AddType<CheckoutSummaryBillingAddressEmpty>()
.AddType<CheckoutOrderMarketSellerInfo>()
.AddType<CheckoutOrderGroceryAddress>()
.AddType<CheckoutOrderMarketAddress>()
.AddType<CheckoutOrderAddresses>()
.AddType<CheckoutRewardsAndDiscounts>()
.AddType<CheckoutSummaryRewardsUnregistered>()
.AddType<CheckoutSummaryRewardsRegisteredRedeemable>()
.AddType<CheckoutSummaryRewardsRegistered>()
.AddType<CheckoutSummaryRewards>()
.AddType<EditOrderStatus>()
.AddType<EditOrderMessage>()
.AddType<EditOrderDetails>()
.AddType<EditOrderConfirmation>()
.AddType<EditOrderBanner>()
.AddType<SetEditOrderStatusResponse>()
.AddType<OrderHelp>()
.AddType<OrderHelpItem>()
.AddType<OrderHelpContactTimes>()
.AddType<ContactItem>()
.AddType<CheckoutCredit>()
.AddType<CheckoutCreditEmpty>()
.AddType<CheckoutCreditItems>()
.AddType<CheckoutCreditItem>()
.AddType<CheckoutCreditUnavailable>()
.AddType<CheckoutPromoCode>()
.AddType<CheckoutPromoCodeDetail>()
.AddType<CheckoutPromoCodeItem>()
.AddType<CheckoutRewards>()
.AddType<CheckoutRewardsRedeem>()
.AddType<CheckoutRewardsInfo>()
.AddType<CheckoutRewardsLink>()
.AddType<CheckoutRewardsRedeemInfo>()
;
        }
    }
    #nullable restore
}
